{"recipe whose posting date is at least posting date of rice pudding": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.15) (name en.recipe.19) (name en.recipe.20) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.40) (name en.recipe.44) (name en.recipe.47) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.59) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string posting_date)))))", "paraphrases": ["name a recipe which was posted on or later than the posting date of the rice pudding recipe", "what recipe was posted after or on the same day as rice pudding", "recipe whose posting date is at least rice puddings posting date", "show recipes posted on the same date or later than rice pudding", "which recipes were posted when rice pudding was posted", "recipes posted with or after posting rice pudding", "show me recipes posted the same day as rice pudding or after", "what recipes posting date is at least the same as rice pudding"]}, "recipe that is for the least number of meal": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string min) (string meal) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))", "paraphrases": ["show me recipes that work for more than one meal", "which recipe is intended for the least number of meals", "find a recipe for a small meal", "which recipe has the least number of meals", "show me recipe to do a meal for a single person", "recipes for least number of meals", "a recipe for the fewest types of meals", "what recipe makes the fewest meals", "show me a recipe for the least number of meals"]}, "recipe that requires the most number of ingredient": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string max) (string requires) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))", "paraphrases": ["what recipe requires highest number of ingredients", "what recipes have the most ingredients", "find recipe that needs the maximum number of food items", "what recipe calls for the most ingredients", "what recipes need the most ingrediants", "what recipe has the most ingredients", "which recipe requires the most ingredients", "which recipe has the longest ingredient list", "show me the recipe that has the most number of requirements", "recipe of number of ingredients"]}, "recipe whose cooking time is at least preparation time of rice pudding": {"denotation": "(list (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.47) (name en.recipe.49) (name en.recipe.50) (name en.recipe.51) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.9) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))", "paraphrases": ["show me recipes with a cooking time greater or equal to the preparation time for rice pudding", "what recipe requires a cooking time at least as long as rice pudding", "which recipe has a cooking time as that of rice pudding", "what recipes cooking time is at least the preparation time of rice pudding", "what recipes have a cooking time that is at least as long as rice puddings preparation time", "what recipe cooks in more or the same time as rice pudding takes to prep", "what is the minimum time required to prepare rice pudding", "recipe cooked in preparation time of rice pudding or more", "recipe with preparation time not less than that of rice pudding"]}, "recipe whose preparation time is preparation time of rice pudding": {"denotation": "(list (name en.recipe.14) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string preparation_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time))))", "paraphrases": ["show me recipes that have the same preparation time as rice pudding", "what time can be prepped in the same time as rice pudding", "show me recipes that take the same time to prepare as rice pudding", "what recipes preparation time is the same as rice pudding", "which  recipe takes as much time to prepare as rice pudding", "recipe prepared in preparation time of rice pudding", "recipes that require same time to prepare than rice pudding", "show me a recipe with the same prep time as rice pudding", "find a recipe that takes the same time to cook as rice pudding"]}, "ingredient that less than two recipe requires": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["what ingredient is needed for fewer than two recipes", "what ingredient is required in only one recipe", "show me ingredients required for fewer than two recipes", "what ingredient is used by less than two recipes", "which ingredient is used for less than two recipes", "show me recipes that require less than two ingredients", "what is an ingredient found in fewer than two recipes", "which ingredient is needed in less than two recipes ", "what ingredient is used only in a single recipe"]}, "ingredient that recipe whose posting date is 2004 requires": {"denotation": "(list (name en.ingredient.milk) (name en.ingredient.spinach))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1))))", "paraphrases": ["ingredient required by recipe whose posting date is 2004", "what ingredient is called for by a recipe posted in 2004", "show me ingredients required by recipes posted in 2004", "what does the recipe posted in 2004 require", "ingredients in recipe posted in 2004", "what is an ingredient found in a recipe that was posted in 2004", "what ingredients do recipes posted in 2004 call for", "what recipes posting date is in 2004 and what ingredients does it require", "what are the ingredients needed for recipes posted in 2004", "what are ingredients required by the recipe posted in 2004"]}, "posting date of rice pudding": {"denotation": "(list (date 2004 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string posting_date)))", "paraphrases": ["when is rice pudding recipe posted", "what is the posting date of rice pudding", "when was rice pudding recipe posted", "when was the recipe for rice pudding posted", "when was rice pudding posted", "when was the rice pudding recipe posted", "what is the posting date for rice pudding", "what day was rice pudding posted"]}, "recipe that is for lunch and that is for lunch": {"denotation": "(list (name en.recipe.10) (name en.recipe.12) (name en.recipe.13) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.3) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.4) (name en.recipe.40) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.55) (name en.recipe.56) (name en.recipe.58) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch) (string meal) (string =) en.meal.lunch))", "paraphrases": ["what recipes are for lunch", "name the recipe that is prepared for lunch", "what recipe makes something for lunch", "name lunch recipes", "find the recipes for lunch", "show me lunch recipes", "what is a lunch recipe", "show me recipes for lunch", "find a recipe for lunch", "what are the recipes for lunch"]}, "recipe whose posting date is 2004 and that is for lunch": {"denotation": "(list (name en.recipe.9) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string meal) (string =) en.meal.lunch))", "paraphrases": ["show me lunch recipes posted in 2004", "find the lunch recipes posted in 2004", "what recipe has a posting date of 2004 and is lunch", "what lunch recipe was posted in 2004", "the lunch recipe  posting date is 2004", "what recipe posted in 2004 makes a lunch meal", "find  lunch recipes posted in 2004", "show me lunch recipes that posted in 2004", "find a lunch recipe from 2004", "which recipe was posted in 2004 and is for lunch"]}, "recipe whose preparation time is larger than cooking time of rice pudding": {"denotation": "(list (name en.recipe.12) (name en.recipe.15) (name en.recipe.17) (name en.recipe.2) (name en.recipe.21) (name en.recipe.23) (name en.recipe.25) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.35) (name en.recipe.37) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.43) (name en.recipe.47) (name en.recipe.50) (name en.recipe.51) (name en.recipe.53) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))", "paraphrases": ["what recipes prep time is longer than the cook time for rice pudding", "recipe with more preparation time than rice pudding", "what recipe takes longer to prep than rice pudding takes to cook", "which recipe needs longer preparation time than that of rice pudding", "show me recipes with preparation times longer than cooking time of rice pudding", "show me recipes that require longer time to cook than rice pudding", "show me recipes with a preparation time that is longer than rice puddings cooking time", "recipe prepared in more time than cooking time of rice pudding", "what recipes preparation time is greater than the cooking time for rice pudding", "which recipes take longer to cook than rice pudding"]}, "average cooking time of recipe": {"denotation": "(list (number 17 en.minute))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cooking_time))))", "paraphrases": ["what is the average cooking time of this recipe", "on average how long does the recipe take to cook", "what is the average cooking time of recipe", "average cooking time", "what is the average cooking time for that recipe", "show me the average cooking time for all recipes", "what is the average time needed for the preparation of the dish", "what is the average cooking time across all recipes", "what is the mean cooking time for the recipe", "what is the average cooking time for that dish"]}, "recipe whose preparation time is at least cooking time of rice pudding": {"denotation": "(list (name en.recipe.12) (name en.recipe.15) (name en.recipe.17) (name en.recipe.2) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.35) (name en.recipe.37) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.43) (name en.recipe.47) (name en.recipe.50) (name en.recipe.51) (name en.recipe.53) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))", "paraphrases": ["what recipes preparation time is no lesser than the cooking time for rice pudding", "what recipe prepare in less or same time to cook rice pudding", "recipes that requires the same or more time to prepare as rice pudding", "what recipe has a prep time at least as long as the cooking time of rice pudding", "show me recipes that have the same or longer preparation time as rice pudding", "show me recipes with a preparation time equal to or greater than the cooking time of rice pudding", "show me recipes with preparation time equal to or longer than rice pudding", "what recipe can you prep in the same or more time as it takes to cook rice pudding"]}, "recipe whose posting date is not 2004": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.58) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.quiche))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string !=) (date 2004 -1 -1)))", "paraphrases": ["what is a recipe that was not posted in 2004", "which recipe was not posted in 2004", "show recipes whose posting date is not 2004", "what recipes posting date is not in 2004", "show me recipes that were not posted in 2004", "which recipes were not posted in 2004", "recipe not posted in 2004", "what recipe was not posted in 2004", "show me recipes not posted in 2004"]}, "ingredient that recipe that is for lunch requires": {"denotation": "(list (name en.ingredient.milk) (name en.ingredient.spinach))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch)))", "paraphrases": ["what recipes ingredient does this lunch require", "what ingredients are used only for lunch", "what is an ingredient found in a lunch recipe", "what ingredients do lunch recipes need", "what ingredients do lunch recipes call for", "show ingredients for lunch recipes", "show me ingredients required by lunch recipes", "what ingredients are needed for lunch recipes", "what ingredient is called for by a lunch recipe"]}, "meal that rice pudding is for": {"denotation": "(list (name en.meal.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) en.recipe.rice_pudding))", "paraphrases": ["for what meal is rice pudding used for", "for which meal is rice pudding had", "show me meals including rice pudding", "what is a meal with rice pudding as a dish"]}, "ingredient that recipe that requires milk requires": {"denotation": "(list (name en.ingredient.milk))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk)))", "paraphrases": ["show me ingredients required by recipes that require milk", "a recipe with milk as an ingredient", "which recipe needs milk for  its preparation", "list recipes that require milk", "show me recipes requiring the ingredient milk", "what other ingredients do recipes that use milk require", "which recipes require milk", "what ingredient is called for in the same recipe as milk", "what recipe requires milk"]}, "recipe whose cooking time is larger than cooking time of rice pudding": {"denotation": "(list (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.18) (name en.recipe.19) (name en.recipe.21) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.40) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.47) (name en.recipe.49) (name en.recipe.51) (name en.recipe.57) (name en.recipe.59) (name en.recipe.6) (name en.recipe.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))", "paraphrases": ["what recipe is for a dish that takes longer to cook than does rice pudding", "what recipes cooking time is greater than that of rice pudding", "which recipe takes longer to cook than rice pudding", "show me recipes that require cooking time thats more than rice pudding", "show me recipes with cooking times greater than cooking time of rice pudding", "show me recipe that require longer time to cook than rice pudding", "what recipes takes more time to prepare than rice pudding", "which recipe needs a longer preparation time than rice pudding", "what recipe takes longer to cook than rice pudding"]}, "recipe whose cooking time is at most preparation time of rice pudding": {"denotation": "(list (name en.recipe.10) (name en.recipe.12) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.20) (name en.recipe.22) (name en.recipe.28) (name en.recipe.31) (name en.recipe.32) (name en.recipe.4) (name en.recipe.43) (name en.recipe.46) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.8) (name en.recipe.quiche))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))", "paraphrases": ["recipe cooked in preparation time of rice pudding or less", "what recipe takes equal or less time to cook than rice pudding takes to prep", "recipe with cooking time not more than that of rice pudding", "what recipes cooking time is at most that of rice puddings preparation time", "show me recipes that take as long to cook as it takes to prepare rice pudding or quicker", "show recipes that require at the most time as rice pudding preparation", "what recipe requires no more cooking time than rice pudding", "show me recipes with cooking time equal to or less than the preparation time for rice pudding", "which recipes take as long as prepare rice pudding"]}, "recipe that is for two meal": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))", "paraphrases": ["what recipe is found in two different meals", "the receipe is for two meal", "show me recipes that can be used for two meals", "which recipe is for two meals", "which recipes can make two meals", "show me recipes designed for two meals", "find a recipe thatll feed two people", "recipes for two meal"]}, "recipe whose posting date is 2004 and whose posting date is 2004": {"denotation": "(list (name en.recipe.51) (name en.recipe.57) (name en.recipe.59) (name en.recipe.9) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string posting_date) (string =) (date 2004 -1 -1)))", "paraphrases": ["which recipe was posted in 2004", "the receipe posting date is 2004", "find recipes posted in 2004", "show me all recipes posted in 2004", "what recipes posting date is 2004", "show me all recipes from 2004", "show me all the recipes posted in 2004", "are there any recipes which were posted twice in 2004"]}, "rice pudding or quiche": {"denotation": "(list (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.recipe.rice_pudding en.recipe.quiche))", "paraphrases": ["show me recipes for rice pudding or quiche", "is it the recipe for rice pudding or quiche", "what is a recipe for rice pudding or quiche", "recipes for rice pudding or quice", "quiche or rice pudding", "what to prefer rice pudding or quiche"]}, "meal that at most two recipe is for": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["what meal has two or less recipes", "find two meal recipes", "show me meals with two or fewer recipes", "what meals are at most two recipes for", "what meal has maximum recipes", "what is a meal with no more than two recipes", "what meal has two or fewer recipes designated for it"]}, "recipe that has the largest preparation time": {"denotation": "(list (name en.recipe.4) (name en.recipe.43) (name en.recipe.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time))))", "paraphrases": ["show me recipes with the most preparation time", "what recipe takes the longest to prepare", "show me the recipe that has the largest preperation time", "which recipe needs the longest preparation tome", "which recipe takes the longest to prepare", "what recipes preparation time is the greatest", "what recipe takes the longest time to prep", "what recipe has the longest preparation time", "show me recipes that requires the most time to prepare the dish"]}, "ingredient that the most number of recipe requires": {"denotation": "(list (name en.ingredient.spinach))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["what ingredient is most used", "what ingredient is called for by the most recipes", "what is the most commonly used ingredient", "what is the most ingredient that this recipe requires", "show me the most required ingredient in recipes", "show me ingredients required for the most recipes", "what is an ingredient required by the most recipes", "which ingredient is needed by many recipes", "which is the most used ingredient in recipes", "name the ingredient in most recipes"]}, "recipe whose preparation time is at most preparation time of rice pudding": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.16) (name en.recipe.18) (name en.recipe.19) (name en.recipe.20) (name en.recipe.22) (name en.recipe.26) (name en.recipe.27) (name en.recipe.31) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.38) (name en.recipe.41) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.5) (name en.recipe.52) (name en.recipe.55) (name en.recipe.7) (name en.recipe.8) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))", "paraphrases": ["what recipes preparation time is no more than the preparation time of rice pudding", "what recipe takes same or less time to prepare rice pudding", "which recipe has a prep time no greater than the prep time for rice pudding", "what recipe takes no longer to prepare than rice pudding", "which recipes take less or as long to prepare as rice pudding", "show me recipes that take as long to prepare as rice pudding", "what recipes have the same or less preparation time as rice pudding", "recipes that require less or same time than the time taken to prepare rice pudding", "what recipe can be prepped in equal or less time than rice pudding"]}, "recipe that requires milk and that requires milk": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.28) (name en.recipe.31) (name en.recipe.34) (name en.recipe.35) (name en.recipe.38) (name en.recipe.45) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.8) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk) (string requires) (string =) en.ingredient.milk))", "paraphrases": ["what recipes require milk", "show recipes that has milk as its ingredient", "show me all recipes require milk", "show me recipes that need milk", "what recipe has milk as an ingredient", "find a recipe that needs milk for its preparation", "show me recipes requiring milk"]}, "recipe that has two cuisine": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cuisine) (string =) (number 2)))", "paraphrases": ["which recipes have two cuisines", "what recipe makes two types of cuisine", "two cuisine recipe", "what recipe falls under two cuisines", "show me recipes that involve two cuisines", "what recipe has two cuisine", "show me recipes with two cuisines", "what is a recipe of two different cuisines", "show me recipes with two ingedients"]}, "recipe that has the largest cooking time": {"denotation": "(list (name en.recipe.21) (name en.recipe.27) (name en.recipe.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time))))", "paraphrases": ["show me recipes with the most cooking time", "what recipe takes the longest to cook", "show me recipes with the longest cooking time", "what recipe has the greatest cooking time", "which recipe requires the longest cooking time", "what recipe takes most time to cook", "which recipe takes the maximum preparation time", "what recipe has the longest cooking time", "show the recipe that takes the longest time to cook"]}, "recipe whose cooking time is at most cooking time of rice pudding": {"denotation": "(list (name en.recipe.10) (name en.recipe.12) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.2) (name en.recipe.20) (name en.recipe.22) (name en.recipe.23) (name en.recipe.28) (name en.recipe.31) (name en.recipe.32) (name en.recipe.36) (name en.recipe.4) (name en.recipe.41) (name en.recipe.43) (name en.recipe.46) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.58) (name en.recipe.7) (name en.recipe.8) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))", "paraphrases": ["what recipes cooking time is at the greatest the cooking time of rice pudding", "recipe whose cooking time is not more than rice pudding", "what recipe cooks for equal or less time than rice pudding", "which recipes take at most as long to cook as rice pudding", "what recipes take the same amount of time or less to cook as rice pudding", "what recipe is cooked in less time than rice pudding", "what is a recipe that takes no more time to cook than rice pudding", "which recipe has the cooking time of rice pudding", "recipes that have cooking time less than cooking time of rice pudding", "show me recipes that require a maximum cooking time as rice pudding"]}, "recipe that requires the least number of ingredient": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string min) (string requires) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))", "paraphrases": ["show me recipes that have the fewest ingredients", "show me recipes requiring fewest ingredients", "which recipes require the least amount of ingredients", "which recipe has the shortest ingredient list", "what recipe has the fewest amount of ingredients", "a recipe requiring the fewest ingredients", "what recipe calls for the fewest ingredients", "what recipe needs least ingredients", "what is the recipe that needs the minimum number of ingredients", "show me recipes requiring the fewest ingredients"]}, "recipe that requires less than two ingredient": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))", "paraphrases": ["which recipes require only a single ingredient", "which recipe needs less than two food items for its preparation", "what recipe requires fewer than two ingredients", "what recipe calls for fewer than two ingredients", "recipe with only one ingredient", "a recipe requiring fewer than two ingredients", "single ingredient recipe", "show me recipes requiring one ingredient", "show me recipes that use less than two ingredients", "show me recipes with fewer than two ingredients"]}, "meal that rice pudding or quiche is for": {"denotation": "(list (name en.meal.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.recipe.rice_pudding en.recipe.quiche)))", "paraphrases": ["what meal is rice pudding or quiche made for", "for which meal is rice pudding or quiche had", "what meal is rice pudding or quiche intended for", "meal that rice pudding and quiche can be used", "for what meal is rice pudding or quiche", "for what meal is rice pudding or quiche used for", "what meal has quiche and rice pudding", "what meal is rice pudding or quiche in", "meal than has rice pudding or quiche"]}, "recipe whose posting date is larger than 2004": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.15) (name en.recipe.19) (name en.recipe.20) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.40) (name en.recipe.44) (name en.recipe.47) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.7) (name en.recipe.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "paraphrases": ["what recipes posting date is greater than 2004", "which recipes were posted after 2004", "find recipes posted after 2004", "what is a recipe posted later than 2004", "what recipe was posted after 2004", "recipes posted after 2004"]}, "recipe that requires ingredient that rice pudding requires": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.28) (name en.recipe.31) (name en.recipe.34) (name en.recipe.35) (name en.recipe.38) (name en.recipe.45) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.8) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) en.recipe.rice_pudding)))", "paraphrases": ["which recipe requires the same ingredient as rice pudding", "what recipe calls for the same ingredients as rice pudding", "what recipe requires the ingredients of rice pudding", "what ingredient is found in rice pudding", "which recipes require the same ingredients as rice pudding", "what recipes have a common ingredient in rice pudding", "show me recipes requiring an ingredient from rice pudding", "what recipes require the same ingredients as rice pudding", "what are ingredients of rice pudding"]}, "recipe whose posting date is at most 2004": {"denotation": "(list (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.2) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.31) (name en.recipe.38) (name en.recipe.4) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.45) (name en.recipe.46) (name en.recipe.49) (name en.recipe.51) (name en.recipe.53) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "paraphrases": ["what is a recipe which was posted no later than 2004", "what recipes posting date is at the greatest in 2004", "which recipe was posted during 2004", "show me recipes posted in or before 2004", "show recipes whose posted date is on or before 2004", "which recipes were posted up to 2004", "what recipe was posted during or before 2004", "recipes posted till 2004", "show me recipes posted 2004 and earlier"]}, "recipe whose cooking time is preparation time of rice pudding": {"denotation": "(list (name en.recipe.28) (name en.recipe.50))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cooking_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time))))", "paraphrases": ["show me recipes with cooking time equal to preparation time for rice pudding", "what recipes are prepared in cooking time of rice pudding", "what recipes cooking time is the preparation time of rice pudding", "show recipes whose cooking time is same as that of rice pudding", "show me recipes that have a cooking time equal to the preparation time of rice pudding", "what recipe takes the same time to cook as rice pudding takes to prep", "what recipe has a cook time equal to the prep time of rice pudding", "show me recipes with a cooking time equal to the preparation time for rice pudding"]}, "meal that the least number of recipe is for": {"denotation": "(list (name en.meal.dinner) (name en.meal.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["which meal has the least recipes dedicated to it", "show me meals for one", "what meal has the least recipes", "show me meals with the least recipes", "which meal has least number of recipes", "which meal has the least number of recipes", "what meal has the least recipes available", "for what meal are there the fewest number of recipes"]}, "recipe that has at most two cuisine": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cuisine) (string <=) (number 2)))", "paraphrases": ["what recipe has at the most no more than two cuisines", "recipe of at most two cuisine", "which recipes have at most two cuisines", "show recipes that at most have two cuisine", "show me recipes that fall under two cuisines or less", "what recipes comes under less than three cuisine", "what recipe has two or less types of cuisine", "which recipe belongs to two cuisines", "show me recipes that follows one or two cuisines", "what is a recipe from no more than two different cuisines"]}, "total preparation time of recipe": {"denotation": "(list (number 356 en.minute))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string preparation_time))))", "paraphrases": ["what is the preparation time for that recipe", "what is the total time taken to prepare the dish", "how long does the recipe take to prep", "recipes total preparation time", "what is the total time required for preparing the dish", "what is the total prep time of the recipe", "how much time it takes to prepare recipe", "what is the total preparation time of all the recipes", "how long does the recipe take to prepare", "what is the total prep time for the recipes"]}, "recipe that has at least two cuisine": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cuisine) (string >=) (number 2)))", "paraphrases": ["show me recipes that follows two or more cuisines", "recipe of at least two cuisine", "find the recipes of multiple cuisine", "show me recipe that has at least have two cuisine", "which recipes have at least 2 cuisines", "what recipe has two or more types of cuisine", "what is a recipe found in two or more cuisines", "what recipe has no fewer than two cuisines"]}, "meal that recipe that is for lunch is for": {"denotation": "(list (name en.meal.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch)))", "paraphrases": ["what meal did that recipe i used for lunch go with", "find meal recipes for lunch", "what meals are recipes for lunch for", "which recipe is for a lunchtime meal", "what recipe is a recipe for lunch"]}, "recipe whose cuisine is cuisine of rice pudding": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.20) (name en.recipe.21) (name en.recipe.27) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.35) (name en.recipe.36) (name en.recipe.38) (name en.recipe.39) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cuisine) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cuisine))))", "paraphrases": ["find the recipes for same cuisine as rice pudding", "what is a recipe from the same cuisine as rice pudding", "which recipe belongs to the cuisine of rice pudding", "what recipe makes the same type of cuisine as rice pudding", "show me recipes that are the same cuisine as rice pudding", "show me recipes that fall under the same cuisine as rice pudding", "recipe of cuisine of rice pudding", "show me recipes from the same cuisine as rice pudding", "what recipe has a cuisine including rice pudding", "what recipes share the cuisine of rice pudding"]}, "recipe that is for less than two meal": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))", "paraphrases": ["which recipes are for less than two meals", "what recipe can make fewer than two meals", "what is recipe for a meal", "what recipe is for less than two people", "what is a recipe used for fewer than two meals", "show me recipes for fewer than two meals", "recipe of less than two meal", "recipe for only one meal", "what recipes are for less than two meals"]}, "recipe that is for the most number of meal": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string max) (string meal) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))", "paraphrases": ["what recipe is for most meals", "which recipes have the most number of meals", "show me recipes for the most meals", "what recipe can make the most meals", "which recipe is used for the most meals", "what recipe serves at the most three", "which recipes can be used for most number of meals", "find recipes for all kinds of meals", "what recipe is designed for the most number of meals", "recipe for the most number of meal"]}, "recipe whose posting date is larger than 2004 or 2010": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.15) (name en.recipe.19) (name en.recipe.20) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.40) (name en.recipe.44) (name en.recipe.47) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.7) (name en.recipe.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "paraphrases": ["a recipe that posted after 2004 or 2010", "show me recipes posted after 2004", "find all recipes posted after 2004", "show me recipes posted after 2004 or after 2010", "what recipes posting date is greater than 2004 or 2010", "show me all the recipes posted after 2010", "find recipes posted later than 2004 or 2010", "which recipes were posted after 2004 or 2010"]}, "recipe that is for lunch or dinner": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.meal.lunch en.meal.dinner)))", "paraphrases": ["show recipes for lunch or dinner", "which recipes are intended for lunch or dinner", "what is a recipe that is good for lunch or dinner", "what recipe can be used for a lunch or dinner meal", "show me recipes for lunch or supper", "find a recipe that is good for lunch or dinner", "which recipes are for lunch or dinner", "name a recipe for lunch or dinner", "list the recipes for lunch or dinner"]}, "recipe whose posting date is posting date of rice pudding": {"denotation": "(list (name en.recipe.51) (name en.recipe.57) (name en.recipe.59) (name en.recipe.9) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string posting_date))))", "paraphrases": ["show recipes posted on the same date as rice pudding", "recipe with posting date same as rice pudding", "recipe posted on the same date of posting of rice pudding", "show me recipes posted on the same day as rice pudding", "what recipes posting date is the same as rice pudding", "what recipe was posted the same date as the rice pudding recipe", "which recipes were posted at the same time as rice pudding", "what recipe was posted the same day as rice pudding", "which recipe was posted on the same date as that of rice pudding"]}, "recipe that is for lunch and whose posting date is 2004": {"denotation": "(list (name en.recipe.9) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch) (string posting_date) (string =) (date 2004 -1 -1)))", "paraphrases": ["show me recipes for lunch posted in 2004", "a lunch recipe posted in 2004", "what recipe posted in 2004 can make a lunch meal", "which recipes were posted in 2004 for lunch", "find a lunch recipe that was posted in 2004", "what lunch recipes posting date is 2004", "lunch recipes posted in 2004"]}, "recipe that has the smallest cooking time": {"denotation": "(list (name en.recipe.17) (name en.recipe.43))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time))))", "paraphrases": ["what recipe has the smallest cooking time", "which recipe requires the least cooking time", "what recipe takes the shortest time to cook", "show me the recipe that takes the least time to prepare", "what recipe is fastest cooked", "what recipe requires the lowest cooking time", "what recipe has the shortest cooking time", "show me recipes with the least cooking time", "show me the recipe that has the shortest cooking time", "which recipe needs the shortest cooking time"]}, "meal that recipe whose posting date is 2004 is for": {"denotation": "(list (name en.meal.dinner) (name en.meal.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1))))", "paraphrases": ["what is the meal of a recipe posted in 2004", "which meals are recipes posted in 2004 for", "find a meal recipe posted in 2004", "show me recipes that were posted later than 2004", "for which meal is that recipe with post date in 2004", "what meal can be made by the recipe posted in 2004", "what is a meal with a recipe posted in 2004", "what recipes posting date is in 2004", "what meal is the recipe posted in 2004"]}, "recipe that requires at most two ingredient": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))", "paraphrases": ["recipe requires less than three ingredients", "which recipes require at most two ingredients", "what recipe calls for two or less ingredients", "what recipes require no more than two ingredients", "what are the recipe that at most use two ingredients ", "find recipes that need two ingredients", "show me recipes that use two ingredients or less", "what recipes require one or two ingredients", "show me recipes requiring two or fewer ingredients"]}, "recipe that is for more than two meal": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))", "paraphrases": ["which recipes serve more than two meals", "find recipes that can be used for  more than two meals", "recipe for more than two meals", "what recipe is for more than two meals", "show recipes that could be used in any meal", "what recipe is designed for more than two meals", "what recipes are for for two or more meals", "show me recipes for more than two meals", "what is a recipe that is for more than two different meals"]}, "recipe that has the largest posting date": {"denotation": "(list (name en.recipe.19) (name en.recipe.3) (name en.recipe.36) (name en.recipe.44) (name en.recipe.47) (name en.recipe.54) (name en.recipe.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date))))", "paraphrases": ["which recipe was posted most recently", "which recipe was posted the latest", "which is the recipe that was posted last", "what is the newest recipe", "what recipe was posted last", "which is the last posted recipe", "what recipe has the latest date posted", "recipe with largest posting date", "which is the latest recipe posted", "what recipe is most recent"]}, "meal that rice pudding not is for": {"denotation": "(list (name en.meal.dinner))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string !=) en.recipe.rice_pudding))", "paraphrases": ["find a meal without rice pudding", "meal than rice pudding is not taken", "what meal doesnt call for rice pudding", "what meals does rice pudding not go with", "which meals is rice pudding not intended for", "what is a meal other than rice pudding", "what meal is rice pudding not used for", "in which meal rice pudding cannot be used as part "]}, "meal that recipe that requires milk is for": {"denotation": "(list (name en.meal.dinner) (name en.meal.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk)))", "paraphrases": ["show me meals requiring milk", "for which meal is that recipe that has milk as one of its ingredients", "meal with milk recipe", "what meal has a recipe requiring milk", "what meal is a recipe that requires milk for", "what is a recipe requiring milk", "what meals have recipes that use milk", "which meal recipe requires milk for preparation"]}, "recipe whose preparation time is cooking time of rice pudding": {"denotation": "(list (name en.recipe.24) (name en.recipe.28) (name en.recipe.32) (name en.recipe.54))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string preparation_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time))))", "paraphrases": ["show recipes with the preparation time as the cooking time of rice pudding", "what recipes preparation time is the same as rice puddings cooking time", "which recipes prep time is the same as the cook time of rice pudding", "recipes prepared in rice puddings cooking time", "show me recipes with a preparation time equal to the cooking time of rice pudding", "which recipe has the same cooking time of rice pudding", "show me recipes that take the same amount of time to prepare as rice pudding does to cook", "show me recipe which take as much time as rice pudding", "what recipe can be prepped in the same time as rice pudding can be cooked", "which recipes have a preparation time as long as the cooking time of rice pudding"]}, "cooking time of rice pudding": {"denotation": "(list (number 18 en.minute))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))", "paraphrases": ["what is the cooking time for rice pudding", "how long does rice pudding take to cook", "what is the cook time for rice pudding", "show me cooking time of rice pudding", "how much time it takes to cook rice pudding ", "how long does it take to  make rice pudding", "what is the cooking time of rice pudding"]}, "number of ingredient": {"denotation": "(list (number 2 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))", "paraphrases": ["how many total ingredients are used in all the recipes", "what is the number of ingredients for that recipe", "how many ingredients are there", "how many ingredients are needed", "how many ingredients are used", "how many ingredients does that require", "what is the number of ingredients in total", "how many ingredients are in this recipe", "how many ingredients"]}, "milk or spinach": {"denotation": "(list (name en.ingredient.milk) (name en.ingredient.spinach))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.ingredient.milk en.ingredient.spinach))", "paraphrases": ["spinach or milk", "which recipe requires milk or spinach", "what recipes need milk or spinach", "what is the used milk or spinach", "what is a recipe using milk or spinach as an ingredient"]}, "recipe that not is for lunch": {"denotation": "(list (name en.recipe.11) (name en.recipe.14) (name en.recipe.15) (name en.recipe.18) (name en.recipe.2) (name en.recipe.20) (name en.recipe.22) (name en.recipe.25) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.30) (name en.recipe.31) (name en.recipe.35) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.41) (name en.recipe.43) (name en.recipe.46) (name en.recipe.47) (name en.recipe.49) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.57) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string !=) en.meal.lunch))", "paraphrases": ["which recipes are not for lunch", "what recipe is not lunch", "which are non lunch recipes", "show me recipes that are not lunch recipes", "show me recipes not for lunch", "show me recipes that cannot be taken for lunch", "find a recipe that is not suitable for lunch", "what recipe makes a non lunch meal", "a recipe for a meal other than lunch"]}, "recipe whose preparation time is smaller than preparation time of rice pudding": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.16) (name en.recipe.18) (name en.recipe.19) (name en.recipe.20) (name en.recipe.22) (name en.recipe.26) (name en.recipe.27) (name en.recipe.31) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.38) (name en.recipe.41) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.5) (name en.recipe.52) (name en.recipe.55) (name en.recipe.7) (name en.recipe.8) (name en.recipe.quiche))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))", "paraphrases": ["find recipes that can be prepared sooner than rice pudding", "show recipes that requires lesser preparation than rice pudding", "what recipe takes less time to prep than rice pudding", "which recipe has a lesser preparation time than that of rice pudding", "what recipes  are prepared in less time tan rice pudding", "which recipes take less time to prepare than rice pudding", "show me recipes that have a shorter preparation time than rice pudding", "what recipe requires less prep time than rice pudding", "show me recipes with preparation time less than rice pudding"]}, "recipe whose posting date is smaller than 2004": {"denotation": "(list (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.2) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.31) (name en.recipe.38) (name en.recipe.4) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.45) (name en.recipe.46) (name en.recipe.49) (name en.recipe.53) (name en.recipe.58) (name en.recipe.6) (name en.recipe.quiche))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "paraphrases": ["what recipe was posted before 2004", "a recipe which posted before 2004", "find recipes posted before 2004", "which recipes were posted before 2004", "recipes posted before 2004", "what recipes were posted before 2004"]}, "ingredient that more than two recipe requires": {"denotation": "(list (name en.ingredient.milk) (name en.ingredient.spinach))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["what is an ingredient used in more than two recipes", "which food item is needed in  two recipes or more", "what ingredient is needed for more than two recipes", "name ingredients that is required in  three or more recipes", "which ingredients are used in more than two recipes", "name an ingredient required in more than two recipes", "show me ingredients required by more than two recipes", "what ingredient is in than two recipes", "what ingredient is in over two recipes"]}, "recipe that has the smallest posting date": {"denotation": "(list (name en.recipe.14) (name en.recipe.31) (name en.recipe.38) (name en.recipe.43) (name en.recipe.45) (name en.recipe.58) (name en.recipe.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date))))", "paraphrases": ["what recipe is the oldest", "which recipe was posted the earliest", "show the first recipe posted", "what recipe has the least posting date", "show me the oldest recipe", "which recipe was posted first", "recipe that first posted", "what recipe was posted the earliest"]}, "recipe whose cooking time is at least cooking time of rice pudding": {"denotation": "(list (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.21) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.40) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.47) (name en.recipe.49) (name en.recipe.51) (name en.recipe.57) (name en.recipe.59) (name en.recipe.6) (name en.recipe.9) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))", "paraphrases": ["what recipes cooking time is at lowest that of rice pudding", "name the recipe with a cooking time with at least the cooking time of rice pudding", "what recipe cooks in less time than rice pudding", "show me recipes with cooking time equal to or greater than cooking time for rice pudding", "what recipe takes equal or more time to cook than rice pudding", "which recipe has less cooking time like rice pudding", "what recipes require the same time or than rice pudding", "show me recipes that take the same amount of time or more to cook as rice pudding", "a recipe which takes at least as long to cook as rice pudding"]}, "number of meal": {"denotation": "(list (number 2 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))", "paraphrases": ["how many meals does this make", "how many meals are there", "how many meals do we have everyday", "show me total number of meals", "how many total meals are there"]}, "ingredient that rice pudding or quiche requires": {"denotation": "(list (name en.ingredient.milk) (name en.ingredient.spinach))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.recipe.rice_pudding en.recipe.quiche)))", "paraphrases": ["what is an ingredient found in a recipe for rice pudding or quiche", "ingredient in rice pudding and quiche", "what are the ingredients of rice pudding or quiche", "what ingredient is required in either rice pudding or quiche", "which ingredient is needed by rice pudding or quiche", "what ingredients are used in rice pudding or quiche", "what ingredients does rice pudding or quiche need", "show me ingredients for rice pudding or quiche", "what ingredients does quiche or rice pudding require", "show me ingredients needed for rice pudding and quiche"]}, "meal that the most number of recipe is for": {"denotation": "(list (name en.meal.dinner) (name en.meal.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["show me meals with the most recipes", "for what meal can maximum recipes be found", "what meal most recipes made for", "what is a meal with the most number of recipes", "what meal has the most recipes for it", "what meal has the most number of recipes", "which meal has the most recipes for it", "which meal has the most number of recipes"]}, "meal that rice pudding is for and that rice pudding is for": {"denotation": "(list (name en.meal.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) en.recipe.rice_pudding) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) en.recipe.rice_pudding))", "paraphrases": ["what is a meal that incorporates rice pudding", "for what meal is rice pudding used", "for what meal is rice pudding", "what is the meal that rice pudding goes with", "for which meal is the dish rice pudding used"]}, "recipe that requires milk and whose posting date is 2004": {"denotation": "(list (name en.recipe.51) (name en.recipe.57) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk) (string posting_date) (string =) (date 2004 -1 -1)))", "paraphrases": ["which recipes posted in 2004 require milk", "show recipes posted in 2004 and has milk as one of its ingredients", "what recipe posted in 2004 calls for milk", "recipes posted in 2004 that require milk", "show me recipes that need milk and were posted in 2004", "which recipe posted in 2004 needs milk for preparation", "what recipes posting date is in 2004 and requires milk", "what recipes posted in 2004 require milk", "show me recipe requiring milk posted in 2004", "what recipes need milk and is posted in 2004"]}, "recipe that has less than two cuisine": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cuisine) (string <) (number 2)))", "paraphrases": ["what recipe has less than two cuisines", "what recipe can make fewer than two types of cuisine", "what recipe has one cuisine", "which recipe is found in only one cuisine", "show me recipes with fewer than two cuisines", "what is a recipe from fewer than two cuisines", "which recipes have less than two cuisines", "recipe of one cuisine", "show me recipes that fall under at least two cuisines", "which recipe follows one cuisine"]}, "recipe whose posting date is smaller than posting date of rice pudding": {"denotation": "(list (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.2) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.31) (name en.recipe.38) (name en.recipe.4) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.45) (name en.recipe.46) (name en.recipe.49) (name en.recipe.53) (name en.recipe.58) (name en.recipe.6) (name en.recipe.quiche))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string posting_date)))))", "paraphrases": ["show me recipes posted before rice pudding", "show me recipes posted before any posting for rice pudding", "recipes posted before rice pudding", "what recipe was posted before rice pudding", "show recipes posted before rice pudding", "what recipe was posted before rice puddings recipe", "find recipes that were posted before the recipe for rice pudding", "what recipes posting date is lesser than that of rice pudding", "which recipes were posted before rice pudding"]}, "meal that more than two recipe is for": {"denotation": "(list (name en.meal.dinner) (name en.meal.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["what is a meal for which you can find more than two recipes", "show me a meal that has more than two recipes", "which meal had two recipes or more", "what meal has more than two recipes for it", "for what meals share two or more recipes", "show me meals with more than two recipes", "what meal has over two recipes", "meal with more than two recipes", "what meal has more than two recipes"]}, "recipe that requires at least two ingredient": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))", "paraphrases": ["which recipe needs a minimum of two ingredients", "which recipes require at least two ingredients", "what recipe requires two or more ingredients", "what recipes require at leas two ingredients", "a recipe that uses two or more ingredients", "which recipe requires at least two ingredients", "find me the recipes need more than one ingredients", "what recipe requires at the least two ingredients", "show me recipes that required two or more ingredients", "show me recipes that involve two or more ingredients"]}, "recipe whose cooking time is smaller than preparation time of rice pudding": {"denotation": "(list (name en.recipe.10) (name en.recipe.12) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.20) (name en.recipe.22) (name en.recipe.31) (name en.recipe.32) (name en.recipe.4) (name en.recipe.43) (name en.recipe.46) (name en.recipe.48) (name en.recipe.5) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.8) (name en.recipe.quiche))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))", "paraphrases": ["show me recipes that take less time to prepare than rice pudding", "recipe cooked in less time than rice pudding preparation", "which recipe requires less cooking time than rice pudding preparation", "show me recipes that take less time to cook than it takes to prepare rice pudding", "what recipe takes less time to cook than rice pudding does to prepare", "what recipe cooks for less time than rice pudding takes to prep", "show me recipes that require lesser cooking time than rice pudding", "what recipes cooking time is lower than the preparation time of rice pudding", "which recipes take less time to cook than to prepare rice pudding", "show me recipes with cooking time less than the preparation time for rice pudding"]}, "recipe that has the most number of cuisine": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string max) (string cuisine)))", "paraphrases": ["what recipe has the most cuisine", "recipe with most cuisine", "what is a recipe with the most ingredients", "which recipe is found in many cuisines", "which recipe falls under the most kinds of cuisine", "show recipes with the maximum number of cuisines", "show me recipes for the most cuisines", "what recipe is used in the greatest number of cuisines", "which recipe has the most number of cuisine", "what recipe has the most types of cuisine"]}, "ingredient that the least number of recipe requires": {"denotation": "(list (name en.ingredient.milk))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["which ingredient is needed in the least number of recipes", "what ingredient is required by the least recipes", "what ingredient is used by the least number of recipes", "ingredient required by least number of recipes", "what ingrediant is used in the fewest recipes", "what ingredient is there in less recipes", "what recipe requires the least ingredients", "what is an ingredient found in the fewest recipes", "what ingredient is used for the least amount of recipes", "what ingredients are used least in recipes"]}, "recipe that is for lunch and that requires milk": {"denotation": "(list (name en.recipe.10) (name en.recipe.12) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.34) (name en.recipe.45) (name en.recipe.5) (name en.recipe.50) (name en.recipe.56) (name en.recipe.58) (name en.recipe.8) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch) (string requires) (string =) en.ingredient.milk))", "paraphrases": ["tell recipes with milk for lunch", "show me lunch recipes that require milk", "name the recipe used for lunch prepared with milk", "what recipe requiring milk makes a lunch meal", "what lunch recipe uses milk as an ingredient", "which lunch recipe requires milk for its preparation", "what recipes require milk and are for lunch", "list the lunch recipes contains milk"]}, "number of recipe": {"denotation": "(list (number 60 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["what is the number of recipes", "how many recipes are there", "how many recipes", "how many total recipes are listed", "show me the total number of recipes", "what is the total number of recipes", "how many total recipes are there"]}, "recipe that requires more than two ingredient": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))", "paraphrases": ["what recipe calls for over two ingredients", "show me recipes that call for more than two ingredients", "what recipes need three or more ingredients", "how many recipes use more than two ingredients", "this receipe requires more than two ingredient", "which recipe needs more than two ingredients", "show me recipes that need at least three ingrediants", "which recipes require more than two ingredients", "what recipe requires three or more ingredients"]}, "recipe whose posting date is at least 2004 or 2010": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.15) (name en.recipe.19) (name en.recipe.20) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.40) (name en.recipe.44) (name en.recipe.47) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.59) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "paraphrases": ["show me recipes posted after 2004", "recipes posted after 2003", "show me recipes posted in or after 2004 or in or after 2010", "a recipe which posted no sooner than 2004 or 2010", "show me recipes with posting dates from 2004 or later", "what are the recipes posted in2004 or 2010"]}, "recipe that not requires milk": {"denotation": "(list (name en.recipe.13) (name en.recipe.15) (name en.recipe.18) (name en.recipe.2) (name en.recipe.20) (name en.recipe.25) (name en.recipe.27) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.52) (name en.recipe.53) (name en.recipe.55) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.9) (name en.recipe.quiche))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string !=) en.ingredient.milk))", "paraphrases": ["what recipe does not need milk", "show me recipes without milk", "what recipe doesnt require milk", "show me milkfree recipes", "recipes without milk", "which recipes dont need milk", "show recipes that does not have milk as one of its ingredients", "what is a recipe that does not use milk as an ingredient", "which recipe does not need milk", "what recipes dont call for milk"]}, "ingredient that at most two recipe requires": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["what recipes are required by two recipes or less", "what is an ingredient found in no more than two recipes", "what ingredient is in two or less recipes", "tell me recipethat at most require two ingredients", "name ingredients used only in one or two recipes", "show me ingredients required for two recipes at most", "ingredients required in less than three recipes", "which ingredient is used for at most two recipes"]}, "cuisine of rice pudding": {"denotation": "(list (name en.cuisine.chinese))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cuisine)))", "paraphrases": ["what cuisine is rice pudding", "what kind of cuisine is rice pudding", "what is a cuisine of rice pudding", "what type of cuisine is rice pudding", "to which cuisine does rice pudding belong", "what is the cuisine of rice pudding", "a recipe for rice pudding", "what is cuisine for rice pudding"]}, "recipe whose posting date is 2004 and that requires milk": {"denotation": "(list (name en.recipe.51) (name en.recipe.57) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string requires) (string =) en.ingredient.milk))", "paraphrases": ["show me recipes posted in 2004 that use milk", "what recipe calling for milk was posted in 2004", "a recipe with milk posted in 2004", "what recipe was posted in 2004 and needs milk", "which recipe  that uses milk for its preparation was posted in 2004", "show me recipes posted in 2004 requiring milk", "show recipes with milk as an ingredient and is posted in 2004", "what recipe posted in 2004 requires milk as an ingredient", "which recipe posted in 2004 requires milk", "what recipes posting date is 2004 and requires milk"]}, "recipe that has the smallest preparation time": {"denotation": "(list (name en.recipe.10) (name en.recipe.22) (name en.recipe.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time))))", "paraphrases": ["what recipe has the least prep time", "which recipe takes the least amount of time to prepare", "what recipe is fastest prepared ", "which recipe has the least amount of prep time", "recipe that with smallest preparation time", "which recipe can be prepared at the earliest", "show the recipes with smallest preparation time", "what recipe has the smallest preparation time", "which recipe has the least preparation time", "which recipe has the shortest preparation time"]}, "ingredient that rice pudding not requires": {"denotation": "(list (name en.ingredient.spinach))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string !=) en.recipe.rice_pudding))", "paraphrases": ["show me ingredients not required for rice pudding", "which food item is not needed in rice pudding", "what ingredients are not in the rice pudding recipe", "ingredients not required to prepare rice pudding", "what ingredient is not required to make rice pudding", "name the ingredient not required in rice pudding", "what ingredients does rice pudding not need", "name ingredients that is not required for rice pudding", "what is an ingredient not found in rice pudding"]}, "recipe whose cooking time is cooking time of rice pudding": {"denotation": "(list (name en.recipe.2) (name en.recipe.36) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cooking_time) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time))))", "paraphrases": ["what recipes cooking time is the same as rice pudding", "what recipe has the same cooking time as rice pudding", "what recipes have the same cooking time as rice pudding", "what is a recipe whose cooking time is the same as rice pudding", "show me recipes that require the cooking time of rice pudding", "show me recipes with cooking time equal to rice pudding", "what recipes are cooked in same time as rice pudding", "show me recipes with cooking times equal to cooking time of rice pudding"]}, "recipe that requires milk or spinach": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.ingredient.milk en.ingredient.spinach)))", "paraphrases": ["which recipes require milk or spinach", "show me recipes that require milk or spinach", "what recipe needs spinach or milk for its preparation", "show me recipes requiring milk or spinach", "find me all recipes requires milk or spinach", "what recipe requires milk or spinach", "what recipe calls for either milk or spinach", "what recipe uses milk or spinach as an ingredient"]}, "recipe whose posting date is at least 2004": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.15) (name en.recipe.19) (name en.recipe.20) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.40) (name en.recipe.44) (name en.recipe.47) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.59) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "paraphrases": ["show me a recipe that has a posting date of at least 2004", "what recipes posting date is at least in 2004", "recipes posted in 2004 and later", "show me recipes posted in 2004 or later", "a recipe which posted in 2004 or later", "which recipes were posted by 2004", "find a recipe that was posted  by 2004", "show me recipes posted no earlier than 2004"]}, "recipe whose posting date is 2004 or 2010": {"denotation": "(list (name en.recipe.51) (name en.recipe.57) (name en.recipe.59) (name en.recipe.9) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))", "paraphrases": ["find recipes posted in 2004 or 2010", "show me recipes posted during 2004 and 2010", "show me recipes posted in 2004 or in 2010", "a recipe which posted either in 2004 or 2010", "what recipe was posted in either 2004 or 2010", "what recipes posting date is in 2004 or 2010", "show me recipes posted in 2004 and 2010"]}, "recipe that requires two ingredient": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type))))", "paraphrases": ["which recipe requires two ingredients", "find recipes that are made with two ingredients", "show me recipes that require two ingredients", "what recipe requires two ingredients", "recipe need two ingredients", "what recipe calls for two ingredients", "which recipes need two ingredients", "show me a recipe that requires only two ingredients", "recipes with just two ingredients", "show me recipes with two ingredients"]}, "meal that two recipe is for": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["find a meal with two recipes", "what meals have two recipes", "show me meals with two recipes", "which meal has two recipes designated for it", "what meal can be made by two recipes", "show me two recipes for a meal"]}, "recipe whose posting date is 2004": {"denotation": "(list (name en.recipe.51) (name en.recipe.57) (name en.recipe.59) (name en.recipe.9) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)))", "paraphrases": ["find recipes posted in 2005", "recipe posted in 2004", "which recipe has its posting date as 2004", "show me recipes posted in 2004", "recipe with posting date 2004", "what recipe was posted during 2004", "a recipe which posted after 2004", "what recipe was posted in 2004"]}, "recipe whose preparation time is at least preparation time of rice pudding": {"denotation": "(list (name en.recipe.12) (name en.recipe.14) (name en.recipe.15) (name en.recipe.17) (name en.recipe.2) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.35) (name en.recipe.37) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.43) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.50) (name en.recipe.51) (name en.recipe.53) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.9) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))", "paraphrases": ["show recipes that take at least the preparation time of rice pudding to be done", "what recipe can you prep in the same or longer amount of time as rice pudding", "which recipe is prepared using the same amount of time as that of rice pudding", "what recipe takes at least as long to prepare as rice pudding", "what recipe is prepared in preparation time of rice pudding or earlier", "what recipes have the same or longer preparation time as rice pudding", "what is a recipe that takes at least as long to make as rice pudding", "show me recipes with a preparation time equal to or greater than rice pudding", "what recipes preparation time is at least that of rice pudding"]}, "recipe that is for lunch": {"denotation": "(list (name en.recipe.10) (name en.recipe.12) (name en.recipe.13) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.3) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.4) (name en.recipe.40) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.55) (name en.recipe.56) (name en.recipe.58) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch))", "paraphrases": ["what recipe is not for a lunch meal", "recipe for lunch", "find some lunch recipes", "a recipe for a lunch meal"]}, "ingredient that two recipe requires": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["name an ingredient required by two different recipes", "show me ingredients that two recipes require", "what ingredient is used by two recipes", "what two ingredients does that recipe require", "which is the food item that is needed in two recipes", "ingredient of two recipes", "what ingredient is called for in two recipes", "what ingredients are required in two recipes", "what recipes share ingredients", "name ingredients used in more than one recipe"]}, "recipe whose preparation time is larger than preparation time of rice pudding": {"denotation": "(list (name en.recipe.12) (name en.recipe.15) (name en.recipe.17) (name en.recipe.2) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.35) (name en.recipe.37) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.43) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.50) (name en.recipe.51) (name en.recipe.53) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))", "paraphrases": ["what recipe takes longer to prep than rice pudding", "which recipe needs more time than rice pudding preparation", "what recipe requires more prep time than rice pudding", "which recipe takes longer to prepare rice pudding", "recipes with more preparation time than rice pudding", "recipes that require greater time to prepare than rice pudding", "what recipes preparation time is greater than that of rice pudding", "show me recipes with a preparation time greater than rice pudding", "show me recipes that take longer to cook than rice pudding", "show me recipes with longer preparation times than rice pudding"]}, "recipe that requires milk": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.28) (name en.recipe.31) (name en.recipe.34) (name en.recipe.35) (name en.recipe.38) (name en.recipe.45) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.54) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.8) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk))", "paraphrases": ["show me recipes that require milk", "show me recipes that has milk as one of its ingredients", "what recipes need milk", "find me all recipes that require milk", "what are the recipes that are made with milk", "which recipe uses milk as an ingredient", "recipe that needs milk"]}, "recipe whose preparation time is at most cooking time of rice pudding": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.16) (name en.recipe.18) (name en.recipe.19) (name en.recipe.20) (name en.recipe.22) (name en.recipe.24) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.38) (name en.recipe.41) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))", "paraphrases": ["show me recipes whose preparation time is a most the cooking time of rice pudding", "which recipe  s cooking time is equal to that of rice pudding", "what recipes takes as long to cook as rice pudding", "preparation time of recipe  not more than that of rice pudding", "show me recipes with preparation time equal to or less than cooking time for rice pudding", "name a recipe with a prep time no longer than the cook time for rice pudding", "recipes prepare in same or less time for cooking rice pudding", "show recipes that requires at most the preparation time of rice pudding", "what recipes preparation time is no more than the cooking time of rice pudding", "what recipe can you prepare in the same or less time than it takes to cook rice pudding"]}, "recipe that is for at least two meal": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))", "paraphrases": ["show me recipes for at least two meals", "which recipe can be used for two or more meals", "what recipe is for two meals", "show me recipes good for at least two meals", "which recipes make at least 2 meals", "what recipe can be used for at least two meals", "recipe for at least two meal", "recipe for three or more meals", "what recipe can make two or more meals"]}, "recipe whose posting date is larger than posting date of rice pudding": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.15) (name en.recipe.19) (name en.recipe.20) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.39) (name en.recipe.40) (name en.recipe.44) (name en.recipe.47) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.7) (name en.recipe.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string posting_date)))))", "paraphrases": ["which recipe is posted after the posting date of rice pudding", "what recipe was posted after the date  rice pudding", "what recipe was posted later than rice pudding", "recipe whose posting date is after that of rice pudding", "what recipes were posted after rice pudding", "recipes posted after posting rice pudding recipe", "what recipes posting date is greater than that of rice pudding", "what recipe was posted after rice puddings recipe"]}, "recipe whose posting date is at most posting date of rice pudding": {"denotation": "(list (name en.recipe.12) (name en.recipe.14) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.2) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.31) (name en.recipe.38) (name en.recipe.4) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.45) (name en.recipe.46) (name en.recipe.49) (name en.recipe.51) (name en.recipe.53) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string posting_date)))))", "paraphrases": ["what recipes were posted at or before rice pudding", "recipe with posting date not after posting date of rice pudding", "show me recipes posted the same day as rice pudding or before", "show me recipes posted at the same date as rice pudding", "what recipes posting date is no greater than that of rice pudding", "recipes posted till rice pudding is posted", "what recipe was posted before or on the same day as rice pudding", "which recipe was posted at the posting date of rice pudding", "show me recipes that posted no later than the rice pudding recipe", "what recipe was posted no later than the rice pudding recipe"]}, "recipe that is for at most two meal": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type))))", "paraphrases": ["what recipe is for two", "recipes for less than three meals", "which recipes are for two meals at most", "show me recipes that could be used for one or two meals", "show me recipes for two meals at most", "what recipe is for no more than two meals", "find recipe for two meals", "show me recipes for meals for two", "show me recipes designed for two meals or less", "what recipe is for two or fewer meals"]}, "recipe that has more than two cuisine": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cuisine) (string >) (number 2)))", "paraphrases": ["which recipes has more than two cuisines", "which recipe belongs to more than two cuisines", "show recipes that follow more than two cuisines", "show me recipes for more than two cuisines", "which recipes fall under more than two cuisines", "what recipe has over two types of cuisine", "what recipe has no greater than two cuisines", "which recipes have three or more cuisine", "what is a recipe from more than two cuisines", "recipe having more than two cuisine"]}, "meal that at least two recipe is for": {"denotation": "(list (name en.meal.dinner) (name en.meal.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["which meal has two or more recipes", "show me meals with at least two recipes", "what meal has two or more recipes", "what meals have at least two recipes", "what recipe is for a meal for two", "what meal has at least two recipes for it", "what meal can you find at least two recipes for"]}, "ingredient that rice pudding requires and that rice pudding requires": {"denotation": "(list (name en.ingredient.milk))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) en.recipe.rice_pudding) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) en.recipe.rice_pudding))", "paraphrases": ["ingredients in rice pudding", "tell me ingredients of rice pudding", "what ingredients go in rice pudding", "what ingredients are in rice pudding", "what are ingredients in rice pudding", "what ingredients does rice pudding need"]}, "preparation time of rice pudding": {"denotation": "(list (number 15 en.minute))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))", "paraphrases": ["how long does rice pudding take to prep", "show me preparation time for rice pudding", "what is the preparation time of rice pudding", "how long does it take to prepare rice pudding", "how much time it takes to prepare rice pudding", "what is the preparation of rice pudding", "how long does rice pudding take to prepare", "what is the prep time for rice pudding"]}, "meal that less than two recipe is for": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["show me meal with less than two recipe", "what meal has fewer than two recipes to make it", "show me meals with fewer than two recipes", "for what meals require less than two recipes", "what meal is for only one recipe", "which meal has less than two recipes", "what meal has less than two recipes for it", "what is a meal for which there are fewer than two recipes"]}, "recipe whose preparation time is smaller than cooking time of rice pudding": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.16) (name en.recipe.18) (name en.recipe.19) (name en.recipe.20) (name en.recipe.22) (name en.recipe.26) (name en.recipe.27) (name en.recipe.31) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.38) (name en.recipe.41) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.52) (name en.recipe.55) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string preparation_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))", "paraphrases": ["show me recipes that whose preparation time is shorter than rice puddings cooking time", "which recipes take less time to prepare than to cook rice pudding", "show me recipes that have a preparation time less than the cooking time of rice pudding", "recipes that require lesser time to prepare than rice pudding", "what recipes can be prepared faster than rice pudding", "which recipe needs less time to cook than rice pudding", "what is a recipe with a prep time less than the cooking time of rice pudding", "what recipe can be prepped in less time than rice pudding can be cooked", "what recipes preparation time is lesser than the cooking time of rice pudding", "show me recipes with preparation time less than cooking time for rice pudding"]}, "recipe whose posting date is at most 2004 or 2010": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "paraphrases": ["what recipe was posted during or before 2010", "show me recipes posted before 2010", "which recipes were posted up to 2004 or 2010", "show me recipes posted in or before 2004 or in or before 2010", "which recipe was posted in 2004 or 2010", "what recipe was posted no later than 2004 or 2010", "what recipes posting date is at most 2004 or 2010"]}, "recipe whose cooking time is larger than preparation time of rice pudding": {"denotation": "(list (name en.recipe.11) (name en.recipe.13) (name en.recipe.14) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.47) (name en.recipe.49) (name en.recipe.51) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.9) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string preparation_time)))))", "paraphrases": ["which recipes take longer to cook than to prepare rice pudding", "what recipe takes longer to cook than rice pudding takes to prep", "a recipe which takes longer to cook than the preparation time for rice pudding", "find a recipe which has a longer cooking time than rice pudding", "which recipes take longer to cook than rice pudding does to prepare", "show me recipes with cooking time greater than preparation time for rice pudding", "what recipes take more time to prepare than rice pudding", "which recipe has a larger cooking time than the preparation time needed for rice pudding", "what recipes cooking time is longer than that of rice pudding", "what recipe takes more time to prepare than rice pudding"]}, "recipe whose posting date is smaller than 2004 or 2010": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "paraphrases": ["show me recipes posted before 2004 or before 2010", "which recipe has a posting date smaller than 2004 or 2010", "what recipe posted before 2004 or 2010", "which recipes were posted before 2004 or 2010", "find recipes that were posted before 2004 or 2010", "what recipe was posted before 2010", "show recipes posted on dates between 2004 and 2010", "show me recipes with posting date before 2010"]}, "lunch or dinner": {"denotation": "(list (name en.meal.dinner) (name en.meal.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.meal.lunch en.meal.dinner))", "paraphrases": ["is the recipe for lunch or dinner", "recipes for lunch or dinner menus", "either lunch or dinner", "show me recipes for lunch or dinner"]}, "recipe that requires milk and that is for lunch": {"denotation": "(list (name en.recipe.10) (name en.recipe.12) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.34) (name en.recipe.45) (name en.recipe.5) (name en.recipe.50) (name en.recipe.56) (name en.recipe.58) (name en.recipe.8) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk) (string meal) (string =) en.meal.lunch))", "paraphrases": ["show me lunch recipes that need milk", "which recipe has milk as its ingredient for lunch", "what lunch recipe requires milk", "what lunch recipes contain milk", "show me lunch recipes that use milk", "what recipe calling for milk makes something for lunch", "what recipe needs milk and is for lunch", "find a lunch recipe that is prepared with milk"]}, "ingredient that at least two recipe requires": {"denotation": "(list (name en.ingredient.milk) (name en.ingredient.spinach))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type))))", "paraphrases": ["show me ingredients required by at least two recipes", "what ingredients are used by at least two recipes", "an ingredient required by at least two recipes", "what ingredients does both recipes share", "which ingredient is needed in more than one recipes", "which recipes require two or more ingredients", "name the ingredient required by at least two recipes", "what ingredient is required in two or more recipes", "what recipes share at least two ingredients"]}, "recipe that is for meal that rice pudding is for": {"denotation": "(list (name en.recipe.10) (name en.recipe.12) (name en.recipe.13) (name en.recipe.16) (name en.recipe.17) (name en.recipe.19) (name en.recipe.21) (name en.recipe.23) (name en.recipe.24) (name en.recipe.26) (name en.recipe.3) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.36) (name en.recipe.4) (name en.recipe.40) (name en.recipe.42) (name en.recipe.44) (name en.recipe.45) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.55) (name en.recipe.56) (name en.recipe.58) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string meal) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.meal) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meal)) (string =) en.recipe.rice_pudding)))", "paraphrases": ["what meal is the rice pudding recipe", "show me recipes for rice pudding meals", "recipe for meal same as rice pudding", "show recipes for the meal as the same for rice pudding", "what meal is the recipe rice pudding for", "what recipes are for the same meal as rice pudding", "show me meal recipes including rice pudding", "what is a recipe for a meal with rice pudding"]}, "recipe whose cooking time is smaller than cooking time of rice pudding": {"denotation": "(list (name en.recipe.10) (name en.recipe.12) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.20) (name en.recipe.22) (name en.recipe.23) (name en.recipe.28) (name en.recipe.31) (name en.recipe.32) (name en.recipe.4) (name en.recipe.41) (name en.recipe.43) (name en.recipe.46) (name en.recipe.48) (name en.recipe.5) (name en.recipe.50) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.58) (name en.recipe.7) (name en.recipe.8) (name en.recipe.quiche))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string cooking_time)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.recipe.rice_pudding (string cooking_time)))))", "paraphrases": ["what recipe has a cook time less than the cook time of rice pudding", "what recipe is cooked faster than rice pudding", "which recipes take less time to cook than rice pudding", "which recipe takes less time to prepare than rice pudding", "what recipes take less time to cook than rice pudding", "show me recipes that have shorter cooking times than rice pudding", "what recipe do you cook for less time than rice pudding", "show me recipes with cooking times shorter than cooking time of rice pudding", "what recipe has a cooking time lower than that of rice pudding"]}, "recipe that has the least number of cuisine": {"denotation": "(list (name en.recipe.10) (name en.recipe.11) (name en.recipe.12) (name en.recipe.13) (name en.recipe.14) (name en.recipe.15) (name en.recipe.16) (name en.recipe.17) (name en.recipe.18) (name en.recipe.19) (name en.recipe.2) (name en.recipe.20) (name en.recipe.21) (name en.recipe.22) (name en.recipe.23) (name en.recipe.24) (name en.recipe.25) (name en.recipe.26) (name en.recipe.27) (name en.recipe.28) (name en.recipe.29) (name en.recipe.3) (name en.recipe.30) (name en.recipe.31) (name en.recipe.32) (name en.recipe.33) (name en.recipe.34) (name en.recipe.35) (name en.recipe.36) (name en.recipe.37) (name en.recipe.38) (name en.recipe.39) (name en.recipe.4) (name en.recipe.40) (name en.recipe.41) (name en.recipe.42) (name en.recipe.43) (name en.recipe.44) (name en.recipe.45) (name en.recipe.46) (name en.recipe.47) (name en.recipe.48) (name en.recipe.49) (name en.recipe.5) (name en.recipe.50) (name en.recipe.51) (name en.recipe.52) (name en.recipe.53) (name en.recipe.54) (name en.recipe.55) (name en.recipe.56) (name en.recipe.57) (name en.recipe.58) (name en.recipe.59) (name en.recipe.6) (name en.recipe.7) (name en.recipe.8) (name en.recipe.9) (name en.recipe.quiche) (name en.recipe.rice_pudding))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string min) (string cuisine)))", "paraphrases": ["show recipes with one cuisine", "show me recipes with the cuisine least represented", "what recipe makes the fewest types of cuisine", "which recipe has the least number of cuisines", "recipe in least cuisines", "which recipe falls under the least kinds of cuisine", "what is a recipe from the fewest cuisines", "which recipe belongs to less number of cuisines", "show me recipes for the fewest cuisines", "what recipe has the fewest number of cuisine"]}, "ingredient that rice pudding requires": {"denotation": "(list (name en.ingredient.milk))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.ingredient) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string requires)) (string =) en.recipe.rice_pudding))", "paraphrases": ["list  the ingredients of rice pudding", "what food items are needed to make rice pudding", "show me the ingredients for rice pudding", "what is an ingredient found in rice pudding"]}, "2004 or 2010": {"denotation": "(list (date 2004 -1 -1) (date 2010 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))", "paraphrases": ["either 2004 or 2010"]}, "average preparation time of recipe": {"denotation": "(list (number 16.182 en.minute))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string preparation_time))))", "paraphrases": ["how long is the average preparation time for the recipe", "how long does it take to prepare the recipe", "what is the average preparation time across all recipes", "what is the average preparation time for a recipe", "whats the average preparation time of a recipe", "on average how long is the prep time of the recipe", "what is the average prep time for the recipe", "what is the average preparation time of that recipe", "what is the usual time required to finish the recipe"]}, "total cooking time of recipe": {"denotation": "(list (number 425 en.minute))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.recipe) (string !type)) (string cooking_time))))", "paraphrases": ["what is the total cooking time of the recipe", "how long does this recipe take to cook", "what is the total cooking time summed across all recipes", "what is the cooking time for this recipe", "what is the cooking time of recipe", "cooking time of recipe", "how much time is needed to cook this dish", "recipes cooking time", "how long does the recipe take to cook"]}}