{"restaurant that has waiter service and that serves lunch": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.51))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string meals) (string =) en.food.lunch))", "paraphrases": ["restaurants that serve lunch and have waiter service", "what restaurant has waiter service and serves lunch", "a restaurant with waiter service for lunch", "what restaurant has lunch and waiter service"]}, "restaurant whose price rating is 2 dollar signs and whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.24) (name en.restaurant.27) (name en.restaurant.35))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["what 2 dollar signs restaurants are in the neighbor of midtown west", "restaurant whose price rating is 2 dollar signs and whose neighborhood is midtown west", "restaurants with price rating of 2 in midtown west", "restaurants with 2 dollar sign rating in midtown west", "which restaurants in midtown west have a 2dollarsigns price rating"]}, "number of cuisine": {"denotation": "(list (number 3 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type))))", "paraphrases": ["number of cuisine", "how many different kind of cuisines are there", "how many different cuisines are there to chose from"]}, "restaurant that has outdoor seating and whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["which 3 star restaurants have outdoor seating", "which 3 star restaurants have outdoor dining areas", "which threestar rated restaurant has outdoor seating", "3 star restaurants that have outdoor seating"]}, "restaurant that takes credit cards and that takes reservations": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string reserve)))", "paraphrases": ["restaurants that accept credit cards and reservations", "restaurant that takes credit cards and that takes reservations", "what restaurant can i make reservations at that takes credit cards", "what restaurant takes reservations and accepts credit cards", "restaurants that take credit cards and reservations"]}, "thai or italian": {"denotation": "(list (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.cuisine.thai en.cuisine.italian))", "paraphrases": ["italian or thai", "list all restaurants that are either thai or italian", "restaurants serving thai or italian food"]}, "meal that restaurant that has take-out serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout))))", "paraphrases": ["what is a meal served by a restaurant that has takeout service", "restaurant with takeout", "what meal can you get for take out at the restaurant", "what kind of meals does takeout restaurants serve", "restaurants that offer takeout"]}, "restaurant whose price rating is 2 dollar signs and whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.38) (name en.restaurant.50) (name en.restaurant.56) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["which restaurants have a price rating of two dollar signs", "what restaurant has a price rating of 2 dollar signs", "hotel that has a price rating of 2 dollar signs", "restaurants with 2 price rating", "restaurants with 2 dollar sign rating"]}, "neighborhood that is neighborhood of thai cafe": {"denotation": "(list (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) en.restaurant.thai_cafe))", "paraphrases": ["a neighborhood similar to thai cafes", "neighborhood that is neighborhood of thai cafe", "what neighborhood is the thai cafe in"]}, "restaurant whose cuisine is thai and whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.47) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["the restaurant that is midtown serves thai food", "which restaurants in midtown west have thai cuisine", "a thai restaurant in the midtown neighborhood", "list all thai restaurants in midtown west", "thai restaurants in the midtown west neighborhood"]}, "restaurant whose cuisine is thai and that has take-out": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.40))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string takeout)))", "paraphrases": ["what thai restaurant offers takeout", "thai restaurants with takeout", "restaurant whose cuisine is thai and that has takeout", "thai restaurants that have takeout", "thai restaurants that offer takeout"]}, "restaurant that takes credit cards and that takes credit cards": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.25) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.53) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string credit)))", "paraphrases": ["which restaurant accepts credit cards", "which restaurants take credit cards"]}, "meal that restaurant whose price rating is 2 dollar signs serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign))))", "paraphrases": ["what meal does the restaurant with a 2 dollar price rating serve", "what kind of meals do 2 dollar signs rated restaurants serve", "name a meal served in a restaurant with a price rating of two dollar signs"]}, "restaurant that has outdoor seating and that serves lunch": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string meals) (string =) en.food.lunch))", "paraphrases": ["hotel that offers lunch and has outdoor seating facilities", "restaurants that have outdoor seating and serve lunch", "which restaurants serve lunch and have an outdoor dining area", "what restaurant can you eat lunch outside at", "what restaurant is open for lunch and contains outdoor seating", "restaurant that has outdoor seating and that serves lunch"]}, "restaurant that has take-out and whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.57) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["what 3 star restaurant offers take out", "3 star restaurants that offer takeout", "the three star restaurant has takeout food", "what 3 star restaurant has takeout", "3 stars restaurant which offers takeout"]}, "restaurant that has the most number of cuisine": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string max) (string cuisine)))", "paraphrases": ["what restaurant contains the most number of cuisines", "restaurants with multiple cuisines", "restaurant that has the most number of cuisine", "which restaurant offers the most variety of cuisine", "this restaurant has the most amount of cuisines", "what restaurant has the more cuisine then any other"]}, "number of restaurant": {"denotation": "(list (number 60 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["number of restaurant", "what is the phone number of the restaurant", "what is the restaurants number", "what is the number of restaurants", "how many restaurants are there total"]}, "restaurant that is good for groups and that is good for groups": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.53) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string groups)))", "paraphrases": ["restaurants for groups", "a restaurant that is group friendly", "which restaurants are good for groups", "what restaurant is good for groups"]}, "neighborhood that is neighborhood of restaurant whose neighborhood is midtown west": {"denotation": "(list (name en.neighborhood.midtown_west))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west)))", "paraphrases": ["what restaurants are located in midtown west", "what neighborhood are the restaurants that are in midtown west", "restaurants that are in the neighborhood of midtown west"]}, "restaurant whose cuisine is thai and that has outdoor seating": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.48) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string outdoor)))", "paraphrases": ["what thai restaurant has outdoor seating", "thai restaurant that has outdoor seating facilities", "thai restaurants that have outdoor dining areas", "thai restaurants with optional outdoor seating", "restaurant whose cuisine is thai and that has outdoor seating"]}, "restaurant that serves lunch and that has outdoor seating": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string outdoor)))", "paraphrases": ["what restaurant offers lunch and an outdoor seating", "what restaurant can i eat lunch outdoors at", "restaurants with lunch and outdoor seating", "a restaurant for lunch that has outdoor seating", "restaurant with outdoor dining area that serves lunch"]}, "star rating of thai cafe": {"denotation": "(list (number 3 en.star))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string star_rating)))", "paraphrases": ["what is the star rating of thai cafe", "what is the star rating of the thai cafe", "whats the star rating of thai cafe"]}, "restaurant that is good for kids and whose cuisine is thai": {"denotation": "(list (name en.restaurant.39) (name en.restaurant.47) (name en.restaurant.48))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["thai restaurants that kids enjoy", "what good kids restaurants serve thai cuisine", "thai restaurants that are kid friendly", "restaurant that is good for kids and whose cuisine is thai"]}, "restaurant that has delivery and that has waiter service": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string waiter)))", "paraphrases": ["what restaurant delivers and has waiter service", "restaurants that deliver and have waiter service", "a delivering restaurant with waiters", "what restaurants have waiter service and delivery", "what restaurant offers delivery and waiter service"]}, "meal that restaurant whose star rating is 3 stars serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star))))", "paraphrases": ["what is a meal served at a threestar rated restaurant", "threestar restaurant meals", "what kind of meal do 3 star restaurants serve", "what meal does the 3 star restaurant serve"]}, "restaurant that is good for groups and that serves lunch": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string meals) (string =) en.food.lunch))", "paraphrases": ["restaurants that serve lunch that are good for large parties", "hotel that offers lunch and best for group dining", "what restaurant is good with groups and serves lunch", "restaurant that is good for groups and that serves lunch", "which restaurant is good for a group of people and also serves lunch", "what restaurant offers lunch and is good for groups"]}, "restaurant that has at least two cuisine": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string >=) (number 2)))", "paraphrases": ["what restaurant serves at least two cuisines", "restaurants that serves more than two cuisines", "what restaurant has more than two cuisines", "what restaurants serve at least two cuisines", "what restaurant serves multiple cuisines"]}, "restaurant that has waiter service and that has outdoor seating": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.46) (name en.restaurant.52))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string outdoor)))", "paraphrases": ["restaurant that has waiter service and that has outdoor seating", "restaurants with waiter service and outdoor seating", "restaurants with waiters and outdoor dining areas", "what restaurant offers waiter service and outdoor seating", "which hotel offers waiter service and outdoor seating facilities"]}, "meal that more than two restaurant serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["meal that more than two restaurant serves", "what meals are served by more than two restaurants"]}, "cuisine that is cuisine of the most number of restaurant": {"denotation": "(list (name en.cuisine.italian))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["what kind of cuisine has the most restaurants", "what is the cuisine of the most restaurants", "what cuisine has the most restaurants", "what is the cuisine of most restaurants"]}, "restaurant whose price rating is 2 dollar signs and that has outdoor seating": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.28) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string outdoor)))", "paraphrases": ["moderately priced restaurants that have outdoor seating", "which restaurant has a price rating of two dollar signs and has outdoor seating", "what restaurant has outdoor seating and a 2 dollar price rating", "affordable restaurant with outdoor seating", "what 2 dollar signs rated restaurant has outdoor seating", "what 2 dollar signs restaurant has outdoor seating", "what restaurant has a 2 dollar price rating and outdoor seating", "name a restaurant with a price rating of two dollars signs that has outdoor seating"]}, "restaurant that serves the most number of meal": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.54))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string max) (string meals) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))", "paraphrases": ["what restaurant serves the most meals", "which hotel offers the most number of meals", "a restaurant with alot of meals", "what restaurant has the largest menu", "restaurants with the most options"]}, "restaurant whose neighborhood is midtown west and whose cuisine is thai": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.47) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["thai restaurant in mid town west", "find a thai restaurant in the midtown west area", "restaurant whose neighborhood is midtown west and whose cuisine is thai", "list all of the thai restaurant in midtown west", "what are some thai restaurants in midtown west", "restaurants in midtown west that serve thai food"]}, "restaurant that takes credit cards and that has outdoor seating": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.58) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string outdoor)))", "paraphrases": ["hotel that has outdoor seating  facilities and accepts credit cards", "what resturants take credit cards and have outdoor seating", "what restaurants have outdoor seating that take credit cards", "restaurants that accept credit cards and serve outdoors", "find a restaurant with outdoor seating that takes credit cards"]}, "restaurant that serves the least number of meal": {"denotation": "(list (name en.restaurant.20) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.42) (name en.restaurant.57) (name en.restaurant.8) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string min) (string meals) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))", "paraphrases": ["which resturants serve the least number of meals", "what restaurant has the smallest menu", "restaurants that are better for takeout", "which restaurants serve the least number of meals", "hotel that serves the minimum number of meals", "restaurant that serves the least number of meal"]}, "restaurant that serves lunch and that takes credit cards": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.59) (name en.restaurant.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string credit)))", "paraphrases": ["what restaurant takes credit cards and has lunch", "restaurants that serve lunch and accept credit cards", "what restaurant takes credit card and is open for lunch", "the restaurant takes credit cards and serves lunch", "restaurant which serves lunch and accepts credit cards"]}, "cuisine that is cuisine of restaurant whose star rating is 3 stars": {"denotation": "(list (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star))))", "paraphrases": ["what restaurant has a 3 star rating", "what cuisines are offered by 3 star restaurants", "which restaurant s cuisine has 3 star rating", "what are the cuisines of all the 3 star rating restaurants", "cuisine that is cuisine of restaurant whose star rating is 3 stars", "what is the cuisine of the restaurants with three star ratings"]}, "restaurant that serves lunch and that takes reservations": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.22) (name en.restaurant.26) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.55) (name en.restaurant.59) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string reserve)))", "paraphrases": ["restaurant that serves lunch and takes reservations", "what restaurant offers reservations and serves lunch", "which restaurants serve lunch and accept reservations", "restaurants with lunch and takes reservations", "restaurants accepting reservations and serving lunch", "restaurant that serves lunch and that takes reservations"]}, "cuisine that is cuisine of thai cafe and that is cuisine of thai cafe": {"denotation": "(list (name en.cuisine.italian))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) en.restaurant.thai_cafe) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) en.restaurant.thai_cafe))", "paraphrases": ["which cuisines match that of the thai cafe", "what kind of cuisine is thai cafe", "cuisine that is cuisine of thai cafe and that is cuisine of thai cafe", "what type of dishes does the thai cafe offer"]}, "3 stars or 5 stars": {"denotation": "(list (number 3 en.star) (number 5 en.star))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.star) (number 5 en.star)))", "paraphrases": ["restaurants rated with 3 to 5 stars", "what is better a 3 or a 5 star rating", "5 stars or 3 stars", "find 3 star or 5 star restaurant", "restaurants rated 35 stars"]}, "restaurant that has delivery and whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.53) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["restaurant that has delivery and whose neighborhood is midtown west", "restaurants in midtown west that deliver", "which restaurants in midtown west have delivery service", "restaurant in the  area around midtown west that offers delivery services"]}, "restaurant that is good for groups and that takes reservations": {"denotation": "(list (name en.restaurant.15) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string reserve)))", "paraphrases": ["what good group restaurant takes reservations", "restaurants that are good for group dining and that can be booked in advance", "what restaurant takes group reservations", "restaurant that is good for groups and that takes reservations", "what restaurants are good for groups and accept reservations", "restaurants that take reservations and are good for groups"]}, "neighborhood that is neighborhood of restaurant that takes reservations": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve))))", "paraphrases": ["what neighborhoods have restaurants which take reservations", "what is the neigborhood of the restaurant that accepts reservations", "what are the neighborhoods of restaurants that take reservations", "neighborhood that is neighborhood of restaurant that takes reservations", "what neighborhood contains the most restaurants that offer reservations", "what neighborhoods have restaurants that accept reservations"]}, "neighborhood that is neighborhood of thai cafe or pizzeria juno": {"denotation": "(list (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno)))", "paraphrases": ["the neighborhood that thai cafe or pizzeria juno is in", "neighborhood that is neighborhood of thai cafe or pizzeria juno", "what is the neighborhood of thai cafe or pizzeria juno", "what neighborhood is thai cafe or pizzeria juno in", "restaurants in the same neighborhood as thai cafe", "what neighborhood has a thai cafe or pizzeria juno"]}, "cuisine that is cuisine of at most two restaurant": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["restaurants that have the same meal", "what cuisine is served at two or less restaurants", "what cuisine is shown in only two restaurants", "what cuisine is served at no more than two restaurants"]}, "restaurant that has two cuisine": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) (number 2)))", "paraphrases": ["what restaurant serves two different types of cuisines", "what restaurant serves two cuisines", "restaurant with two cuisines", "restaurants that has more than one cuisine", "restaurant that has two cuisine"]}, "restaurant whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.27) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["restaurants located in midtown west", "list all restaurants in the neighborhood of midtown west", "whats a resturant in midtown west", "restaurant in the midtown west area", "which restaurant is located in midtown west"]}, "cuisine that is cuisine of the least number of restaurant": {"denotation": "(list (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["what cuisine is served by the fewest restaurants", "which type of cuisine is least popular", "cuisine that is cuisine of the least number of restaurant", "what kind of cuisine has the smallest amount of restaurants", "what cuisine has the least amount of restaurants"]}, "restaurant whose neighborhood is midtown west and that takes credit cards": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.47) (name en.restaurant.53))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string credit)))", "paraphrases": ["restaurant whose neighborhood is midtown west and that takes credit cards", "what midtown west restaurant takes credit cards", "name a restaurant in mid town that accepts credit cards", "restaurant in midtown west that takes credit cards", "a restaurant in midtown west that takes credit cards"]}, "restaurant whose price rating is larger than price rating of thai cafe": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.38) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string price_rating)))))", "paraphrases": ["restaurants that are more expensive than thai cafe", "restaurants that has a larger price rating than thai cafe", "restaurants with a price rating larger than thai cafe", "what restaurant has a higher price rating than the thai cafe", "restaurants pricier than thai cafe", "restaurant whose price rating is larger than price rating of thai cafe"]}, "restaurant that has take-out and that has outdoor seating": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.30) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.52) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string outdoor)))", "paraphrases": ["restaurant that has takeout and that has outdoor seating", "what restaurants have both outdoor seating and takeout", "restaurants that have outdoor seating and that offer takeout", "which restaurant has both takeout and outdoor seating", "what restaurant offers outdoor seating and takeout"]}, "restaurant that has outdoor seating and that has waiter service": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.46) (name en.restaurant.52))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string waiter)))", "paraphrases": ["restaurants that have waiters and outdoor dining areas", "restaurants that have waiters and you can sit outside", "restaurant that has outdoor seating and that has waiter service", "what restaurant has outdoor seating and offers waiter service service", "restaurants that serve outdoors with waiters"]}, "restaurant that serves lunch and that has delivery": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.55) (name en.restaurant.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string delivery)))", "paraphrases": ["restaurants that deliver and are open for lunch", "restaurant that serves lunch and that has delivery", "restaurant that can deliver and is open for lunch", "which restaurant not only serves lunch but has delivery", "a restaurant that offers lunch and delivery services", "what restaurant offers lunch and delivery"]}, "lunch or dinner": {"denotation": "(list (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.food.lunch en.food.dinner))", "paraphrases": ["what restaurant has lunch or dinner", "what restaurants serve lunch or dinner", "a restaurant for lunch or dinner"]}, "restaurant whose star rating is 3 stars and that has take-out": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.57) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string takeout)))", "paraphrases": ["restaurant whose star rating is 3 stars and that has takeout", "which 3star restaurant has takeout service", "what 3 star restaurant offers takeout", "find a 3 star restaurant with takeout", "which 3 star resturants have takeout"]}, "meal that at least two restaurant serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["meal served by two or more different restaurants", "what meal do two or more restaurants serve", "what is meal served in at least two restaurants", "what meal is served in at least 2 restaurants", "what meals do 2 restaurants serve"]}, "restaurant whose star rating is not 3 stars": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.47) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string !=) (number 3 en.star)))", "paraphrases": ["what restaurants have less than a 3 star rating", "restaurant whose star rating is not 3 stars", "restaurant that does not have a three star rating", "restaurants with a star rating of 4 or higher", "which resturants arent a 3 star rating", "what restaurant does not have a 3 star rating"]}, "cuisine that is cuisine of restaurant that has delivery": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery))))", "paraphrases": ["what is the cuisine of restaurants that have delivery", "which restaurant has a cuisine that offers delivery services", "what kind of restaurants offer delivery"]}, "cuisine of thai cafe": {"denotation": "(list (name en.cuisine.italian))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string cuisine)))", "paraphrases": ["restaurants with similar food to thai cafe", "what kind of cuisine is thai cafe", "what is the nature of the cuisine of thai cafe", "what is the cuisine of thai cafe"]}, "restaurant whose neighborhood is midtown west and that has outdoor seating": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.2) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string outdoor)))", "paraphrases": ["restaurants that are in the neighborhood of midtown west and have outdoor seating", "what midtown west restaurant offers outdoor seating", "restaurants in the midtown west neighborhood with outdoor seating", "restaurants in midtown west with outdoor seating", "restaurants in midtown west with an outdoor dining area", "restaurant whose neighborhood is midtown west and that has outdoor seating"]}, "restaurant whose neighborhood is midtown west and whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["restaurant whose neighborhood is midtown west and whose star rating is 3 stars", "midtown west neighborhood restaurant with 3 star ratings", "which hotel in midtown west has a 3 star stating", "what are some 3 star rated restaurants in midtown west", "restaurants rated 3 stars in midtown west"]}, "restaurant that has outdoor seating and whose cuisine is thai": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.48) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["thai restaurant which provides outdoor seating facilities", "find a thai restaurant with outdoor seating", "which thai restaurants have outdoor seating", "thai restaurants with outdoor seating"]}, "restaurant that has more than two neighborhood": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string >) (number 2)))", "paraphrases": ["restaurants location", "what restaurant is in over two neighborhoods"]}, "neighborhood that is neighborhood of restaurant whose price rating is 2 dollar signs": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign))))", "paraphrases": ["restaurant in the area that has a 2 dollar sign price rating", "neighborhood that is neighborhood of restaurant whose price rating is 2 dollar signs", "which neighborhoods have restaurants with a 2 dollar sign price rating", "what is the neighborhood of the restaurant that has a price rating of 2 dollar signs"]}, "meal that two restaurant serves": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["restaurants that has a common meal", "restaurant that serves two meal", "what is a meal served by two different restaurants", "what restaurant serves two meals"]}, "restaurant that serves lunch": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch))", "paraphrases": ["a restaurant that is open for lunch", "restaurant that serves lunch", "restaurants open for lunch", "which restaurant offers lunch", "what restaurant offers lunch"]}, "cuisine that is cuisine of restaurant whose neighborhood is midtown west": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west)))", "paraphrases": ["what are the cuisines of all the midtown west restaurants", "what cuisine does the midtown west restaurant have", "what are the types of cuisine available in the midtown west neighborhood", "restaurants similar to restaurants in midtown west", "cuisine that is cuisine of restaurant whose neighborhood is midtown west"]}, "restaurant that has delivery and that is good for groups": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string groups)))", "paraphrases": ["restaurant that has delivery and that is good for groups", "restaurants that deliver and are good for large parties", "restaurants that are good for groups and deliver", "a restaurant with delivery for a large group", "which restaurants are good for groups and also deliver"]}, "restaurant that takes reservations and that is good for kids": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.17) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string kids)))", "paraphrases": ["kidfriendly restaurants that accept reservations", "restaurant that takes reservations and that is good for kids", "a reservation restaurant that is kid friendly", "what restaurant takes reservations and is good for kids", "restaurants that take reservations and are good for children", "what restaurant takes reservations and is kid friendly"]}, "restaurant that takes reservations and that has take-out": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string takeout)))", "paraphrases": ["restaurant that takes reservations and that has takeout", "restaurants that offer takeout and accept reservations", "what restaurants offer reservations and also have carryout", "what restaurant takes reservations and has takeout", "what restaurant offers takeout and has reservations", "what restaurants take reservations and offer takeout"]}, "restaurant that takes credit cards and whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.47) (name en.restaurant.53))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["what restaurant takes credit cards in midtown west area", "restaurants in midtown west that take credit cards", "restaurant that takes credit cards and whose neighborhood is midtown west", "which restaurants in midtown west accept credit cards", "what midtown west restaurants takes credit cards"]}, "restaurant whose price rating is 2 dollar signs and that takes reservations": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.26) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.50) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string reserve)))", "paraphrases": ["hotel that can be booked in advance and which has a price rating of 2 dollar signs", "a reservation restaurant with meduim", "restaurants with a price rating of 2 dollar signs that also take reservations", "restaurants which take reservations and are rated 2 dollar signs"]}, "restaurant whose price rating is smaller than 2 dollar signs or 3 dollar signs": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "paraphrases": ["restaurant with 1 dollar sign", "list all restaurants that are cheaper than 2 dollar signs or 3 star dollar signs", "hotel which has a price rating of less than 2 dollar signs or 3 dollar signs", "restaurants with price ratings less than 2 dollar signs", "what are some restaurants rated at most 3 dollar signs", "restaurant whose price rating is smaller than 2 dollar signs or 3 dollar signs"]}, "restaurant whose price rating is 2 dollar signs and that is good for kids": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.50))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string kids)))", "paraphrases": ["family friendly restaurants with price rating of two", "restaurant whose price rating is 2 dollar signs and that is good for kids", "restaurants that are good for children and also have a price rating of 2 dollar signs", "what 2 dollar signs restaurant is good for kids", "a restaurant with a 2 dollar sign rating for kids", "restaurants that are kid friendly and inexpensive"]}, "restaurant that takes reservations and that has waiter service": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.52) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string waiter)))", "paraphrases": ["what restaurants offers resversations and waiter service", "restaurant with waiter service and reservations", "restaurants that take reservations and have waiters", "which resturant takes reservations and has waiter service", "restaurant that takes reservations and that has waiter service"]}, "restaurant that serves lunch and that has waiter service": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.51))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string waiter)))", "paraphrases": ["restaurant that serves lunch and that has waiter service", "what restaurant can i get lunch at that has waiter service", "which resturants serve lunch and have waiter service", "restaurants that have wait service and serve lunch"]}, "restaurant whose price rating is larger than 2 dollar signs": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.7) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 2 en.dollar_sign))))", "paraphrases": ["restaurants with 3 and higher price rating", "list all restaurants that are more expensive than 2 dollar signs", "restaurant whose price rating is larger than 2 dollar signs", "hotel that has a price rating or more than 2 dollars"]}, "restaurant whose price rating is 2 dollar signs and that has waiter service": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.38) (name en.restaurant.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string waiter)))", "paraphrases": ["what 2 dollar signs restaurant offers waiter service", "restaurants with waiters that have a price rating of 2", "restaurant whose price rating is 2 dollar signs and that has waiter service", "restaurants that have waiters and have 2 dollar sign price rating", "which restaurant has a price rating of two dollar signs and has waiters", "what restaurants with 2 price rating also have waiter service"]}, "neighborhood that is neighborhood of less than two restaurant": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["what neighborhood has at most one restaurant", "what neighborhood has fewer than two restaurants", "what neighborhood has less than two restaurants", "restaurants that are near a neighborhoood"]}, "meal that thai cafe serves": {"denotation": "(list (name en.food.breakfast))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) en.restaurant.thai_cafe))", "paraphrases": ["what entrees does thai cafe offer", "which meal does a thai cafe serve", "what is a meal served by the thai cafe", "what meal can you get at the thai cafe", "what kind of meals does thai cafe serve"]}, "meal that restaurant that has waiter service serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter))))", "paraphrases": ["what kind of meals do restaurants with waiter service serve", "restaurants that has waiters", "what meal does the waiter serve at the restaurant", "what is a meal served at a restaurant that has waiters", "meals at restaurants that have waiters"]}, "restaurant that has the least number of cuisine": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string min) (string cuisine)))", "paraphrases": ["which restaurant offers the fewest types of cuisine", "restaurant that has the least number of cuisine", "what restaurants serve a single type of cuisine", "which restaurants offer the least types of cuisines", "what restaurant has the smallest number of cuisines"]}, "restaurant whose neighborhood is not midtown west": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string !=) en.neighborhood.midtown_west))", "paraphrases": ["restaurant not in the midtown west area", "what restaurants are not located in midtown west", "what restaurants are not in midtown west", "what resturant is not in midtown west", "which restaurant is not located in midtown west"]}, "cuisine that is cuisine of two restaurant": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["what kind of cuisine has at least two restaurants", "which restaurant serves this cuisine", "what is a type of cuisine of two restaurants", "what cuisine is served in two restaurants"]}, "restaurant that has waiter service": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)))", "paraphrases": ["what restaurants offer waiter service", "restaurant which has waiters", "find a restaurant with waiter service"]}, "cuisine that is cuisine of less than two restaurant": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["what is the two cuisine restaurant", "what cuisine is served by fewer than two restaurants", "restaurants that serve the same cuisine"]}, "thai cafe or pizzeria juno": {"denotation": "(list (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno))", "paraphrases": ["thai cafe or pizzeria juno", "where is the thai cafe and the pizzeria juno", "restaurants called thai cafe or pizzeria juno"]}, "restaurant that serves at least two meal": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.5) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))", "paraphrases": ["open for two meals", "what restaurants serve at least two meals", "restaurant that serves at least two meal", "what restaurants has more than two meals on the menu", "restaurants open for at least two meals per day", "which restaurants serve at least two meals"]}, "restaurant that takes reservations and whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["restaurants rated 3 stars that accept reservations", "restaurant that takes reservations and whose star rating is 3 stars", "restaurants with 3stars that take reservations", "three star restaurants that take reservations", "which restaurant has a three star rating and also takes reservations"]}, "restaurant whose star rating is 3 stars and that has delivery": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.7) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string delivery)))", "paraphrases": ["three star restaurants that deliver", "a restaurant rated at least 3 stars that delivers", "restaurant whose star rating is 3 stars and that has delivery", "what 3 star restaurants deliver"]}, "restaurant that has at most two cuisine": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string <=) (number 2)))", "paraphrases": ["which resturants have at most two cuisines", "restaurant that has at most two cuisine", "what restaurant has two different cuisines", "restaurant with no more than two cuisines", "restaurants with no more than two cuisines"]}, "meal that the least number of restaurant serves": {"denotation": "(list (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["what restaurant serves the least amount of meals", "meal that the least number of restaurant serves", "what is the least served meal at restaurants", "what kind of meal has the smallest number of restaurants that serve it", "meals that few restaurants serve"]}, "restaurant that has take-out and that has delivery": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string delivery)))", "paraphrases": ["offers take out and delievers", "list all restaurants that have takeout and delivery", "restaurants with takeout and delivery", "restaurant that has takeout and that has delivery", "which restaurants have takeout and delivery", "which restaurants offer delivery and takeout"]}, "restaurant that takes credit cards and that has waiter service": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string waiter)))", "paraphrases": ["restaurant that takes credit cards and that has waiter service", "find restaurant with waiter service that takes credit cards", "restaurants that take credit cards and have waiters", "what restaurants offer waiter service and takes credit cards", "restaurants that take credit cards and have waiter service"]}, "restaurant whose price rating is 2 dollar signs and that has delivery": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string delivery)))", "paraphrases": ["hotel which has a price rating of 2 dollar signs and offers delivery services", "what restaurant delivers and has a price rating of 2 dollar signs", "a delivery restaurant with medium pricing", "restaurants with delivery rated 2 dollar signs"]}, "restaurant that takes credit cards and that has delivery": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string delivery)))", "paraphrases": ["what restaurants take credit cards and deliver", "restaurants that deliver and accept credit cards", "what restaurant takes credit cards and delivers", "restaurant that takes credit cards and that has delivery", "what restaurants makes deliveries and accepts credit cards", "what restaurant offers delivery and takes credit card"]}, "restaurant that has waiter service and whose cuisine is thai": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.34) (name en.restaurant.39))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["what thai restaurants have waiters", "what thia resturants have waiter service", "thai restaurant that offers waiter services", "what thai restaurants offer a waiter service"]}, "restaurant that has outdoor seating and that has delivery": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string delivery)))", "paraphrases": ["restaurants that have outdoor seating and that deliver", "what restaurant has outdoor seating and delivery", "which restaurant has outdoor seats as well as delivery", "what restaurant offers delivery and an outdoor seating"]}, "meal that thai cafe or pizzeria juno serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno)))", "paraphrases": ["what kind fo meals do thai cafe and pizzeria juno serve", "what meal can you get at either the thai cafe or at pizzeria juno", "what is a meal that the thai cafe or pizzeria juno serves", "thai cafe thats erves pizzeria"]}, "restaurant that takes credit cards and that is good for kids": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.18) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.53) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string kids)))", "paraphrases": ["restaurant that takes credit cards and that is good for kids", "what restaurant takes credit cards and is kid friendly", "restaurants that take credit cards and are childfriendly", "what kidfriendly restaurants accept credit cards", "which kid friendly restaurants accept credit cards"]}, "restaurant that has take-out and that serves lunch": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.51) (name en.restaurant.59) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string meals) (string =) en.food.lunch))", "paraphrases": ["which restaurants have takeout and serve lunch", "what restaurant offers lunch and takeout", "restaurant that has takeout and that serves lunch", "what restaurant has takeout and serves lunch", "a lunch serving restaurant with take out", "what restaurants serve lunch and offer takeout"]}, "restaurant that takes reservations and that takes credit cards": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string credit)))", "paraphrases": ["restaurants that can be booked in advance and accepts credit cards", "restaurant that takes reservations and that takes credit cards", "which restaurants take reservations and accept credit cards", "what restaurant offers reservations and takes credit cards", "what restaurants accept credit cards and reservations"]}, "neighborhood that is neighborhood of restaurant that has waiter service": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter))))", "paraphrases": ["neighborhood that is neighborhood of restaurant that has waiter service", "which neighborhood restaurants have waiters", "which neighborhoods have restaurants with waiters", "what neighborhood contain the most restaurants that have waiter service", "restaurant in the neighbourhood that provides waiter service", "restaurants with waiter service in the neighborhood"]}, "restaurant whose star rating is 3 stars and that serves lunch": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.54) (name en.restaurant.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string meals) (string =) en.food.lunch))", "paraphrases": ["restaurant which offer lunch and has a three star rating", "restaurant open for lunch and has a 3 star raing", "what are some 3 star restaurants that serve lunch", "what restaurant has 3 stars and serves lunch", "what 3 star restaurant offers lunch"]}, "restaurant that has waiter service and that is good for kids": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.17) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.52) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string kids)))", "paraphrases": ["restaurants that are good for children and have waiters", "restaurant that has waiter service and that is good for kids", "restaurants that have waiters and are good for kids", "family friendly restaurants that have waiters", "restaurants that are kid friendly and have waiters"]}, "meal that restaurant that takes credit cards serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit))))", "paraphrases": ["what meals do credit card taking restaurants serve", "what meal can you pay for with credit cards", "what is a meal served by a restaurant that accepts credit cards", "what restaurant serves meals and accepts credit cards"]}, "restaurant that serves lunch and that has take-out": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.51) (name en.restaurant.59) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string takeout)))", "paraphrases": ["restaurant that serves lunch and that has takeout", "what restaurant has takeout and a lunch menu", "what restaurant serves lunch and offers takeout", "which resturants serve lunch and have takeout", "restaurants that serve lunch and takeout"]}, "restaurant that takes reservations": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.55) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)))", "paraphrases": ["what restaurant takes reservations", "what restaurant offers reservations", "restaurants accepting reservations", "which resturants take reservations"]}, "meal that at most two restaurant serves": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["restaurants that serves meal", "what is a meal served by no more than two restaurants", "what is a meal that 2 or less restaurants serve"]}, "restaurant that has waiter service and whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.51) (name en.restaurant.52))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["what retaurant in midtown west have waiter services", "which resturant in midtown west has waiter service", "restaurant that has waiter service and whose neighborhood is midtown west", "restaurants in the midtown west neighborhood that have waiters"]}, "restaurant whose star rating is star rating of thai cafe": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string star_rating))))", "paraphrases": ["which restaurants have the same star rating as thai cafe", "restaurant whose star rating is star rating of thai cafe", "what thai restaurant has a good star rating", "a restaurant as good as thai cafe"]}, "restaurant that takes reservations and that is good for groups": {"denotation": "(list (name en.restaurant.15) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string groups)))", "paraphrases": ["great place for groups and takes reservations", "restaurant that takes reservations and that is good for groups", "what restaurant is good for groups and takes reservations", "which restaurant takes reservations and is suitable for groups", "groupfriendly restaurants that accept reservations", "restaurants that can be booked in advance and good for group dining"]}, "restaurant that has less than two cuisine": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string <) (number 2)))", "paraphrases": ["what restaurant offers only one cuisine", "which restaurants focus on one cuisine", "restaurant that has less than two cuisine", "which restaurant offers fewer than two types of cuisine"]}, "neighborhood that is neighborhood of thai cafe and that is neighborhood of thai cafe": {"denotation": "(list (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) en.restaurant.thai_cafe) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) en.restaurant.thai_cafe))", "paraphrases": ["a thai cafe in the neighborhood", "in which neighborhood is thai cafe", "neighborhood that is neighborhood of thai cafe and that is neighborhood of thai cafe"]}, "restaurant that has outdoor seating and that is good for kids": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.28) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string kids)))", "paraphrases": ["what resturant has outdoor seating and is good for kids", "what good kids restaurant has outdoor seating", "what restaurant is good for kids and offers outdoor seating", "which restaurant welcomes children and has outdoor seats", "what is a kid friendly restaurant with an outdoor dining area"]}, "restaurant whose cuisine is thai and that takes credit cards": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.47) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string credit)))", "paraphrases": ["which thai restaurants take credit cards", "the thai restaurant takes credit cards", "a thai restaurant that takes credit cards", "which thai restaurants accept credit cards"]}, "meal that restaurant whose neighborhood is midtown west serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west)))", "paraphrases": ["restaurants in midtown west neighborhood", "what kind of meals are served in the restaurants in midtown west", "what meal does the midtown west restaurant serve", "restaurants that are in midtown west", "what is a meal served by a restaurant in midtown west"]}, "restaurant whose neighborhood is midtown west and that takes reservations": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.52) (name en.restaurant.55) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string reserve)))", "paraphrases": ["what midtown west restaurant takes reservations", "restaurant whose neighborhood is midtown west and that takes reservations", "restaurants in the midtown west neighborhood that take reservations", "restaurants that take reservations in midtown west"]}, "restaurant whose price rating is smaller than price rating of thai cafe": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string price_rating)))))", "paraphrases": ["what restaurant has a lower price rating than thai cafe", "restaurants that cheaper than thai cafe", "restaurant that is cheaper than thai cafe", "name a restaurant with a lower price rating than the thai cafe", "what restaurant has a lower price rating than the thai cafe"]}, "restaurant that serves two meal": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.29) (name en.restaurant.33) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.44) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.5) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))", "paraphrases": ["which restaurants serve two meals", "what restaurant has two meals", "restaurants for two", "a restaurant that serves multiple meals", "what restaurants have at least 2 meals on the menu"]}, "restaurant that has take-out and whose cuisine is thai": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.40))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["which thai resturants have takeout", "which thai restaurants have takeout", "restaurant that has takeout and whose cuisine is thai", "which thai restaurants offer takeout", "list all thai restaurants that offer takeout"]}, "restaurant that serves less than two meal": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.28) (name en.restaurant.3) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))", "paraphrases": ["what restaurant serves less than two meals", "restaurants serving fewer than two meals", "list all restaurants that serves less than two meals", "which restaurants serve less than two meals", "which resturants serve less than two meals"]}, "restaurant whose cuisine is thai and that has waiter service": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.34) (name en.restaurant.39))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string waiter)))", "paraphrases": ["thai restaurant with waiters", "which thai restaurants have waiters", "thai restaurants with waiter service", "what thai restaurant offers waiter service"]}, "restaurant whose star rating is 3 stars and that has outdoor seating": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string outdoor)))", "paraphrases": ["restaurants rated 3 stars with outdoor seating", "which restaurants has outdoor seating and a 3star rating", "restaurants rated with 3 stars and have outdoor seating", "what 3 star restaurant has outdoor seating"]}, "restaurant that takes reservations and that has delivery": {"denotation": "(list (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.22) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.55) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string delivery)))", "paraphrases": ["what restaurant can i get delivery and reservations", "what restaurants offers delivery and takes reservations", "restaurants that can be reserved in advance and that offers delivery services", "restaurant that takes reservations and that has delivery", "restaurant with delivery service that accepts reservations"]}, "number of neighborhood": {"denotation": "(list (number 3 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type))))", "paraphrases": ["how many neighborhoods are there", "how many neighboords are there that have restaurants"]}, "restaurant that takes credit cards and whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["three star restaurants that take credit cards", "restaurants rated 3 stars that take credit cards", "restaurant that takes credit cards and whose star rating is 3 stars", "what 3 star rated restaurant takes credit cards", "what are some 3 star restaurants that accept credit cards"]}, "restaurant whose neighborhood is midtown west and whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.27) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["what restaurants are in midtown west", "what resturants are in midtown west", "restaurant in the midtown west neighborhood", "list all restaurants in midtown west "]}, "cuisine that is cuisine of restaurant that takes credit cards": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit))))", "paraphrases": ["cuisine that is cuisine of restaurant that takes credit cards", "what cuisine takes credit cards", "what restaurant serves cuisine and takes credit cards"]}, "restaurant that has delivery and that serves lunch": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.55) (name en.restaurant.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string meals) (string =) en.food.lunch))", "paraphrases": ["restaurants with delivery for lunch", "restaurant that has delivery and that serves lunch", "restaurants that deliver and serve lunch", "restaurant serving lunch that can deliver", "what restaurants offer delivery and serves lunch", "which resturants serve lunch and have delivery"]}, "meal that restaurant that is good for groups serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups))))", "paraphrases": ["what meal is good to be served for groups", "restaurant that serves group meals", "what is a meal served by a restaurant that accommodates groups", "what meal is good for groups", "restaurants that serve meal for groups"]}, "restaurant that is good for kids and that has waiter service": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.17) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.52) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string waiter)))", "paraphrases": ["find a good kids restaurant with waiter service", "what is a restaurant that is kidfriendly and has waiters", "kidfriendly restaurant with waiter service", "restaurants good for kids and has waiters"]}, "neighborhood that is neighborhood of at most two restaurant": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["what neighborhood only has one or two restaurants", "what neighborhood has no more than two restaurants", "restaurants that are near two neighborhoods", "what neighborhood has two or less restaurants"]}, "restaurant whose price rating is 2 dollar signs and that has take-out": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.50) (name en.restaurant.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string takeout)))", "paraphrases": ["restaurant whose price rating is 2 dollar signs and that has takeout", "which restaurant has a 2dollarsigns price rating and takeout service", "what restaurant has takeout and a 2 dollar price rating", "what 2 dollar sign restaurant offers takeout", "which resturants have takeout and a price rating of 2 dollar signs", "restaurants that offer takeout and are price rated 2 dollar signs"]}, "meal that restaurant whose cuisine is thai serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai)))", "paraphrases": ["what is a meal served in a thai restaurant", "what kind fo meals do thai restaurants serve", "thai restaurant cuisine", "restaurant that serves thai meal", "what meal does the thai restaurant serve"]}, "restaurant that is good for kids and that has take-out": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.18) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string takeout)))", "paraphrases": ["restaurant that has take out facilities and that which kids can enjoy", "family friendly restaurants with takeout", "what restaurant is kid friendly and has takeout", "which restaurant accepts kids and offers takeout", "restaurant that is good for kids and that has takeout", "what restaurant offers takeout and is good for kids"]}, "restaurant whose price rating is 2 dollar signs and that takes credit cards": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.50) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string credit)))", "paraphrases": ["what restaurant has 2 menu items and takes credit cards", "restaurants with 2 price rating that accept credit cards", "what restaurants have a price rating of two dollar signs and also accept credit cards", "what 2 dollar sign restaurant takes credit card", "restaurants in the 2 dollar sign price category that accept credit cards", "restaurant whose price rating is 2 dollar signs and that takes credit cards"]}, "restaurant that has the largest price rating": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating))))", "paraphrases": ["which restaurant is rated the most expensive", "restaurant that has the largest price rating", "what restaurant has the highest price rating", "most expensive restaurants", "this restaurant had the largest rating in price", "what is the most expensive restaurant"]}, "restaurant that has waiter service and that takes credit cards": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string credit)))", "paraphrases": ["restaurants that have waiters and take credit cards", "which restaurants that have waiters take credit cards", "what restaurants take credit cards and offers waiter service", "restaurants that accept credit cards and have waiters"]}, "restaurant that has delivery": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)))", "paraphrases": ["delivery is avaiable", "a delivering restaurant", "restaurant that has delivery", "which restaurants deliver"]}, "restaurant that is good for groups and whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.24) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.56) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["what 2 dollar signs restaurant is good for groups", "restaurant that is good for groups and whose price rating is 2 dollar signs", "restaurant with a 2dollarsigns rating that welcomes groups", "what restaurant with a price rating of two dollar signs is a good place for a group", "restaurants with 2 price rating that is groupfriendly"]}, "number of meal": {"denotation": "(list (number 3 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))", "paraphrases": ["what is the number of this meal", "how many meals are served"]}, "restaurant whose cuisine is thai and that takes reservations": {"denotation": "(list (name en.restaurant.15) (name en.restaurant.21) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.55) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string reserve)))", "paraphrases": ["a reservation thai restaurant", "thai restaurant that takes reservations", "what thai restaurants takes reservations", "what thai restaurants take reservations"]}, "restaurant that has outdoor seating and whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.2) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["restaurants with outdoor seating in midtown west", "restaurants in midtown west with outdoor dining areas", "restaurant that has outdoor seating and whose neighborhood is midtown west", "what restaurant in midtown west contains outdoor seating", "hotel in the midtown west area which has outdoor seating facilities", "which restaurant in midtown west has outdoor seating available"]}, "restaurant whose cuisine is cuisine that is cuisine of thai cafe": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.27) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) en.restaurant.thai_cafe)))", "paraphrases": ["restaurants that serve the same type of food as thai cafe", "what restaurants serve the same cuisine as thai cafe", "restaurant whose cuisine is cuisine that is cuisine of thai cafe", "what is the type of cuisine of thai cafe"]}, "restaurant whose star rating is larger than 3 stars": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.27) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.55) (name en.restaurant.8) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.star))))", "paraphrases": ["hotel that has more than a three star rating", "what are some restaurants rated higher than 3 stars", "what are some restaurants who are 4 stars or better", "a restaurant that has a 4 star or higher rating"]}, "restaurant that is good for groups and whose cuisine is thai": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.20) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.47) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["groupfriendly thai restaurants", "restaurant that is good for groups and whose cuisine is thai", "name some thai restaurants meant for group dining", "a group friendly thai restaurant", "find a thai restaurant that is good for groups"]}, "restaurant that has waiter service and that takes reservations": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.52) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string reserve)))", "paraphrases": ["which restaurants have waiters and accept reservations", "what restaurants offer reservations and waiter service", "which restaurant has waiter service and takes reservations", "restaurant that has waiter service and that takes reservations", "restaurants that have waiters and take reservations"]}, "restaurant that has more than two cuisine": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string >) (number 2)))", "paraphrases": ["name a restaurant serving more than two types of cuisine", "what restaurants have more than two kinds of cuisine", "what restaurant has over two cuisines", "restaurant that has two cuisines", "restaurants that have at least two cuisines"]}, "restaurant whose neighborhood is midtown west and that is good for kids": {"denotation": "(list (name en.restaurant.24) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string kids)))", "paraphrases": ["restaurants in midtown west and is kid friendly", "find a good kids restaurant in midtown west", "which restaurants in midtown west are kid friendly", "a restaurant for kids in midtown west"]}, "restaurant whose neighborhood is midtown west and that is good for groups": {"denotation": "(list (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.53) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string groups)))", "paraphrases": ["restaurant in midtown west  which is good for groups", "midtown west restaurant for many people", "restaurant in the area of midtown west that is good for group dining", "what restaurant in midtown west is good for groups", "what is the best restaurant for big groups in midtown west"]}, "restaurant whose cuisine is thai and whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["a fairly inexpensive thai cuisine can be purchased at this restaurant", "thai restaurants with a price rating of 2 dollar signs", "find a thai restaurant with a 2 dollar price rating", "thai cuisine restaurant that has a  price rating"]}, "restaurant that has outdoor seating and whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.28) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["restaurant that has outdoor seating and whose price rating is 2 dollar signs", "which restaurants have a 2 dollar sign price rating and outdoor seating", "what restaurants with 2 price rating serve outdoors", "what2 dollar sign restaurant has outdoor seating", "what restaurant has outdoor seating and has a price rating of the 2 dollar sign", "restaurants with outdoor seating and a  price rating"]}, "cuisine that is not cuisine of thai cafe": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string !=) en.restaurant.thai_cafe))", "paraphrases": ["cuisine unlike thai cafe", "restaurants with food not like thai cafe", "what places serve food that is not thai", "list all restaurants that are not similar to thai cafe", "what cuisine does the thai cafe not have"]}, "restaurant that is good for kids and that has outdoor seating": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.28) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string outdoor)))", "paraphrases": ["what restaurants have outdoor dining and are childfriendly", "a kid friendly restaurant with outdoor seating", "restaurant that is kidfriendly and has an outdoor dining area", "estaurant that is good for kids and that has outdoor seating", "restaurants that are good for children and have outdoor seating", "family friendly restaurants where you can sit outside"]}, "restaurant that takes credit cards and whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.50) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["restaurants with a 2 dollar sign rating that take credit cards", "restaurant that takes credit cards and whose price rating is 2 dollar signs", "what 2 dollar price rating restaurant takes credit cards", "restaurants that take credit cards with a price rating of 2", "which restaurants accept credit cards and has a rating of 2 dollar signs", "restaurant whose price rating is 2 dollar signs and also accept credit cards"]}, "restaurant that is good for kids and that is good for groups": {"denotation": "(list (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.53) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string groups)))", "paraphrases": ["hotel that suits the tastes of kids and which is best for group dining", "what restaurants are good for groups and kids", "what restaurants are both good for groups and kids", "what restaurant is good for kids and groups", "what resturant is good for kids and groups"]}, "restaurant that has delivery and that has outdoor seating": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string outdoor)))", "paraphrases": ["restaurant that has delivery and that has outdoor seating", "restaurant that delivers and has an outdoor seating area", "what restaurant offers outdoor seating and delivery", "which hotel has outdoor seating facilities and offers delivery services", "restaurants with delivery and outdoor seating", "restaurant that delivers and offers outside seating"]}, "restaurant that serves lunch or dinner": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.food.lunch en.food.dinner)))", "paraphrases": ["which restaurants serve lunch or dinner", "what restaurant is good for lunch or dinner", "restaurant that serves lunch or dinner", "restaurant that is open for lunch and dinner", "restaurants that serve lunch or dinner"]}, "neighborhood that is neighborhood of the most number of restaurant": {"denotation": "(list (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["what neighborhood has the largest number of restaurants", "what neighborhood is home to the most restaurants", "which neighborhood has the most restaurants", "what neighborhood has the most restaurants", "neighborhood that is neighborhood of the most number of restaurant", "what neighborhood with the most restaurants"]}, "restaurant that has take-out and that is good for groups": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.3) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string groups)))", "paraphrases": ["what restaurant is good for groups and offers takeout", "restaurants with takeout that are group friendly", "restaurants that are good for groups and offer takeout", "restaurants that have takeout and are good for groups", "restaurants that have takeout that are good for large parties", "restaurant that has takeout and that is good for groups"]}, "restaurant that has take-out and that takes reservations": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string reserve)))", "paraphrases": ["restaurant that has takeout and that takes reservations", "what restaurant takes reservations and offers takeout", "which resturants with takeout take reservations", "restaurants that have takeout and take reservations", "what restaurant has reservations and takeout", "restaurants that accept reservations and offer takeout"]}, "total price rating of restaurant": {"denotation": "(list (number 10 en.dollar_sign))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating))))", "paraphrases": ["total price rating of restaurant", "what is the total price rating of all the restaurants", "what is the price rating of the hotel", "what is the price rating"]}, "meal that the most number of restaurant serves": {"denotation": "(list (name en.food.dinner))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["what same meals do all the other restaurants serve", "what cuisine type is most common", "what meal is served in the most restaurants", "the most common restaurant meal", "meal that the most number of restaurant serves"]}, "restaurant that has delivery and that is good for kids": {"denotation": "(list (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string kids)))", "paraphrases": ["what restaurant delivers and is good for kids", "what good kids restaurant has delivery", "which restaurant is friendly to children and has delivery", "restaurant that delivers and is kid friendly", "what resturant is good for kids and has delivery"]}, "restaurant that has delivery and whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.7) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["three star rated restaurants that deliver", "what 3 star restaurant has delivery", "3star restaurants that deliver", "restaurant that has delivery and whose star rating is 3 stars", "what 3 star restaurant offers delivery"]}, "meal that less than two restaurant serves": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["restaurants with a common meal", "restaurants that serve less than one meal", "restaurant that serves unique meals", "what meal is served by fewer than two restaurants"]}, "restaurant whose cuisine is thai and that is good for groups": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.20) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.47) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string groups)))", "paraphrases": ["thai restaurant that is good for group dining", "a good thai resturant with room for groups", "thai restaurants for groups", "thai restaurant that is good for groups", "restaurant whose cuisine is thai and that is good for groups"]}, "restaurant that has take-out and that has waiter service": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string waiter)))", "paraphrases": ["restaurants with takeout and waiter service", "restaurants with takeout that have waiters", "what restaurants offer waiter service and takeout", "restaurant that has takeout and that has waiter service", "which restaurant has waiter and takeout service", "which restaurants have waiters and offer takeout"]}, "cuisine that is cuisine of restaurant that has take-out": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout))))", "paraphrases": ["what cuisines are offered by restaurants that offer takeout", "what cuisine offers takeout", "cuisine that is cuisine of restaurant that has takeout", "list the types of cuisine for restaurants that offer takeout"]}, "meal that thai cafe serves and that thai cafe serves": {"denotation": "(list (name en.food.breakfast))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) en.restaurant.thai_cafe) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) en.restaurant.thai_cafe))", "paraphrases": ["what is a meal served at the thai cafe", "what meals do the thai cafe serve", "what meals does thai cafe serve"]}, "neighborhood that is neighborhood of restaurant whose star rating is 3 stars": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star))))", "paraphrases": ["which neighborhood resturant has a 3 star rating", "which neighborhoods have 3 star restaurants", "what neighborhoods have the most 3 star rated restaurants", "what is the neighborhood of the 3 star rated restaurant", "neighborhood that is neighborhood of restaurant whose star rating is 3 stars", "list 3 star restaurants by neighborhood"]}, "restaurant that is good for groups and that has delivery": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string delivery)))", "paraphrases": ["what good group restaurant has delivery", "restaurant that is good for groups and that has delivery", "restaurant that delivers and is good for groups", "restaurants that are deliver and are good for large parties", "restaurants for groups with delivery"]}, "cuisine that is cuisine of at least two restaurant": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["what cuisines are offered by more than one restaurant", "what kind of cuisines have at least two restaurants", "which restaurant has two cuisines", "restaurant with food of two cultures", "what cuisine is at at least two restaurants", "cuisine that is cuisine of at least two restaurant"]}, "restaurant whose cuisine is cuisine of thai cafe": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.27) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string cuisine))))", "paraphrases": ["restaurants serving the same cuisine as thai cafe", "name athai restaurant or cafe", "restaurant whose cuisine is cuisine of thai cafe", "where is a thai cafe", "list all restaurants similar to the cuisine of thai cafe", "which restaurant has thai cuisine"]}, "restaurant whose star rating is 3 stars and that is good for kids": {"denotation": "(list (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string kids)))", "paraphrases": ["kidfriendly restaurants that are rated 3 stars", "a 3 star restaurant that is good for kids", "3 star rated restaurants for kids", "what 3 star restaurant is good for kids", "restaurant whose star rating is 3 stars and that is good for kids", "a three star kid friendly restaurant"]}, "cuisine that is cuisine of more than two restaurant": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["a restaurant with varied cuisine", "what cuisine is present at more than two restaurants", "what are some cuisines offered by more than two restaurants", "cuisine in at least 2 restaurants", "what restaurants offer more than two cuisines"]}, "neighborhood that is neighborhood of at least two restaurant": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["what neighborhood contains at least two restaurants", "what neighborhoods have at least two restaurants", "a neighborhood with two restaurants", "neighborhood that is neighborhood of at least two restaurant"]}, "restaurant whose star rating is 3 stars or 5 stars": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.star) (number 5 en.star))))", "paraphrases": ["restaurant whose star rating is 3 stars or 5 stars", "list all restaurants that have at least 3 star or 5 star ratings", "restaurants with star ratings of 3 or 5", "restaurant with 5 stars or 3 stars rating", "restaurants with a 3 or 5 star rating", "which restaurants are rated 3 or 5 stars"]}, "restaurant that has outdoor seating and that has outdoor seating": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.28) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.58) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string outdoor)))", "paraphrases": ["what restaurant offers outdoor seating", "restaurants with outdoor seating", "restaurant that has outdoor seating and that has outdoor seating", "restaurant has seating outside", "restaurants with outdoor dining areas"]}, "restaurant whose neighborhood is midtown west or chelsea": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.neighborhood.midtown_west en.neighborhood.chelsea)))", "paraphrases": ["list all restaurants in midtown west or chelsea", "restaurant whose neighborhood is midtown west or chelsea", "what are the hotels found in midtown west or chelsea", "a restaurant in west midtown or chelsea"]}, "restaurant that has take-out": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)))", "paraphrases": ["a take out restaurant", "which restaurants offer takeout", "list all restaurants offering takeout", "what restaurants have takeout"]}, "restaurant whose star rating is 3 stars and whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["restaurant that has 3 stars rating", "list all 3 star restaurants", "restaurant whose star rating is 3 stars and whose star rating is 3 stars"]}, "restaurant that has delivery and whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["restaurant with delivery that has a 2 dollar sign rating", "hotel that offers delivery services and has a price rating of 2 dollar signs", "find a 2 dollar price rating restaurant with delivery", "what 2 dollar signs restaurant offers delivery", "restaurant that has delivery and whose price rating is 2 dollar signs"]}, "restaurant that has waiter service and whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.57) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["find a 3 star restaurant with waiter service", "what 3 star restaurant has waiter service", "which restaurant has waiters and a star rating of three stars", "what is a 3 star restaurant that is kid friendly", "which resturant has waiter service and a 3 star rating"]}, "restaurant that is good for groups": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.53) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)))", "paraphrases": ["which resturants are good for groups", "restaurant that is good for groups", "what restaurants accommodate groups", "restaurants that are group friendly", "groupfriendly restaurants"]}, "restaurant whose neighborhood is neighborhood of thai cafe": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.23) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.54) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string neighborhood))))", "paraphrases": ["restaurants in the neighborhood of thai cafe", "list restaurants in the neighborhood of thai cafe", "restaurant who shares a neighborhood with the thai cafe", "restaurant that is near to thai cafe"]}, "restaurant that takes credit cards and that has take-out": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.30) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string takeout)))", "paraphrases": ["restaurant with takeout service that accepts credit cards", "which restaurants accept credit cards for payment and also have takeout service", "restaurants that offer credit cards and takeout", "restaurant that takes credit cards and that has takeout"]}, "average price rating of restaurant": {"denotation": "(list (number 2.500 en.dollar_sign))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating))))", "paraphrases": ["what is the average price rating of a restaurant", "what is the average price rating of a hotel", "what is the average price rating of all restaurants", "what is the average price ratings of restaurants"]}, "restaurant whose cuisine is thai and that is good for kids": {"denotation": "(list (name en.restaurant.39) (name en.restaurant.47) (name en.restaurant.48))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string kids)))", "paraphrases": ["a thai restaurant for kids", "restaurant whose cuisine is thai and that is good for kids", "what thai restaurants are kid friendly", "family friendly thai restaurants"]}, "cuisine that is cuisine of restaurant that is good for kids": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids))))", "paraphrases": ["what cuisine options are there among the kidfriendly restaurants", "what is the cuisine of restaurants that are good for children", "what cuisine has restaurants that are best for kids", "restaurants with a cuisine that is child friendly", "cuisine that is cuisine of restaurant that is good for kids", "what is cuisine of the kid friendly restaurant"]}, "neighborhood that is neighborhood of two restaurant": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["restaurant near a neighborhood", "which neighborhood has two restaurants", "what neighborhood contains two restaurants", "what neighborhood has at least two restaurants"]}, "restaurant that has outdoor seating": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.28) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.58) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)))", "paraphrases": ["restaurants with outdoor dining area", "restaurants where you can sit outside", "what restaurants have outdoor dining", "which restaurants have outdoor seating"]}, "restaurant that has waiter service and that has take-out": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string takeout)))", "paraphrases": ["restaurants with waiter service and takeout", "restaurants with waiters that offer takeout", "hotel that has waiter service  and take out facilities", "restaurant that has waiter service and that has takeout", "which restaurant has waiters and also offers takeout", "what restaurant has takeout and waiter service"]}, "restaurant whose neighborhood is midtown west and that has waiter service": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.51) (name en.restaurant.52))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string waiter)))", "paraphrases": ["what restaurant in midtown west has waiter service", "restaurants in midtown west with waiter service", "what midtown west restaurant offers waiter service", "restaurant whose neighborhood is midtown west and that has waiter service"]}, "restaurant whose price rating is 2 dollar signs and whose cuisine is thai": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["thai restaurants that are inexpensive", "which thai restaurant has a 2dollarsign rating", "thai restaurants rated 2 dollar signs"]}, "restaurant that has outdoor seating and that is good for groups": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string groups)))", "paraphrases": ["what restaurant is good for groups and offers outdoor seating", "restaurant that has outdoor seating and that is good for groups", "restaurants with outdoor seating and is good for groups", "restaurants that have outdoor seating and is good for groups", "a group friendly restaurant with outdoor seating", "restaurants that have outdoor seating and are good for large parties"]}, "cuisine that is cuisine of thai cafe": {"denotation": "(list (name en.cuisine.italian))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) en.restaurant.thai_cafe))", "paraphrases": ["what cuisine does the thai cafe have", "cuisine like that of thai cafe", "list all restaurants that are similar to thai cafe"]}, "restaurant whose star rating is 3 stars and that has waiter service": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.57) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string waiter)))", "paraphrases": ["3 star restaurants which have waiters", "restaurants with 3star ratings that have waiters", "what 3star restaurants also have waiters", "restaurant whose star rating is 3 stars and that has waiter service", "what 3 star rated restaurant offers waiter service", "which 3 star restaurants have waiters"]}, "restaurant that serves at most two meal": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))", "paraphrases": ["restaurant that is open for two meals", "restaurant that serves at most two meal", "what restaurant only serves two or less meals", "restaurants only open for 2 meals per day", "restaurants that serve two at most at a time", "restaurant which serves at maximum two meals"]}, "restaurant whose cuisine is thai and whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.25) (name en.restaurant.48) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["what thai restaurant has a star rating of 3 star", "thai cuisine restaurant with 3 star rating", "restaurant whose cuisine is thai and whose star rating is 3 stars", "what are some 3 star thai restaurants", "thai restaurants with 3star ratings"]}, "restaurant whose cuisine is thai and whose cuisine is thai": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.55) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["restaurant whose cuisine is thai and whose cuisine is thai", "a restaurant with thai cuisine", "what restaurant has thai cuisine"]}, "midtown west or chelsea": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.neighborhood.midtown_west en.neighborhood.chelsea))", "paraphrases": ["restaurants in midtown west or chelsea", "chelsea or midtown west", "list all restaurants in the neighborhood of midtown west or chelsea"]}, "restaurant that takes credit cards": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.25) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.53) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)))", "paraphrases": ["restaurants that accept credit cards", "restaurant that takes credit cards", "what restaurants accept credit cards", "find a restaurant that takes credit cards", "restaurants that take credit cards"]}, "restaurant that is good for kids and whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.24) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["restaurant in midtown west for kids", "which restaurants in the midtown west neighborhood are good for children", "restaurant that is good for kids and whose neighborhood is midtown west", "what good kids restaurant is in the midtown west area", "family friendly restaurants in midtown west"]}, "neighborhood that is neighborhood of more than two restaurant": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["which neighborhoods have more than two restaurants", "neighborhoods with more than 2 restauraunts", "more that three restaurant in neighborhood", "what neighborhood has more than two restaurants", "neighborhood that is neighborhood of more than two restaurant"]}, "restaurant that takes credit cards and whose cuisine is thai": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.47) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["what thai restaurant takes credit cards", "thai restaurants that take credit cards", "thai restaurants that accept credit cards", "which thai restaurant takes credit cards"]}, "neighborhood that is neighborhood of restaurant that serves lunch": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch)))", "paraphrases": ["neighborhood with restaurants that serve lunch", "which neighborhoods have restaurants that serve lunch", "what neighborhood has restaurants that serve lunch", "what neighborhood contains restaurants that offer lunch", "neighborhood that is neighborhood of restaurant that serves lunch"]}, "neighborhood that is neighborhood of restaurant that has outdoor seating": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor))))", "paraphrases": ["what neighborhood has a restaurant that contains outdoor seating", "which neighborhood has restaurants that offer outdoor seating", "restaurants in the neighborhood with outdoor seating", "neighbourhood restaurant that offers outdoor seating facilities", "what neighborhoods have restaurants that serve outdoors"]}, "restaurant that has at most two neighborhood": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string <=) (number 2)))", "paraphrases": ["hotel that is found in a maximum of two areas", "restaurant with two locations", "what restaurant can be found in only two neighborhoods", "restaurants with no more than 2 locations"]}, "neighborhood that is neighborhood of restaurant that has take-out": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout))))", "paraphrases": ["restaurant in the neighbourhood that has takeout facilities", "neighborhood that is neighborhood of restaurant that has takeout", "what is the eighborhood  of the takeout restaurant", "what neighborhood contains restaurants that have takeout", "which neighborhoods have restaurants that offer takeout", "which neighborhood resturants have takeout"]}, "restaurant whose star rating is 3 stars and that takes reservations": {"denotation": "(list (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string reserve)))", "paraphrases": ["what 3 star restaurants accept reservations", "restaurants whose ratings are 3 stars and that take reservations", "restaurant whose star rating is 3 stars and that takes reservations", "3 star rated restaurant that accepts reservations", "which restaurants with 3 stars takes reservations"]}, "restaurant that has waiter service and that is good for groups": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string groups)))", "paraphrases": ["what restaurant is good for groups and has waiter service", "restaurants that have waiters and are good for groups", "restaurant that has waiter service and that is good for groups", "which restaurants are group friendly and have waiters", "restaurants with waiters that are good for groups", "whats a resturant with waiter service thats good for groups"]}, "restaurant that is good for kids and that takes credit cards": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.18) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.53) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string credit)))", "paraphrases": ["restaurant that is good for kids and that takes credit cards", "what are some kidfriendly restaurants that accept credit cards", "which restaurants accept credit cards and are good places to go with kids", "what restaurant is kid friendly and takes credit cards", "which hotel appeals to kids and accepts credit cards", "what restaurant is good for kids and takes credit cards"]}, "restaurant whose star rating is at least star rating of thai cafe": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string star_rating)))))", "paraphrases": ["which restaurants are rated the same or better than thai cafe", "restaurant whose star rating is at least star rating of thai cafe", "what restaurant has a star rating the same as thai cafe", "restaurants with the same or higher star rating as thai cafe", "restaurants which have the same star rating or better of thai cafe"]}, "restaurant that serves lunch and whose cuisine is thai": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.25) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["restaurant that serves lunch and whose cuisine is thai", "which thai resturants serve lunch", "what thai restaurant offers lunch", "what thai restaurant has lunch"]}, "restaurant that takes reservations and whose cuisine is thai": {"denotation": "(list (name en.restaurant.15) (name en.restaurant.21) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.55) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["what thai restaurant takes reservations", "thai restaurants that accept reservations", "thai restaurant that can be booked in advance", "which thai restaurants take reservations"]}, "restaurant that has the smallest star rating": {"denotation": "(list (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.36) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating))))", "paraphrases": ["restaurant with smaller star rating", "restaurants with the lowest star rating", "what restaurant has the lowest star rating", "which restaurant has the lowest star rating", "restaurant that has the smallest star rating", "hotel that has the minimum star rating"]}, "meal that restaurant that is good for kids serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids))))", "paraphrases": ["restaurant that serves food for kids", "what is a meal from a restaurant that is good for kids", "restaurants that serve good meals for kids", "restaurant that serves good meals for kids", "what is a good meal served by a restaurant that accommodates children"]}, "cuisine that is cuisine of restaurant that has outdoor seating": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor))))", "paraphrases": ["what cuisines are offered by restaurants that have outdoor seating", "what restaurant serves cuisine at an outdoor setting", "what is the cuisine of restaurants that have outdoor seating", "cuisine that is cuisine of restaurant that has outdoor seating", "what types of cuisine are there at resturants with outdoor seating", "what kind of restaurant offers outdoor seating"]}, "restaurant that has delivery and that has delivery": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string delivery)))", "paraphrases": ["what restaurant has delivery", "which hotel offers delivery services", "restaurant that has delivery and that has delivery", "restaurants that deliver"]}, "restaurant that has the largest star rating": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.40) (name en.restaurant.49) (name en.restaurant.8) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating))))", "paraphrases": ["restaurant that has the largest star rating", "which restaurant is the most highly rated", "which hotel has the highest star rating", "a restaurant that has the highest star rating", "highest star rated restaurants", "what is the highest rated restaurant"]}, "restaurant whose star rating is smaller than 3 stars": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.16) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.56) (name en.restaurant.58) (name en.restaurant.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.star))))", "paraphrases": ["restaurant whose star rating is smaller than 3 stars", "which resturants have a star rating smaller than 3 stars", "restaurants with 2 stars or less", "list all restaurants that have ratings lower than 3 stars", "find a restaurant with less than 3 stars", "restaurants rated less than 3 stars"]}, "restaurant that has the least number of neighborhood": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string min) (string neighborhood)))", "paraphrases": ["which restaurant chain is found in the fewest neighborhoods", "retaurant with less number of neighbourhood", "which neighborhoods have the fewest restaurants", "what restaurant is in the least number of neighborhoods", "restaurant that has the least number of neighborhood", "restaurants that is in the least numbers of neighborhoods"]}, "restaurant whose neighborhood is midtown west and that has delivery": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.53) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string delivery)))", "paraphrases": ["restaurants with delivery in midtown west", "midtown west neighborhood that also deliveries", "restaurant in mid town west that deliver", "which restaurants in midtown west deliver", "restaurant whose neighborhood is midtown west and that has delivery"]}, "restaurant that has less than two neighborhood": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string <) (number 2)))", "paraphrases": ["find a restaurant in a neighborhood", "what restaurant is available in less than two neighborhoods", "restaurant that has less than two neighborhood", "restaurants found in less than two neighborhoods"]}, "restaurant whose cuisine is thai": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.55) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["thai restaurants", "what are some thai restaurants", "find a thai restaurant", "a thai restaurant"]}, "restaurant that takes reservations and that serves lunch": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.22) (name en.restaurant.26) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.55) (name en.restaurant.59) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string meals) (string =) en.food.lunch))", "paraphrases": ["what restaurant offers lunch and takes reservations", "restaurant that offers reservation facility and serves lunch", "restaurants with reservations and serves lunch", "hotels that can be booked in advance and offers lunch", "restaurants serving lunch that accept reservations", "restaurant that takes reservations and that serves lunch"]}, "meal that thai cafe not serves": {"denotation": "(list (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string !=) en.restaurant.thai_cafe))", "paraphrases": ["meal not served by thai cafe", "what meals dont the thai cafe serve", "what kind of meal does thai cafe not serve", "what is a meal that the thai cafe does not serve", "which meal does a thai cafe not serve"]}, "restaurant whose price rating is 2 dollar signs and whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.35) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["restaurant whose price rating is 2 dollar signs and whose star rating is 3 stars", "restaurants with 3 stars and 2 price rating", "hotel that has a price rating of 2 dollar signs and a 3 star rating", "which restaurants have price ratings of two dollar signs and star ratings of three stars", "what 3 star restaurants have a price rating of 2 dollar signs"]}, "restaurant whose star rating is 3 stars and whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.35) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["a three star restaurant thats mid priced", "what restaurant has 3 stars and has a 2 menu", "what 3 star rated restaurant has a price rating of 2 dollar signs", "restaurants rated 3 stars with a 2 dollar sign price rating", "which restaurants have a 3 star rating and 2 dollar price rating", "restaurant whose star rating is 3 stars and whose price rating is 2 dollar signs"]}, "restaurant whose price rating is at most 2 dollar signs or 3 dollar signs": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "paraphrases": ["restaurants with 3 or lower price rating", "restaurants that are at most 2 or 3 dollar price ratings", "which resturants have a price rating of at most two or three dollar signs", "list restaurants that are at or less than 2 or 3 dollar signs", "what restaurant has 3 or 2 menu items"]}, "restaurant that is good for groups and that is good for kids": {"denotation": "(list (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.53) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string kids)))", "paraphrases": ["what restaurants are kid and group friendly", "which restaurant appeals to kids and is good for group dining", "restaurant that is good for groups and that is good for kids", "a place that is good for groups and for kids", "restaurants good for groups and kids", "what restaurant is good for groups and kids"]}, "restaurant that has two neighborhood": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) (number 2)))", "paraphrases": ["restaurants with two neighborhood locations", "restaurants situated between neighborhoods", "what restaurant is found in two neighborhoods", "what restaurant is in two neighborhoods", "what restaurant has two neighborhoods"]}, "restaurant that serves lunch and whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.54) (name en.restaurant.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["what is a 3 star restaurant that serves lunch", "a three star restaurant that serves lunch", "what restaurants received 3 stars and serve lunch", "restaurant that serves lunch and whose star rating is 3 stars", "three star restaurants that serve lunch", "restaurants with 3 star ratings and that serve lunch"]}, "restaurant that has outdoor seating and that takes credit cards": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.58) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string credit)))", "paraphrases": ["an outdoor setting restaurant that takes credit cards", "what restaurants take credit cards and have outdoor settings", "which restaurants have outdoor seating and accept credit cards", "restaurant with outdoor seating that accepts credit cards", "what restaurants have outdoor seating and accept credit cards"]}, "restaurant whose star rating is smaller than star rating of thai cafe": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.16) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.56) (name en.restaurant.58) (name en.restaurant.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string star_rating)))))", "paraphrases": ["find a restaurant with less stars than the thai cafe", "what restaurants have lower ratings that thai cafe", "which resturant has a smaller star rating than thia cafe", "which restaurants have star ratings lower than the thai cafe", "restaurants with a smaller star rating than thai cafe"]}, "restaurant that has delivery and that takes credit cards": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string credit)))", "paraphrases": ["what restaurant offers delivery and accepts credit cards", "restaurant that has delivery and that takes credit cards", "restaurant that delivers and accepts credit cards", "restaurants which have delivery and take credit cards", "restaurants that take credit and deliver", "restaurants that have delivery and take credit cards"]}, "restaurant whose price rating is 2 dollar signs or 3 dollar signs": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.38) (name en.restaurant.42) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 2 en.dollar_sign) (number 3 en.dollar_sign))))", "paraphrases": ["restaurants with 2 or 3 price rating", "list all restaurants that have a price rating of 2 dollar signs or 3 dollar signs", "hotel which has a price rating of 2 dollar signs or 3 dollar signs", "restaurants in the 2 or 3 dollar sign price range", "restaurant with a 2 or 3 dollar price rating", "restaurant whose price rating is 2 dollar signs or 3 dollar signs"]}, "restaurant whose price rating is not 2 dollar signs": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string !=) (number 2 en.dollar_sign)))", "paraphrases": ["list all restaurants that have ratings above 2 ", "which restaurants have price ratings above or below two dollar signs", "what restaurant doesnt have a 2 dollar sign", "hotel that does not have a", "restaurants who have a price rating lower than 2 dollar signs"]}, "restaurant whose price rating is larger than 2 dollar signs or 3 dollar signs": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.7) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "paraphrases": ["restaurant whose price rating is larger than 2 dollar signs or 3 dollar signs", "restaurants with price rating above 3 dollar signs", "hotel which has a price rating of more than 2dollar or 3 dollar signs", "what restaurant has at least a 2 or 3 dollar sign rating", "restaurants with a price rating higher than 3 dollar signs", "which restaurants have price ratings higher than two or three dollar signs"]}, "cuisine that is cuisine of restaurant that takes reservations": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve))))", "paraphrases": ["restaurants that can be booked in advance", "what cuisines are offered by restaurants accepting reservations", "find the type of food of all restaurants that take reservations", "what restaurants take reservations", "cuisine that is cuisine of restaurant that takes reservations", "what cuisine does the restaurant with reservations have"]}, "cuisine that is cuisine of restaurant whose cuisine is thai": {"denotation": "(list (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai)))", "paraphrases": ["cuisine that is cuisine of restaurant whose cuisine is thai", "thai cuisine restaurant", "find all thai restaurants"]}, "restaurant that has the smallest price rating": {"denotation": "(list (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.3) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating))))", "paraphrases": ["which hotel has the least price rating", "cheapest restaurants", "restaurants rated least expensive", "what restaurant has the lower price rating", "restaurant whose price rating is smallest"]}, "restaurant that has delivery and whose cuisine is thai": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.20) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.40) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["what thai restaurant offers delivery", "thai restaurant that delievers", "restaurant that has delivery and whose cuisine is thai", "which thai restaurant has delivery", "restaurants whose cuisine is thai and that deliver"]}, "restaurant whose neighborhood is midtown west and that has take-out": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string takeout)))", "paraphrases": ["restaurants in midtown west that have takeout", "restaurants in midtown west that offer takeout", "restaurant whose neighborhood is midtown west and that has takeout"]}, "restaurant whose price rating is 2 dollar signs and that is good for groups": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.24) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.56) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string groups)))", "paraphrases": ["find a restaurant good for groups that has a 2 dollar price rating", "a group friendly restaurant that is medium priced", "what are some 2 dollar rated restaurants good for groups", "restaurant whose price rating is 2 dollar signs and that is good for groups", "which hotel has a price rating of 2 dollar signs and is good for group dining"]}, "restaurant whose star rating is at most 3 stars or 5 stars": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.star) (number 5 en.star)))))", "paraphrases": ["restaurants with 5 star and lower price ratings", "restaurants has rating below 3 stars", "list all restaurants that have lower stars than 3 star or 5 star", "restaurant whose star rating is at most 3 stars or 5 stars", "which restaurants are rated under 3 stars"]}, "average star rating of restaurant": {"denotation": "(list (number 2.500 en.star))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating))))", "paraphrases": ["what is the average star rating", "what is the average star rating of all restaurants", "what is the average restaurant star rating", "average star rating of restaurant"]}, "restaurant that serves lunch and that serves lunch": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string meals) (string =) en.food.lunch))", "paraphrases": ["which resturants serve lunch", "what restaurants offer lunch", "restaurants that serves lunch"]}, "restaurant that is good for groups and whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.46) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["restaurant that is good for groups and whose star rating is 3 stars", "find a 3 star restaurant that is good for groups", "3 star restaurants that take groups", "the 3 star restaurant is good for groups", "group friendly restaurants rated 3 stars"]}, "restaurant that has waiter service and that has delivery": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string delivery)))", "paraphrases": ["which restaurant has waiter and delivery service", "restaurant that has waiter service and that has delivery", "which restaurants deliver and have waiters", "which resturants with waiter service have delivery", "what restaurant offers delivery and has waiter service", "find a restaurant that has delivery as well as waiter service"]}, "restaurant that serves lunch and whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["what 2 dollar signs restaurant offers lunch", "restaurant that serves lunch and whose price rating is 2 dollar signs", "restaurant for lunch rated 2 dollar signs", "restaurants that serve lunch with a price rating of 2", "which restaurants serve lunch and have a 2 dollar sign price rating", "find restaurant with 2 dollar price rating that serves lunch"]}, "meal that restaurant that has outdoor seating serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor))))", "paraphrases": ["what meal is served at a restaurant with outdoor seating", "restaurants that has outdoor seating", "what is a meal from a restaurant with outdoor seating", "restaurants that have outdoor seating", "restaurant that has outdoor seating"]}, "restaurant whose price rating is at most 2 dollar signs": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 2 en.dollar_sign))))", "paraphrases": ["restaurant whose price rating is at most 2 dollar signs", "restaurants price rated 2 dollar signs or less", "restaurants with 2 and lower price rating", "restaurant which had a maximum of 2dollar sign price rating", "list all restaurants that is cheaper than 2 dollar signs", "restaurant with a price rating of 2 or under"]}, "restaurant that is good for groups and whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.47) (name en.restaurant.53) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["groupfriendly restaurants in midtown west", "restaurant in midtown west that is good for groups", "restaurant that is good for groups and whose neighborhood is midtown west", "restaurants for groups and is in midtown west", "what midtown west west restaurant is good for groups", "restaurant in the area of midtown west which is good for group dining"]}, "restaurant that has take-out and whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.50) (name en.restaurant.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["which two dollar sign rated restaurants have takeout", "a restaurant that has at least a two star rating and does takeout", "the restaurant with take out food is fairly inexpensive", "which restaurants with a 2 dollar price rating offer takeout", "what 2 dollar sign restaurant contains takeout"]}, "restaurant that takes reservations and whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.26) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.50) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["restaurants rated 2 dollar signs that take reservations", "which restaurant that takes reservations have a price rating of two dollar signs", "find a restaurant i can get reservations at that has a 2 dollar price rating", "what 2 dollar signs restaurant takes reservations", "hotel that can be booked in advance which has a price rating of 2 dollar signs"]}, "2 dollar signs or 3 dollar signs": {"denotation": "(list (number 2 en.dollar_sign) (number 3 en.dollar_sign))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))", "paraphrases": ["2 dollar signs or 3 dollar signs", "restaurants rated 2 or 3 dollar signs", "has a 2 or 3 dollar sign rating", "list all restaurants that have a price rating of 2 dollar signs or 3 star dollar signs", "restaurants with a 2 or 3 dollar sign price rating"]}, "restaurant that has take-out and that is good for kids": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.18) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string kids)))", "paraphrases": ["restaurants that are good for children and offer takeout", "restaurants with takeout that are kidfriendly", "a kid friendly take out restaurant", "what restaurants have takeout and are kidfriendly", "what restauarants are kid friendly and have takeout"]}, "restaurant whose cuisine is not thai": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string !=) en.cuisine.thai))", "paraphrases": ["what are some restaurants serving any cuisine except thai", "what are some restaurants that doesnt serve thai", "list all restaurants that is not thai", "name a restaurant that does not offer  thai food", "a restaurant that does not serve thai"]}, "restaurant that is good for kids": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)))", "paraphrases": ["what is a good kids restaurant", "where is a good restaurant to take kids", "which hotel is entertaining for kids"]}, "restaurant whose price rating is at least 2 dollar signs": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.38) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 2 en.dollar_sign))))", "paraphrases": ["what are some restaurants rated 2 dollar signs or more", "restaurants at least with a 2 dollar price rating", "what restaurant has 2 or greater dollar signs as its price rating", "list all restaurants that are at least 2 dollar signs", "restaurant with at least a 2 dollar price rating"]}, "neighborhood that is neighborhood of the least number of restaurant": {"denotation": "(list (name en.neighborhood.chelsea))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type))))", "paraphrases": ["what neighborhood has the least restaurants", "what neighborhood has the least amount of restaurants", "which neighboorhodd has the least number of resturants", "area that has the minimum number of restaurants", "neighborhood with the least number of restaurants"]}, "restaurant whose star rating is at most 3 stars": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.star))))", "paraphrases": ["restaurants with at least 3 stars rating", "what are some restaurants rated 3 dollar signs or less", "list all restaurants that are at least 3 stars", "find a 3 or fewer star restaurant", "3 star restraunts and under"]}, "neighborhood that is neighborhood of restaurant that is good for groups": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups))))", "paraphrases": ["neighborhood that is neighborhood of restaurant that is good for groups", "which neighborhood restaurant is good for a group of people", "what neighborhoods have restaurants that are good for large parties", "what restaurants in this neighborhood is group friendly", "what neighborhood has the most restaurants that are good for groups"]}, "restaurant that takes credit cards and that is good for groups": {"denotation": "(list (name en.restaurant.2) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.53) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string groups)))", "paraphrases": ["what restaurants serve groups and accept credit cards", "what group restaurant takes credit cards", "what resturant takes credit cards and is good for groups", "what restaurant is good for groups and takes credit cards", "which restaurants take credit and can accommodate a group"]}, "restaurant that serves more than two meal": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.54))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type))))", "paraphrases": ["what restaurant serves more than two meals", "restaurants that serve multiple meals", "restaurants with more than two meals", "which resturants serve more than two meals", "what restaurants serves more than just one meal"]}, "restaurant whose price rating is at least 2 dollar signs or 3 dollar signs": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.38) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.53) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "paraphrases": ["hotels that have a minimum  price rating of 2 dollar signs", "what restaurants have price ratings of 2 or 3 dollar signs", "which restaurants have a price rating of 2 to3 dollar signs", "restaurant whose price rating is at least 2 dollar signs or 3 dollar signs", "which resturants have a price rating of at least two or three dollar signs", "restaurants with price ratings between 2 and 3"]}, "restaurant whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.38) (name en.restaurant.50) (name en.restaurant.56) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["which restaurants are in the price rating level of two dollar signs", "list all 2 dollar signs restaurants", "restaurant with 2 dollar price rating sign", "restaurants with a 2 dollar sign price rating", "restaurants with a 2 dollar price rating", "restaurant whose price rating is 2 dollar signs"]}, "cuisine that is cuisine of restaurant whose price rating is 2 dollar signs": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign))))", "paraphrases": ["what cuisine does a 2 dollar sign price rating restaurant have", "a thai restaurant with medium pricing", "what restaurants have a rating of 2 dollar signs", "cuisine that is cuisine of restaurant whose price rating is 2 dollar signs", "which restaurant s cuisine has a price rating of 2 dollar signs"]}, "restaurant whose price rating is at least price rating of thai cafe": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string price_rating)))))", "paraphrases": ["what restaurant a price rating greater than or equal to the thai cafe", "what restaurants have the same price rating or better than thai cafe", "thai cafe with least price rating", "restaurants whose price rating is similar to that of thai cafe", "list all restaurants that have the same or better price rating than thai cafe"]}, "restaurant whose neighborhood is neighborhood that is neighborhood of thai cafe": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.23) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.54) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) en.restaurant.thai_cafe)))", "paraphrases": ["find a restaurant in the same neighborhood as the thai cafe", "name a restaurant in the neighbourhood of thai cafe", "restaurants in the neighborhoods that contain thai cafe", "restaurant whose neighborhood is neighborhood that is neighborhood of thai cafe"]}, "restaurant whose star rating is 3 stars and whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["what 3star restaurants are located in midtown west", "restaurants in midtown west rated 3 stars", "what midtown west restaurant has a 3 star rating", "three star restaurants in midtown west", "which restaurant in midtown west has a 3star rating", "restaurant whose star rating is 3 stars and whose neighborhood is midtown west"]}, "restaurant that takes reservations and that has outdoor seating": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.21) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.52) (name en.restaurant.55) (name en.restaurant.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string outdoor)))", "paraphrases": ["restaurant that takes reservations and that has outdoor seating", "restaurants with outdoor seating that takes reservations", "restaurants that take reservations with outdoor seating", "what restaurants offer outdoor seating and takes reservations", "which restaurants accept reservation and have outdoor seating", "what restaurant has outdoor seating and takes reservations"]}, "restaurant that takes reservations and whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.22) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.52) (name en.restaurant.55) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["hotel in midtown west that can be booked in advance", "what midtown west restaurant offers reservations", "restaurant in midtown west that accepts reservations", "restaurant that takes reservations and whose neighborhood is midtown west", "a midtown west resturant that takes reservations"]}, "restaurant that not serves lunch": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.40) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.6) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string !=) en.food.lunch))", "paraphrases": ["what is the restaurant that does not serve lunch", "what restaurant does not offer lunch", "restaurants that are not open for lunch", "restaurant that not serves lunch", "no lunch restaurant"]}, "neighborhood that is not neighborhood of thai cafe": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string !=) en.restaurant.thai_cafe))", "paraphrases": ["which neighborhoods is thai cafe not in", "what are the neighborhoods without thai cafes", "what is a neighborhood that doesnt have a thai cafe", "which neighborhood is not where that cafe is located"]}, "restaurant whose neighborhood is midtown west and that serves lunch": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.31) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.47) (name en.restaurant.51) (name en.restaurant.55) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string meals) (string =) en.food.lunch))", "paraphrases": ["restaurants in midtown west serving lunch", "restaurant that is around mid town west that offers lunch", "restaurant whose neighborhood is midtown west and that serves lunch", "midtown west restaurant that is open for lunch", "restaurants located in midtown west that also serve lunch"]}, "neighborhood that is neighborhood of restaurant whose cuisine is thai": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai)))", "paraphrases": ["what neighborhood has the most thai restaurants", "which is the thai restaurant in this neighbourhood", "neighborhood that is neighborhood of restaurant whose cuisine is thai", "which neighborhoods have thai restaurants", "what neighborhood is the thai restaurant in", "what is the neighborhood of the thai restaurant"]}, "restaurant that has the most number of neighborhood": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string max) (string neighborhood)))", "paraphrases": ["a restaurant around alot of neighborhoods", "restaurants with the most locations in the area", "what restaurant is in the most number of neighborhoods", "restaurant that has the most number of neighborhood", "which restaurant chain is found in the most neighborhoods"]}, "restaurant that is good for kids and that has delivery": {"denotation": "(list (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string delivery)))", "paraphrases": ["restaurants with delivery for kids", "hotel that suits the taste of kids and offers delivery services", "what restaurant is amenable to children and has delivery", "what restaurant has delivery and is good for kids", "what restaurants deliver that serve food good for kids"]}, "cuisine that is cuisine of thai cafe or pizzeria juno": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno)))", "paraphrases": ["cuisine like thai cafe pizzeria juno", "what kind of restaurants are thai cafe or pizzeria juno", "restaurants with similar food to thai cafe or pizzeria juno", "cuisine that is like thai cafe or pizzeria juno"]}, "restaurant whose star rating is at least 3 stars": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 3 en.star))))", "paraphrases": ["at least 3 star restaurants", "restaurants rated 3 stars or higher", "hotel which has a minimum of 3 star rating", "restaurant that has at least 3 star rating"]}, "neighborhood that is neighborhood of restaurant that has delivery": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery))))", "paraphrases": ["which neighborhoods have restaurants that deliver", "which neighborhood has restaurants that offer delivery", "neighborhood that is neighborhood of restaurant that has delivery", "what neighborhoods have restaurants that deliver", "what neighborhood contains restaurants that offer delivery", "what neighborhoods have restaurants that offer delivery"]}, "meal that restaurant that takes reservations serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve))))", "paraphrases": ["what is a meal served by a restaurant that accepts reservations", "restaurants that accepts reservations", "what meals do the restaurant with reservations serve", "what kind of meals are served by restaurants that take reservations"]}, "restaurant whose price rating is at most price rating of thai cafe": {"denotation": "(list (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.3) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string price_rating)))))", "paraphrases": ["restaurants with the same or lower price rating as thai cafe", "which restaurant has a price rating no higher than thai cafe", "find a restaurant with a price rating equal or less than the thai cafe", "which resturants have a price less than or equal to thai cafe"]}, "restaurant whose cuisine is thai and that has delivery": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.20) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.40) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string delivery)))", "paraphrases": ["what thai restaurant has delivery", "the thai restaurant has delivery", "restaurant whose cuisine is thai and that has delivery", "thai restaurants that deliver"]}, "restaurant whose cuisine is thai or italian": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.cuisine.thai en.cuisine.italian)))", "paraphrases": ["thai or italian restaurants", "list all thai or italian restaurants", "a thai or italian restaurant", "hotel with a thai or italian restaurant", "find a thai or italian restaurant"]}, "restaurant that has at least two neighborhood": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string >=) (number 2)))", "paraphrases": ["restaurants that are in two neighborhoods at least", "what restaurant is in multiple neighborhoods", "name a restaurant found in at least two neighborhoods"]}, "restaurant that has outdoor seating and that has take-out": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.30) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.44) (name en.restaurant.52) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string takeout)))", "paraphrases": ["restaurants with outdoor seating and takeout", "what restaurant offers an outdoot and takeout", "what takeout restaurant has outdoor seating", "restaurant that has the  take out facility and has outdoor seating", "which restaurants have outdoor seating and offer takeout"]}, "restaurant that has delivery and that takes reservations": {"denotation": "(list (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.22) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.55) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string reserve)))", "paraphrases": ["restaurant that has delivery and that takes reservations", "restaurants that can be booked in advance and that offers delivery services", "restaurant that does delivery and reservations", "what restaurant can i get reservations and get delivery from", "what restaurant offers delivery and takes reservations"]}, "restaurant whose star rating is 3 stars and whose cuisine is thai": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.25) (name en.restaurant.48) (name en.restaurant.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string cuisine) (string =) en.cuisine.thai))", "paraphrases": ["what thai restaurant has a 3 star rating", "thai restaurant which has a 3 star rating", "thai restaurants rated 3 stars", "restaurant whose star rating is 3 stars and whose cuisine is thai", "list all 3 star rated thai restaurants"]}, "restaurant whose star rating is at most star rating of thai cafe": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string star_rating)))))", "paraphrases": ["what thai restaurant has the highest star rating", "which restaurants are rated the same or below thai cafe", "restaurant whose star rating is at most star rating of thai cafe", "hotel  that that has the star rating of thai cafe", "restaurant with the same or less stars as the thai cafe", "restaurants with star ratings better or equal to thai cafe"]}, "restaurant that is good for kids and whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["which threestar rated restaurants are amenable to kids", "what 3 star restaurant is good for kids", "which 3 star restaurants are good for children", "restaurant that is at least 3 stars and kid friendly", "the 3 star restaurant is good for kids"]}, "neighborhood that is neighborhood of restaurant that takes credit cards": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit))))", "paraphrases": ["neighborhood that is neighborhood of restaurant that takes credit cards", "what neighborhood has restaurants that accept credit cards", "which neighborhoods have restaurants that take credit cards", "what neighborhood contains restaurants that accept credit cards", "which neighborhood restaurant takes credit cards"]}, "cuisine that is cuisine of restaurant that serves lunch": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch)))", "paraphrases": ["list by type of cuisine the restaurants that serve lunch", "what kind of cuisine offers lunch", "what is the cuisine of restaurants that serve lunch", "what kind of cuisine is found at the restaurants that serve lunch", "cuisine that is cuisine of restaurant that serves lunch"]}, "restaurant that takes reservations and that takes reservations": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.55) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string reserve)) (string reserve)))", "paraphrases": ["which restaurant can be booked in advance", "what restaurant takes resverations", "which restaurants accept reservations", "restaurant that takes reservations and that takes reservations", "restaurant that takes reservations", "accepts reservations"]}, "meal that restaurant that serves lunch serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch)))", "paraphrases": ["what meal does the restaurant serve for lunch", "what is a meal that a restaurant that is open for lunch serves", "restaurant with lunch menu", "what meals does this restaurant serve for lunch", "what meals do lunch serving restaurants serve"]}, "restaurant that serves meal that thai cafe serves": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.56) (name en.restaurant.58) (name en.restaurant.6) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) en.restaurant.thai_cafe)))", "paraphrases": ["what restaurant serves the same food as the thai cafe", "what kind of restaurant serves the same food as thai cafe", "restaurants that serve same meals as thai cafe", "what restaurants are similar to thai cafe", "what restaurant serves a meal similar to that found at the thai cafe"]}, "restaurant whose price rating is price rating of thai cafe": {"denotation": "(list (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.3) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string price_rating))))", "paraphrases": ["what is the price range for the thai restaurant", "restaurants with the same price rating as thai cafe", "restaurant with a price rating equal to thai cafe", "restaurant whose price rating is price rating of thai cafe", "which resturants have a price rating the same as the thai cafe"]}, "restaurant that is good for kids and that takes reservations": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.17) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.43) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string reserve)))", "paraphrases": ["what restaurant is kid friendly and takes reservations", "what restaurant offers reservations and is good for kids", "which restaurant is friendly towards children and takes reservations", "restaurant that is good for kids and that takes reservations", "family friendly restaurants that take reservations", "restaurants that can be booked in advance ant which de"]}, "restaurant that has waiter service and whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.38) (name en.restaurant.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["which restaurants have waiters and a price rating of two dollar signs", "which hotel has a price rating of 2 dollar signs and  waiter service facilities", "restaurants with waiters that have a price rating of 2 dollar signs", "what restaurant has waiter service and a 2 dollar sign rating", "restaurant that has waiter service and whose price rating is 2 dollar signs"]}, "restaurant that has take-out and that has take-out": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string takeout)))", "paraphrases": ["which restaurant has takeout service", "what restaurant offers takeout", "find a takeout restaurant"]}, "neighborhood that is neighborhood of restaurant that is good for kids": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids))))", "paraphrases": ["what is the neighborhood with the most restaurants that are good for kids", "a restaurant in a kid friendly neighborhood", "what neighborhoods have kidfriendly restaurants", "what neighborhood has good a good kids restaurant"]}, "restaurant that has outdoor seating and that takes reservations": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.21) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.52) (name en.restaurant.55) (name en.restaurant.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string outdoor)) (string reserve)))", "paraphrases": ["what restaurant offers outdoor seating and takes reservations", "which restaurant both has outdoor seating and takes reservations", "which restaurants with outdoor dining areas accept reservations", "restaurant that has outdoor seating and that takes reservations", "restaurant that can be booked in advance and has outdoor seating facilities", "what restaurant takes reservations and has outdoor seating"]}, "cuisine that is cuisine of restaurant that has waiter service": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter))))", "paraphrases": ["what is the cuisine of restaurants that have waiters", "what is the cuisine of the restaurant with waiter service", "what restaurants offer waiter serivce", "hotel that has the facility of waiter service", "restaurants with waiter service"]}, "restaurant that has waiter service and that has waiter service": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.3) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string waiter)) (string waiter)))", "paraphrases": ["a restaurant with waiter service", "what restaurants use waiters", "restaurant that has waiter service and that has waiter service"]}, "restaurant whose star rating is 3 stars and that takes credit cards": {"denotation": "(list (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.4) (name en.restaurant.46) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string credit)))", "paraphrases": ["what 3 star restaurant takes credit cards", "hotel that has a 3 star rating and which accepts credit catds", "restaurant whose star rating is 3 stars and that takes credit cards", "3 star restaurants that accept credit cards", "three star restaurants that accept credit cards"]}, "cuisine that is cuisine of restaurant that is good for groups": {"denotation": "(list (name en.cuisine.french) (name en.cuisine.italian) (name en.cuisine.thai))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.cuisine) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cuisine)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups))))", "paraphrases": ["which restaurant is good for group dining", "what cuisine is good for groups at a restaurant", "what cuisine options are there among group friendly restaurants", "what is the cuisine of the restaurant that has group dining", "what kind of restaurant is good for groups", "cuisine that is cuisine of restaurant that is good for groups"]}, "price rating of thai cafe": {"denotation": "(list (number 1 en.dollar_sign))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string price_rating)))", "paraphrases": ["what is the price rating of thai cafe", "what is the price rating of the thai cafe", "price rating of thai cafe", "what is the priuce rating of thai cafe"]}, "restaurant that is good for groups and that has outdoor seating": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.53))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string outdoor)))", "paraphrases": ["which restaurants are good places for groups and offer outdoor seating", "which restaurants are good for groups and have outdoor seating", "restaurants that accomodate groups and have outdoor seating", "which restaurants have outdoor seating and are group friendly"]}, "restaurant whose star rating is larger than star rating of thai cafe": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.27) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.55) (name en.restaurant.8) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string star_rating)))))", "paraphrases": ["restaurant whose star rating is larger than star rating of thai cafe", "a restaurant with a better star rating than thai cafe", "hotel which has a higher star rating than thai cafe", "what restaurant has better star ratings than thai cafe", "restaurants rated more highly than thai cafe", "restaurants rated higher than thai cafe"]}, "30 reviews or 40 reviews": {"denotation": "(list (number 30 en.review) (number 40 en.review))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 30 en.review) (number 40 en.review)))", "paraphrases": ["restaurants with between 30 and 40 reviews", "what restaurants have at least 30 or 40 reviews", "restaurants that have between 30 and 40 reviews", "30 reviews or 40 reviews", "restaurants with at least 30 or 40 reviews"]}, "restaurant that serves lunch and whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.24) (name en.restaurant.31) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.47) (name en.restaurant.51) (name en.restaurant.55) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["what midtown west restaurant offers lunch", "what midtown west restaurant has lunch", "hotel in the area of midtown west which serves lunch", "what restaurants in midtown west serve lunch", "restaurant that serves lunch and whose neighborhood is midtown west", "restaurant that serves lunch in midtown west"]}, "restaurant that has take-out and that takes credit cards": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.21) (name en.restaurant.25) (name en.restaurant.30) (name en.restaurant.34) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.59) (name en.restaurant.8) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string credit)))", "paraphrases": ["which restaurants have takeout and accept credit cards", "restaurant that has takeout and that takes credit cards", "restaurant that has takeout with credit cards", "restaurants that accept credit cards and offer takeout", "restaurants with takeout and takes credit cards"]}, "restaurant whose neighborhood is midtown west and whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.24) (name en.restaurant.27) (name en.restaurant.35))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["what restaurant in midtown west has a rating of two dollar signs", "midtown west restaurants with 2 dollar signs price rating", "restaurants in the midtown west neighborhood that have a 2 dollar sign price rating", "which restaurants in midtown west have a price rating of 2 dollar signs", "what midtown west restaurants have a price rating of 2 dollar signs"]}, "restaurant that is good for groups and that takes credit cards": {"denotation": "(list (name en.restaurant.2) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.53) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string credit)))", "paraphrases": ["which restaurants are good for groups and accept credit cards", "what restaurant is group friendly and takes a credit card", "restaurant that is good for group dining and accepts credit cards", "restaurant that has room for groups and also takes credit cards", "what restaurant is good for groups and takes credit card"]}, "restaurant that serves lunch and that is good for groups": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.24) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string groups)))", "paraphrases": ["what groupfriendly restaurant serves lunch", "what restaurants offer lunch and is good for groups", "which resturants serve lunch and are good for groups", "restaurants that serves lunch and is large", "what restaurant serves lunch to groups"]}, "neighborhood of thai cafe": {"denotation": "(list (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.restaurant.thai_cafe (string neighborhood)))", "paraphrases": ["thai cafe in the neighborhood", "the thai cafe is in which neighborhood", "neighborhood of thai cafe", "what neighborhood is thai cafe located in"]}, "restaurant whose cuisine is thai and that serves lunch": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.25) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.55))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai) (string meals) (string =) en.food.lunch))", "paraphrases": ["list all thai restaurants offering lunch", "the restaurant serves lunch as well as thai food", "find a thai restaurant that serves lunch", "thai cuisine restaurant which serves lunch"]}, "restaurant whose price rating is smaller than 2 dollar signs": {"denotation": "(list (name en.restaurant.19) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.3) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.52) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string price_rating)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 2 en.dollar_sign))))", "paraphrases": ["what restaurant has less than a 2 dollar price rating", "what resturant has a price rating smaller than two dollar signs", "restaurants whose price rating is 1 dollar sign", "restaurants with dollar ratings less than 2", "restaurant whose price rating is smaller than 2 dollar signs", "list all restaurants that are cheaper than 2 dollar signs"]}, "restaurant whose price rating is 2 dollar signs and that serves lunch": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.29) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.35))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string meals) (string =) en.food.lunch))", "paraphrases": ["restaurants serving lunch with price rating of 2 dollar signs", "what 2 dollar signs offers lunch", "a restaurant rated 2 dollar signs for lunch", "restaurants that serve lunch and have a price rating of 2", "restaurants with 2 price rating that serve lunch", "restaurant whose price rating is 2 dollar signs and that serves lunch"]}, "meal that restaurant that has delivery serves": {"denotation": "(list (name en.food.breakfast) (name en.food.dinner) (name en.food.lunch))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.food) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string meals)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery))))", "paraphrases": ["meal served by a restaurant that delivers", "what meal does the restaurant deliver", "what is a meal that a restaurant with delivery service has", "restaurant that has delivery services", "what meals do delivery restaurants serve"]}, "restaurant that serves lunch and that is good for kids": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.17) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.31) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch) (string kids)))", "paraphrases": ["what restaurant is open at lunch and is good for kids", "what is a kid friendly restaurant that serves lunch", "which restaurant that welcomes kids offers lunch", "which resturant serves lunch and is good for kids", "find a good kids restaurant that serves lunch"]}, "restaurant whose star rating is larger than 3 stars or 5 stars": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.27) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.45) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.55) (name en.restaurant.8) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.star) (number 5 en.star)))))", "paraphrases": ["what restaurants have a rating better than 3 or 5 stars", "hotels that have a higher rating than 3 stars", "restaurant whose star rating is larger than 3 stars or 5 stars", "find a restaurant with more than 3 stars", "what are some restaurants that are rated between 3 and 5 stars"]}, "restaurant whose star rating is smaller than 3 stars or 5 stars": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.11) (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.16) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.19) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.21) (name en.restaurant.22) (name en.restaurant.23) (name en.restaurant.24) (name en.restaurant.25) (name en.restaurant.26) (name en.restaurant.27) (name en.restaurant.28) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.32) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.58) (name en.restaurant.59) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.star) (number 5 en.star)))))", "paraphrases": ["restaurants rated less than 5 stars", "what restaurant has less than 5 stars", "which restaurant has fewer than 3 or 5 stars", "which resturants have a star rating smaller than 3 or 5 stars", "list all restaurants that areworse than 3 or 5 star rated restaurants", "restaurant whose star rating is smaller than 3 stars or 5 stars"]}, "restaurant that has delivery and that has take-out": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.16) (name en.restaurant.18) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.29) (name en.restaurant.3) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string delivery)) (string takeout)))", "paraphrases": ["restaurants that have delivery and takeout", "restaurants that have takeout and deliver", "restaurants that offer takeout and delivery", "restaurants that deliver and offer takeout", "what restaurant offers takeout and delivery", "restaurant that has delivery and that has takeout"]}, "restaurant that is good for kids and that is good for kids": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.13) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.3) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.39) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.50) (name en.restaurant.52) (name en.restaurant.53) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string kids)))", "paraphrases": ["restaurants that are good for children", "restaurants that are kid friendly", "which restaurants are kid friendly", "which resturant is good for kids", "restaurant that is good for kids and that is good for kids"]}, "total star rating of restaurant": {"denotation": "(list (number 15 en.star))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating))))", "paraphrases": ["what is the star rating of the restaurant", "what is the total star rating of all restaurants", "what are the star ratings of this restaurant", "total star rating of restaurant"]}, "restaurant that is good for kids and that serves lunch": {"denotation": "(list (name en.restaurant.11) (name en.restaurant.17) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.31) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.48) (name en.restaurant.59) (name en.restaurant.7) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string meals) (string =) en.food.lunch))", "paraphrases": ["what restaurant is good for kids and offers lunch", "what restaurants are good for kids and serve lunch", "what good kids restaurant serves lunch", "a kid friendly restaurant for lunch", "restaurants for lunch for kids"]}, "restaurant that is good for groups and that has take-out": {"denotation": "(list (name en.restaurant.10) (name en.restaurant.12) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.3) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.42) (name en.restaurant.43) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string takeout)))", "paraphrases": ["restaurant that is good for groups and that has takeout", "find a good group restaurant with takeout", "restaurants with takeout that are good for large parties", "restaurants with takeout for groups", "what restaurants serve good food for groups and have takeout"]}, "restaurant that is good for kids and whose price rating is 2 dollar signs": {"denotation": "(list (name en.restaurant.13) (name en.restaurant.24) (name en.restaurant.26) (name en.restaurant.28) (name en.restaurant.35) (name en.restaurant.36) (name en.restaurant.50))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string kids)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "paraphrases": ["kid friendly restaurant with a price equal to 2 dollar signs", "2 dollar signed rated restaurants for kids", "what good kids restaurant has a 2 dollar price rating", "which restaurant with a price rating of two dollar signs is good for children"]}, "restaurant that takes credit cards and that serves lunch": {"denotation": "(list (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.30) (name en.restaurant.32) (name en.restaurant.34) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.47) (name en.restaurant.5) (name en.restaurant.59) (name en.restaurant.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string credit)) (string meals) (string =) en.food.lunch))", "paraphrases": ["restaurants that take credit cards and serve lunch", "restaurant that takes credit cards and that serves lunch", "what restaurant offers lunch and takes credit cards", "what restaurant can i eat lunch and pay with a credit card", "restaurants open for lunch that take credit cards", "restaurant that serves lunch and accepts credit cards"]}, "restaurant whose star rating is 3 stars": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.44) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.54) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)))", "paraphrases": ["a 3 star restaurant", "what restaurants have at least a 3 star rating", "find a 3 star restaurant", "restaurants rated 3 stars", "hotel which has a 3 star rating"]}, "restaurant that is good for groups and that has waiter service": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.15) (name en.restaurant.2) (name en.restaurant.20) (name en.restaurant.24) (name en.restaurant.3) (name en.restaurant.34) (name en.restaurant.37) (name en.restaurant.38) (name en.restaurant.39) (name en.restaurant.41) (name en.restaurant.46) (name en.restaurant.5) (name en.restaurant.56) (name en.restaurant.57) (name en.restaurant.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string groups)) (string waiter)))", "paraphrases": ["find a good group restaurant with waiter service", "what restaurant offers a waiter service and is good for groups", "whats a resturant thats good for groups and has waiter service", "what restaurants are good for groups that have waiter service", "which restaurant is good for a group and also has waiters"]}, "restaurant that has take-out and whose neighborhood is midtown west": {"denotation": "(list (name en.restaurant.14) (name en.restaurant.16) (name en.restaurant.2) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.4) (name en.restaurant.41) (name en.restaurant.43) (name en.restaurant.51) (name en.restaurant.52) (name en.restaurant.pizzeria_juno))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string takeout)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["take out restaurant in midtown west", "restaurant with takeout in midtown west", "what midtown west restaurant offers takeout", "what midtown west restaurant can i get takeout from"]}, "restaurant whose star rating is at least 3 stars or 5 stars": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.13) (name en.restaurant.14) (name en.restaurant.15) (name en.restaurant.17) (name en.restaurant.18) (name en.restaurant.22) (name en.restaurant.25) (name en.restaurant.27) (name en.restaurant.30) (name en.restaurant.31) (name en.restaurant.33) (name en.restaurant.35) (name en.restaurant.4) (name en.restaurant.40) (name en.restaurant.41) (name en.restaurant.44) (name en.restaurant.45) (name en.restaurant.46) (name en.restaurant.48) (name en.restaurant.49) (name en.restaurant.5) (name en.restaurant.50) (name en.restaurant.51) (name en.restaurant.54) (name en.restaurant.55) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.7) (name en.restaurant.8) (name en.restaurant.9) (name en.restaurant.pizzeria_juno) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string star_rating)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 3 en.star) (number 5 en.star)))))", "paraphrases": ["restaurants with 3 to 5 star ratings", "restaurant whose star rating is at least 3 stars or 5 stars", "restaurant that is rated 3 to 5 stars", "which restaurants are rated between 3 and 5 stars", "list all restaurants with 3 or 5 star ratings"]}, "restaurant whose star rating is 3 stars and that is good for groups": {"denotation": "(list (name en.restaurant.12) (name en.restaurant.46) (name en.restaurant.57) (name en.restaurant.6) (name en.restaurant.9) (name en.restaurant.thai_cafe))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string groups)))", "paraphrases": ["groupfriendly restaurants that are rated 3 stars", "which restaurant with a star rating of three is good for groups", "name a hotel which has a three star rating and good for group dining", "restaurant whose star rating is 3 stars and that is good for groups", "a 3 star resturnt that has room for groups"]}}