{"article whose venue is annals of statistics": {"denotation": "(list (name en.article.1) (name en.article.11) (name en.article.13) (name en.article.15) (name en.article.16) (name en.article.18) (name en.article.20) (name en.article.21) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.27) (name en.article.28) (name en.article.30) (name en.article.33) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.39) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.5) (name en.article.50) (name en.article.55) (name en.article.59) (name en.article.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics))", "paraphrases": ["what are some articles about annals of statistics", "find an article in the annals of statistics venue"]}, "venue that is venue of article whose venue is annals of statistics": {"denotation": "(list (name en.venue.annals_of_statistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics)))", "paraphrases": ["find a venue of an article in annals of statistics", "publications that contains articles that are also published in annals of statistics", "name articles in annals of statistics"]}, "article whose publication date is 2004 and whose publication date is 2004": {"denotation": "(list (name en.article.41) (name en.article.46))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string publication_date) (string =) (date 2004 -1 -1)))", "paraphrases": ["what article was published in 2004", "article that is published in 2004", "articles published in 2004"]}, "person that is author of article whose venue is annals of statistics": {"denotation": "(list (name en.person.efron) (name en.person.lakoff))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics)))", "paraphrases": ["who is the author of whose venue is annals of statistics", "find an author of an article in annals of statistics", "authors of articles published in annals of statistics", "name the author whose article has its venue as annals of statistics", "what author wrote about annals of statistics"]}, "number of venue": {"denotation": "(list (number 2 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type))))", "paraphrases": ["what is the venues number", "how many journals are there", "number of publications"]}, "article whose author is efron and whose publication date is 2004": {"denotation": "(list (name en.article.41))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string publication_date) (string =) (date 2004 -1 -1)))", "paraphrases": ["article published by efron in 2004", "what article was written by efron and has a publication date of 2004", "article whose author is efron and whose publication date is 2004", "which article was published in 2004 authored by efron", "articles by efron published in 2004"]}, "article that has the largest publication date": {"denotation": "(list (name en.article.16) (name en.article.17) (name en.article.27) (name en.article.30) (name en.article.32) (name en.article.51) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date))))", "paraphrases": ["article that has the largest publication date", "an article with the latest publication date", "most recently published article", "articles published most recently", "article published most recently", "what is the newest published article"]}, "person that is author of the most number of article": {"denotation": "(list (name en.person.efron) (name en.person.lakoff))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["which author has written the most articles", "what author has written the most articles", "who wrote the most articles", "author with the most number of articles"]}, "article whose author is not efron": {"denotation": "(list (name en.article.1) (name en.article.13) (name en.article.15) (name en.article.19) (name en.article.2) (name en.article.22) (name en.article.24) (name en.article.27) (name en.article.29) (name en.article.3) (name en.article.35) (name en.article.43) (name en.article.44) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.58) (name en.article.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string !=) en.person.efron))", "paraphrases": ["name some articles that are not written by efron", "articles not authored by efron", "articles not written by efron", "find any article that efron didnt write"]}, "article whose publication date is smaller than 2004": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.14) (name en.article.15) (name en.article.18) (name en.article.2) (name en.article.24) (name en.article.26) (name en.article.29) (name en.article.33) (name en.article.40) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.48) (name en.article.5) (name en.article.50) (name en.article.6) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "paraphrases": ["find an article published before 2004", "what article has a publication date earlier than 2004", "articles published before 2004"]}, "venue that is venue of article that multivariate data analysis cites": {"denotation": "(list (name en.venue.annals_of_statistics) (name en.venue.computational_linguistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "paraphrases": ["publisher of article citing multivariate data analysis", "venue of article that cites multivariate data analysis", "venue of article that multivariate data analysis cites", "name a publication containing an article about multivariate data analysis", "what is the venue of an article cited by multivariate data analysis", "what is the venue of an article that cites multivariate data analysis", "venues of articles cited by multivariate data analysis", "what venue contains the article about city multivariate data analysis"]}, "article whose publication date is smaller than publication date of multivariate data analysis": {"denotation": "(list (name en.article.1) (name en.article.14) (name en.article.15) (name en.article.18) (name en.article.2) (name en.article.24) (name en.article.26) (name en.article.29) (name en.article.33) (name en.article.43) (name en.article.48) (name en.article.5) (name en.article.50) (name en.article.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string publication_date)))))", "paraphrases": ["article whose publication date is smaller than publication date of multivariate data analysis", "article published before multivariate data analysis", "what article was written before the publication date of articles about multivariate data analysis", "what article was published before multivariate data analysis", "articles published before multivariate data analysis"]}, "article that won an award": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award)))", "paraphrases": ["articles that have won an award", "what article won an award", "award winning article"]}, "article that multivariate data analysis cites and whose publication date is 2004": {"denotation": "(list (name en.article.46))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string publication_date) (string =) (date 2004 -1 -1)))", "paraphrases": ["article cited by multivariate data analysis and published in 2004", "an article that cites multivariate data analysis published in 2004", "articles cited by multivariate data analysis published in 2004", "what article about multivariate data analysis was published in 2004", "name an article from 2004 about multivariate data analysis", "article citing multivariate data analysis published in 2004", "article that cites multivariate data analysis and whose publication date is 2004", "what article published in 2004 was cited by multivariate data analysis"]}, "article that has the smallest publication date": {"denotation": "(list (name en.article.18) (name en.article.29) (name en.article.48) (name en.article.50))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date))))", "paraphrases": ["earliest published article", "article that has the smallest publication date", "what article has the oldest publication date", "what is the earliest published article", "first published article", "what is the article with the oldest publication date"]}, "venue that is venue of the most number of article": {"denotation": "(list (name en.venue.annals_of_statistics) (name en.venue.computational_linguistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["publication that has included the most articles", "what venue has the most articles", "what venue is about the most number of articles", "venues that have published the most articles", "venue in most of the articles"]}, "article that has at least two author": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string >=) (number 2)))", "paraphrases": ["find an article with two or more authors", "what article has at least two authors", "articles written by at least two authors", "articles that have a minimum of two authors", "articles with two or more authors"]}, "venue that is venue of multivariate data analysis and that is venue of multivariate data analysis": {"denotation": "(list (name en.venue.computational_linguistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) en.article.multivariate_data_analysis) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["what is the venue of multivariate data analysis", "what venue can you find multivariate data analysis in", "what publications contain multivariate data analysis"]}, "person that is author of article whose author is efron": {"denotation": "(list (name en.person.efron) (name en.person.lakoff))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron)))", "paraphrases": ["find an additional author to an efron article", "who is the other author for the article written by efron", "what articles are written by efron", "who has coauthored articles with efron"]}, "article that the most number of article cites": {"denotation": "(list (name en.article.10))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["articles cited by the most articles", "which article is cited by the most number of articles", "which article is mentioned in most number of articles", "what article was cited the most", "what article has the most number of articles cited"]}, "article that multivariate data analysis cites and whose author is efron": {"denotation": "(list (name en.article.14) (name en.article.28) (name en.article.37) (name en.article.4) (name en.article.49))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string author) (string =) en.person.efron))", "paraphrases": ["article written by efron that is cited by multivariate data analysis", "articles citing multivariate data analysis written by efron", "what efron article is cited in multivariate data analysis", "articles cited by multivariate data analysis and written by efron", "article that citesmultivariate data analysis by author efron", "who is the author of the article that cites multivariate data analysis", "article citing multivariate data analysis by efron", "which efron article cites multivariate data analysis", "what article by efron cites multivariate data analysis"]}, "article that at least two article cites": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["what articles cites two other articles", "articles cited by two or more articles", "articles that cites at least two article", "what article is cited at least twice", "article that at least two article cites", "articles that mention two or more cities"]}, "venue that is venue of two article": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["what is a venue of two articles", "publication that two articles are published in", "venue with two article published", "venue of two articles", "venue of two article", "venues of two articles", "what venue has two articles", "which publication contains two articles"]}, "person that is author of at least two article": {"denotation": "(list (name en.person.efron) (name en.person.lakoff))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["which authors have written two or more articles", "name an author of at least two articles", "what author wrote two or more articles", "author who have written two or more articles", "which author has published at least two articles"]}, "venue that is venue of less than two article": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["what venue has less than two articles", "what is a venue with fewer than two articles", "publisher of only one article", "which venue is of less than two article", "venues of fewer than two articles", "name a publication with fewer than two articles", "venue of only one article", "what venue has fewer than two articles", "venues with less than two articles", "what venue has under two articles"]}, "person that is author of at most two article": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["author with at most two article", "name a person who has written no more than two articles", "author of one or two articles", "writers of two articles at most", "writers of two or fewer articles", "author with maximum two article", "author of at most two articles", "name someone who has written no more than two articles", "which author wrote two articles maximum", "who authored two or fewer articles"]}, "article whose publication date is 2004 and whose author is efron": {"denotation": "(list (name en.article.41))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string author) (string =) en.person.efron))", "paraphrases": ["articles written by efron published in 2004", "what article written by efron has a publication date of 2004", "article written by efron and published in 2004", "article whose publication date is 2004 and whose author is efron", "efron articles published in 2004"]}, "article whose publication date is at least 2004 or 2010": {"denotation": "(list (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.16) (name en.article.17) (name en.article.19) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.25) (name en.article.27) (name en.article.28) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.41) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.49) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.7) (name en.article.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "paraphrases": ["articles published from 2004 to 2010", "articles published after 2004 or after 2010", "find an article published in 2004 or later"]}, "article whose author is efron": {"denotation": "(list (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.14) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.20) (name en.article.21) (name en.article.23) (name en.article.25) (name en.article.26) (name en.article.28) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.45) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron))", "paraphrases": ["what article is written by efron", "articles by efron", "which articles author is efron", "all articles by efron", "find an efron article"]}, "article that not cites multivariate data analysis": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.18) (name en.article.19) (name en.article.20) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string !=) en.article.multivariate_data_analysis))", "paraphrases": ["articles that do not cite multivariate data analysis", "article that does not reference multivariate data analysis", "what article doesnt cite multivariate data analysis", "what article does not cite multivariate data analysis"]}, "article whose publication date is 2004 and whose venue is annals of statistics": {"denotation": "(list (name en.article.41) (name en.article.46))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string venue) (string =) en.venue.annals_of_statistics))", "paraphrases": ["article with publication date as 2004 and has the venue as annals of statistics", "what article about annals and statistics has a publication ate of 2004", "find an article published in 2004 in annals of statistics", "which article was published in 2004 at annals of statistics"]}, "article that more than two article cites": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["article cited more than twice", "article that cites three or more articles", "what article cites more than two other articles", "articles that cite more than two article", "which articles cite more than two articles"]}, "article that has at most two venue": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string <=) (number 2)))", "paraphrases": ["articles found in at most two publications", "article that has maximum two venues", "articles published in two or fewer venues", "find an article with no more than two venues"]}, "article whose publication date is 2004 or 2010": {"denotation": "(list (name en.article.41) (name en.article.46))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1))))", "paraphrases": ["article published in 2004 or 2010", "what are some articles with publications dates between 2004 and 2010", "find an article published in either 2004 or 2010", "articles published in 2004 or 2010", "articles with their publication dates between 2004 and 2010"]}, "venue that is venue of more than two article": {"denotation": "(list (name en.venue.annals_of_statistics) (name en.venue.computational_linguistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["publications that have contained more than two articles", "what venue is of more than two articles", "find a venue with more than two articles in it", "what is the venue that is mentioned in more than two articles", "which venue was venue for more than two articles publication"]}, "article that has the least number of author": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string min) (string author)))", "paraphrases": ["articles with the least number of authors", "what article has the least authors", "what article has the least number of authors", "article that has the least number of author", "article with the fewest authors", "which article was written by minimum number of authors"]}, "article whose publication date is 2004 and that cites multivariate data analysis": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["what articles publication date is in 2004 and cites multivariate data analysis", "which article  that cites multivariate data analysis was published on 2004 ", "articles published in 2004 citing multivariate data analysis", "what 2004 article cites multivariate data analysis", "articles published in 2004 and citing multivariate data analysis", "name an article published in 2004 about multivariate data analysis", "what article from 2004 cites multivariate data analysis", "article published in 2004 and that cites multivariate data analysis"]}, "article that cites article whose venue is annals of statistics": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.40) (name en.article.42) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics)))", "paraphrases": ["article with the venue as annals of statistics", "what article cites an article from annals of statistics", "articles that cite articles published in annals of statistics", "any article that cites another article published in annals of statistics", "what article cites other articles about annals of statistics"]}, "person that is author of multivariate data analysis and that is author of multivariate data analysis": {"denotation": "(list (name en.person.efron) (name en.person.lakoff))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) en.article.multivariate_data_analysis) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["who is and author of multivariate data analysis", "who is the author of a multivariate data analysis", "name someone who has written an article about multivariate data analysis", "writer of multivariate data analysis", "author of multivariate data analysis", "who wrote multivariate data analysis more than once", "name a person who is the author of an article about multivariate data analysis", "who is the author of multivariate date analysis articles", "who is someone who has authored articles about multivariate data analysis"]}, "article whose venue is annals of statistics and whose publication date is 2004": {"denotation": "(list (name en.article.41) (name en.article.46))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string publication_date) (string =) (date 2004 -1 -1)))", "paraphrases": ["articles published in annals of statistics in 2004", "what articles are published in annals of statistics and in the year 2004", "what article discusses annals of statistics and whose publication date was 2004", "find an article in annals of statistics that was published in 2004"]}, "article whose publication date is at most publication date of multivariate data analysis": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.14) (name en.article.15) (name en.article.18) (name en.article.2) (name en.article.24) (name en.article.26) (name en.article.29) (name en.article.33) (name en.article.40) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.48) (name en.article.5) (name en.article.50) (name en.article.6) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string publication_date)))))", "paraphrases": ["article whose publication date is at most publication date of multivariate data analysis", "articles published contemporaneous to or before the multivariate data analysis", "articles published before the date of multivariate data analysis", "find an article published on or before multivariate data analysis", "articles that have a publication date close to the date of multivariate data analysis"]}, "article whose author is efron and whose venue is annals of statistics": {"denotation": "(list (name en.article.11) (name en.article.16) (name en.article.18) (name en.article.20) (name en.article.21) (name en.article.23) (name en.article.25) (name en.article.28) (name en.article.30) (name en.article.33) (name en.article.36) (name en.article.37) (name en.article.39) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.5) (name en.article.50) (name en.article.55) (name en.article.59) (name en.article.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string venue) (string =) en.venue.annals_of_statistics))", "paraphrases": ["what article was written by efron and discusses annals of statistics", "articles written by efron and published in the annals of statistics", "article authored by efron and has the annals of statistics as its venue"]}, "person that is author of more than two article": {"denotation": "(list (name en.person.efron) (name en.person.lakoff))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["who has written more than two articles", "what author has written more than two articles", "author of more than two articles", "writers of more than two articles"]}, "article whose publication date is larger than 2004": {"denotation": "(list (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.16) (name en.article.17) (name en.article.19) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.25) (name en.article.27) (name en.article.28) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.45) (name en.article.47) (name en.article.49) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.7) (name en.article.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "paraphrases": ["which article was published after 2004", "what article has a publication date greater than 2004", "what article was published after 2004"]}, "article that has the most number of venue": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string max) (string venue)))", "paraphrases": ["article found in the most publications", "what article was in the most venues", "articles published in the most venues", "article with the maximum number of venues", "what article has the most venues"]}, "article that cites multivariate data analysis": {"denotation": "(list (name en.article.17) (name en.article.2) (name en.article.21) (name en.article.3) (name en.article.36))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["multivariate data analysis cited articles"]}, "author of multivariate data analysis": {"denotation": "(list (name en.person.efron) (name en.person.lakoff))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string author)))", "paraphrases": ["who wrote multivariate data analysis", "who authored multivariate data analysis"]}, "article that cites at most two article": {"denotation": "(list (name en.article.10) (name en.article.18) (name en.article.31) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.43) (name en.article.48) (name en.article.49) (name en.article.6) (name en.article.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["articles that cities maximum two articles", "article that mentions at least two other articles", "article that cites two or fewer articles", "find an article that makes two or fewer citations"]}, "article that has less than two venue": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string <) (number 2)))", "paraphrases": ["articles found in less than two publications", "what article has fewer than two venues", "what article was in less than two venues", "article in less than two publications", "articles with a venue", "article that has less than two venue"]}, "article whose venue is venue of multivariate data analysis": {"denotation": "(list (name en.article.10) (name en.article.12) (name en.article.14) (name en.article.17) (name en.article.19) (name en.article.2) (name en.article.22) (name en.article.26) (name en.article.29) (name en.article.3) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.38) (name en.article.4) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.49) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string venue))))", "paraphrases": ["articles published in the same publication as multivariate data analysis", "find an article with the same venue as multivariate data analysis", "what article has a venue of multivariate data analysis", "articles published in multivariate data analysis", "article that cites multivariate data analysis"]}, "article that article that multivariate data analysis cites cites": {"denotation": "(list (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.14) (name en.article.16) (name en.article.17) (name en.article.19) (name en.article.21) (name en.article.24) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.31) (name en.article.36) (name en.article.38) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.43) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.51) (name en.article.52) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.7) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "paraphrases": ["an article that cites multivariate data analysis", "what is an article cited in a publication about multivariate data analysis", "what article cites an article cited in multivariate data analysis"]}, "article that cites multivariate data analysis and that cites multivariate data analysis": {"denotation": "(list (name en.article.17) (name en.article.2) (name en.article.21) (name en.article.3) (name en.article.36))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string cites) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["articles that cite multivariate data analysis", "article that cites the multivariate data analysis article", "find an article that cites multivariate data analysis"]}, "article whose venue is not annals of statistics": {"denotation": "(list (name en.article.10) (name en.article.12) (name en.article.14) (name en.article.17) (name en.article.19) (name en.article.2) (name en.article.22) (name en.article.26) (name en.article.29) (name en.article.3) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.38) (name en.article.4) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.49) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string !=) en.venue.annals_of_statistics))", "paraphrases": ["articles not published in the annals of statistics", "what are some articles unrelated to annals of statistics", "find an article not in annals of statistics", "articles not published in annals of statistics", "article not in annals of statistics"]}, "article that cites less than two article": {"denotation": "(list (name en.article.18) (name en.article.31) (name en.article.43) (name en.article.6) (name en.article.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["what article sites only one other article", "which articles cite less than two articles", "articles with less than two references", "article that mentions one article", "what article has less than two citations"]}, "efron or lakoff": {"denotation": null, "formula": null, "paraphrases": []}, "annals of statistics or computational linguistics": {"denotation": "(list (name en.venue.annals_of_statistics) (name en.venue.computational_linguistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.venue.annals_of_statistics en.venue.computational_linguistics))", "paraphrases": ["list articles on annals of statistics or computational linguistics", "either annals of statistics or computational linguistics"]}, "article that multivariate data analysis cites and that multivariate data analysis cites": {"denotation": "(list (name en.article.13) (name en.article.14) (name en.article.28) (name en.article.3) (name en.article.37) (name en.article.4) (name en.article.46) (name en.article.49) (name en.article.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["name an article citing multivariate data analysis", "an article that multivariate data analysis cites", "article that multivariate data analysis cites", "articles cited by studies using multivariate data analysis"]}, "article whose publication date is larger than 2004 or 2010": {"denotation": "(list (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.16) (name en.article.17) (name en.article.19) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.25) (name en.article.27) (name en.article.28) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.45) (name en.article.47) (name en.article.49) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.7) (name en.article.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "paraphrases": ["find an article published after 2004", "articles published after 2010", "article published after 2004"]}, "article whose venue is annals of statistics or computational linguistics": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.venue.annals_of_statistics en.venue.computational_linguistics)))", "paraphrases": ["find an article in either annals of statistics or computational linguistics", "what article is about a venue of annals of statistics or computational linguistics", "articles published in annals of statistics or computational linguistics"]}, "article that less than two article cites": {"denotation": "(list (name en.article.2) (name en.article.33) (name en.article.50))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["article cited by less than two articles", "article that cites a single article", "articles cited by fewer than two articles", "what article cites less than two other articles", "what article has been cited less than twice"]}, "article that cites the least number of article": {"denotation": "(list (name en.article.18) (name en.article.31) (name en.article.43) (name en.article.6) (name en.article.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string min) (string cites) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["which article cites the fewest articles", "article that cites the least number of article", "article that references the least number of articles", "articles with fewest citations", "what article cites the fewest articles", "find the article with the fewest citations"]}, "person that is author of multivariate data analysis": {"denotation": "(list (name en.person.efron) (name en.person.lakoff))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["who is the author of multivariate data analysis", "who is the author of multivariate data analysis article"]}, "person that is author of article whose publication date is 2004": {"denotation": "(list (name en.person.efron) (name en.person.lakoff))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "paraphrases": ["authors who published their works in 2004", "authors of articles published in 2004", "name an author whose publication date is 2004", "what author published an article in 2004", "writers who published in 2004"]}, "article that has more than two venue": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string >) (number 2)))", "paraphrases": ["articles published in more than two venues", "name an article found in more than two venues", "articles about more than two venues", "articles with more than two venues", "article with more than two venue", "which article was published  in more than two magazines", "article with more than two venues", "name an article found in more than two publications", "what article has over two venues"]}, "article whose author is efron and that won an award": {"denotation": "(list (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.14) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.20) (name en.article.21) (name en.article.23) (name en.article.25) (name en.article.26) (name en.article.28) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.45) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string won_award)))", "paraphrases": ["articles that won an award written by efron", "awardwinning articles by efron", "what article is written by efron and won an award", "what efron article has won an award", "award winning article published by efron"]}, "article whose publication date is 2004 and that multivariate data analysis cites": {"denotation": "(list (name en.article.46))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["articles published in 2004 cited by multivariate data analysis", "article whose publication date is 2004 and cited by multivariate data analysis", "articles published in 2004 cited in multivariate data analysis", "what 2004 article was cited by multivariate data analysis", "articles published in 2004 and cited by multivariate data analysis"]}, "article that won an award and whose venue is annals of statistics": {"denotation": "(list (name en.article.1) (name en.article.11) (name en.article.13) (name en.article.15) (name en.article.16) (name en.article.18) (name en.article.20) (name en.article.21) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.27) (name en.article.28) (name en.article.30) (name en.article.33) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.39) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.5) (name en.article.50) (name en.article.55) (name en.article.59) (name en.article.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award)) (string venue) (string =) en.venue.annals_of_statistics))", "paraphrases": ["which article won an award and has its venue as annals of statistics", "articles that won an award published in annals of statistics", "what award winning article has annals of statistics as a venue", "what article won an award and is about annals of statistics"]}, "person that is author of article that multivariate data analysis cites": {"denotation": "(list (name en.person.efron) (name en.person.lakoff))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "paraphrases": ["name an author of an article about multivariate data analysis", "who wrote an article citing multivariate data analysis", "author of article that cites multivariate data analysis", "author citing multivariate data analysis in article", "writer of articles cited by multivariate data analysis", "name the author of an article about multivariate data analysis", "who wrote an article about city multivariate data analysis", "who is the author of an article cited by multivariate data analysis", "author of article cited by multivariate data analysis", "writers of articles citing multivariate data analysis"]}, "article that has two venue": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) (number 2)))", "paraphrases": ["what is an article that has two venues", "article with two venues", "name an article found in two venues", "name an article found in two publications", "what article was in two venues", "articles published in two venues", "article with two publishers", "articles published in multiple places", "articles with two venues", "find me an article that is in two venues"]}, "number of article": {"denotation": "(list (number 60 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["what is the number of the article", "what is the date of the article"]}, "publication date of multivariate data analysis": {"denotation": "(list (date 2003 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string publication_date)))", "paraphrases": ["publication date of multivariate data analysis", "when was multivariate data analysis published", "what is the publication date of a multivariate data analysis article", "what is the date of publication  for multivariate data analysis"]}, "venue that is venue of article that cites multivariate data analysis": {"denotation": "(list (name en.venue.annals_of_statistics) (name en.venue.computational_linguistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "paraphrases": ["what venues cite multivariate data analysis", "what article is about multivariate data analysis", "venue that is venue of article that cites multivariate data analysis", "publications containing articles that cite multivariate data analysis"]}, "article that won an award and whose publication date is 2004": {"denotation": "(list (name en.article.41) (name en.article.46))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award)) (string publication_date) (string =) (date 2004 -1 -1)))", "paraphrases": ["what article won an award and has a publication date of 2004", "articles published in 2004 that have won an award", "articles publised in 2004 that won an award"]}, "article that article whose author is efron cites": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron)))", "paraphrases": ["article whose author is efron", "name an article by the author efron", "what article is cited by an efron article", "articles written by efron cites", "articles cited by efron", "name an article by efron", "articles cited in articles by efron", "article cited by article written by efron", "the article cites that the author is efron"]}, "article that cites multivariate data analysis and whose publication date is 2004": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string publication_date) (string =) (date 2004 -1 -1)))", "paraphrases": ["name an article about multivariate data analysis published in 2004", "articles published in 2004 that cite multivariate data analysis", "article that cites multivariate data analysis that is published in 2004", "article published in 2004 that cites multivariate data analysis", "what article published in 2004 cited multivariate data analysis", "what multivariate data analysis city articles were published after 2004", "articles that cite multivariate data analysis published in 2004"]}, "article that article that won an award cites": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award))))", "paraphrases": ["name an article that won an award", "what article was cited by the award winning article", "articles cited by awardwinning articles", "an article that won award cites another article", "articles cited by award winning articles", "article cited by award winning article", "which article cites an awardwinning article", "article citing awardwinning article"]}, "article that multivariate data analysis cites and that cites multivariate data analysis": {"denotation": "(list (name en.article.3))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string cites) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["what are the articles that multivariate data analysis cites", "what article exchanged citations with multivariate data analysis", "articles that cite multivariate data analysis and are cited in multivariate data analysis", "article that cites multivariate data analysis"]}, "article that has at most two author": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string <=) (number 2)))", "paraphrases": ["articles written by two authors at most", "articles written by one or two authors", "articles with one or two authors", "find an article with no more than two authors", "what article has two authors or less", "article that has at most two author"]}, "article that article that cites multivariate data analysis cites": {"denotation": "(list (name en.article.12) (name en.article.14) (name en.article.15) (name en.article.17) (name en.article.18) (name en.article.20) (name en.article.23) (name en.article.28) (name en.article.29) (name en.article.32) (name en.article.34) (name en.article.35) (name en.article.40) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.52) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.6) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "paraphrases": ["name an article about multivariate data analysis", "which article cites multivariate data analysis", "what article cites multivariate data analysis", "what article did the article that cited multivariate data analysis cite", "article that cites multivariate data analysis"]}, "article that multivariate data analysis cites and that won an award": {"denotation": "(list (name en.article.13) (name en.article.14) (name en.article.28) (name en.article.3) (name en.article.37) (name en.article.4) (name en.article.46) (name en.article.49) (name en.article.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string won_award)))", "paraphrases": ["what award winning article was cited by multivariate data analysis", "articles on multivariate data analysis that won an award", "articles cited by multivariate data analysis that won awards", "awardwinning articles cited in multivariate data analysis", "articles cited by multivariate data analysis and that won awards", "name an article about multivariate data analysis that has won an award", "award winning article cited bymultivariate data analysis"]}, "article that multivariate data analysis not cites": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.29) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.38) (name en.article.39) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.47) (name en.article.48) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string !=) en.article.multivariate_data_analysis))", "paraphrases": ["article not citing multivariate data analysis", "name an article that is not about multivariate data analysis", "what is an article that does not cite multivariate data analysis", "articles that does not cites multivariate data analysis", "what article is not cited in multivariate data analysis", "which article does not cite multivariate data analysis", "articles not cited by multivariate data analysis", "article that does not cite multivariate data analysis"]}, "article whose publication date is at least 2004": {"denotation": "(list (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.16) (name en.article.17) (name en.article.19) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.25) (name en.article.27) (name en.article.28) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.41) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.49) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.7) (name en.article.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "paraphrases": ["what article has a publication date of at least 2004", "article whose publication date is at least 2004", "what article was published in 2004 or later", "articles published 2004 or more recent", "articles published in or after 2004"]}, "article whose publication date is smaller than 2004 or 2010": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "paraphrases": ["what article was published before 2010"]}, "article whose venue is annals of statistics and that multivariate data analysis cites": {"denotation": "(list (name en.article.13) (name en.article.28) (name en.article.37) (name en.article.46))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["articles published in annals of statistics cited by multivariate data analysis", "what article is in annals of statistics and is cited by multivariate data analysis", "article citing multivariate data analysis published in annals of statistics", "articles published in annals of statistics and cited by multivariate data analysis", "article with venue anals of statistics that multivariate data analysis cites"]}, "article that the least number of article cites": {"denotation": "(list (name en.article.33))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["which article is mentioned in least number of other articles", "article that cites the fewest articles", "article cited the fewest times", "what article makes the fewest citations", "article that the least number of article cites"]}, "article that article whose publication date is 2004 cites": {"denotation": "(list (name en.article.4) (name en.article.44) (name en.article.47) (name en.article.51) (name en.article.57))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "paraphrases": ["what article cites a 2004 article", "article whose publication date is 2004", "articles cited by articles published in 2004", "name an article not published in 2004", "articles about cities published after 2004", "name an article published in 2004", "articles published in 2004 citations", "what article was cited by a 2004 article", "article cited by article which is published in 2004"]}, "venue that is venue of article that won an award": {"denotation": "(list (name en.venue.annals_of_statistics) (name en.venue.computational_linguistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award))))", "paraphrases": ["find a venue of an award winning article", "venue that won an award based on the article", "award winning article publication venue", "what venue is about an article that won an award"]}, "article that cites multivariate data analysis and that multivariate data analysis cites": {"denotation": "(list (name en.article.3))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["article cited by as well as cites multivariate data analysis", "what article discusses the multivariate data analysis of cities", "articles citing multivariate data analysis and cited by multivariate data analysis", "an article citing multivariate data analysis"]}, "article that cites multivariate data analysis and whose author is efron": {"denotation": "(list (name en.article.17) (name en.article.21) (name en.article.36))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string author) (string =) en.person.efron))", "paraphrases": ["what article was written by efron and cities multivariate data analysis", "article written by efron that references multivariate data analysis", "articles written by efron citing multivariate data analysis"]}, "article whose publication date is larger than publication date of multivariate data analysis": {"denotation": "(list (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.16) (name en.article.17) (name en.article.19) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.25) (name en.article.27) (name en.article.28) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.41) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.49) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.7) (name en.article.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string publication_date)))))", "paraphrases": ["find an article published after multivariate data analysis", "articles published after multivariate data analysis", "what article has a publication date greater than that of multivariate data analysis"]}, "article that two article cites": {"denotation": "(list (name en.article.11) (name en.article.15) (name en.article.20) (name en.article.25) (name en.article.32) (name en.article.45))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["what article has two other articles cited within it", "article cited by two articles", "what article was cited twice", "articles cited by two other articles", "articles that are cited by two articles"]}, "article that cites article that multivariate data analysis cites": {"denotation": "(list (name en.article.1) (name en.article.11) (name en.article.12) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.19) (name en.article.2) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.35) (name en.article.39) (name en.article.4) (name en.article.42) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "paraphrases": ["articles citing articles cited in multivariate data analysis", "name an article about multivariate data analysis", "what article cites an article cited by multivariate data analysis", "article that cites article that multivariate data analysis cites", "what article cites an article that cites multivariate data analysis", "articles that city multivariate data analysis articles", "article that cites multivariate data analysis", "articles citing articles cited by multivariate data analysis"]}, "person that is author of two article": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["writers of two articles", "name an author of two articles", "who is the author of the two articles", "what author wrote two articles", "writer of two articles", "author of two articles", "name a person who has written two articles", "which author wrote two articles"]}, "venue that is venue of at least two article": {"denotation": "(list (name en.venue.annals_of_statistics) (name en.venue.computational_linguistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["venue that is mentioned in at least  two articles", "what venue has two or more articles", "publications with at least two articles", "venues that have published at least two articles", "what venue is about at least two articles"]}, "article that cites more than two article": {"denotation": "(list (name en.article.1) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.42) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["article that cites more than two article", "articles that mention three or more cities", "find an article that cites more than two articles", "articles that cite more than two articles", "what article cites other articles", "article citing more than two articles"]}, "venue that is venue of at most two article": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["venue of one or two articles", "venues that have published at most two articles", "venue of at most two article", "which venue has two articles maximum", "venues of two articles or fewer", "venue of maximum two articles", "name a venue of no more than two articles", "name a publication containing no more than two articles", "what venue has two or less articles", "what is the venue of at least two articles"]}, "article that at most two article cites": {"denotation": "(list (name en.article.11) (name en.article.15) (name en.article.2) (name en.article.20) (name en.article.25) (name en.article.32) (name en.article.33) (name en.article.45) (name en.article.50))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["article cited two or fewer times", "article that references one or two articles", "articles that cite two or fewer articles", "which articles cite two or fewer articles"]}, "article that cites multivariate data analysis and whose venue is annals of statistics": {"denotation": "(list (name en.article.21) (name en.article.36))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string venue) (string =) en.venue.annals_of_statistics))", "paraphrases": ["articles about a citys annals of statistics", "which is the article that cites multivariate data analysis that was published in the annals of statistics", "what article in annals of statistics cites multivariate data analysis", "article that cites multivariate data analysis whose venue is annals of statistics", "what article citing multivariate data analysis was in annals of statistics", "articles published in annals of statistics that cite multivariate data analysis", "name an article from the annals of statistics about multivariate data analysis", "name an article about multivariate data analysis from the annals of statistics", "an article on statistics that cites multivariate data analysis", "articles that cite multivariate data analysis in annals of statistics", "which annals of statistics article cites multivariate data analysis", "what annals of statistics article cites multivariate data analysis", "articles citing multivariate data analysis published in annals of statistics", "articles in the annals of statistics that cite multivariate data analysis"]}, "article that cites the most number of article": {"denotation": "(list (name en.article.16) (name en.article.17) (name en.article.21) (name en.article.45) (name en.article.51) (name en.article.59) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string max) (string cites) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["article that cites the most number of article", "articles that cite the most articles", "which article cites the most articles", "what article cites the most number of other articles", "what article makes the most citations", "article that references the most number of articles"]}, "article whose author is efron and whose author is efron": {"denotation": "(list (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.14) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.20) (name en.article.21) (name en.article.23) (name en.article.25) (name en.article.26) (name en.article.28) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.45) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string author) (string =) en.person.efron))", "paraphrases": ["find an article by efron", "article by efron", "articles authored by efron", "what is an article written by efron", "articles written by efron"]}, "article that has the least number of venue": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string min) (string venue)))", "paraphrases": ["articles published in the fewest places", "articles that has the minimum number of venues stated", "what article has the least number of venues", "what article has the least venues", "articles published in the fewest venues", "article that has the least number of venue"]}, "article that cites article whose author is efron": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron)))", "paraphrases": ["article that cites article whose author is efron", "articles that cite articles written by efron", "articles that cities articles by efron", "articles citing efron", "what article cites articles written by efron", "what article cites an efron article"]}, "article whose publication date is 2004": {"denotation": "(list (name en.article.41) (name en.article.46))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)))", "paraphrases": ["find an article published in 2004"]}, "article that cites article that won an award": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award))))", "paraphrases": ["what article discusses another article that won an award", "articles that cite awardwinning articles", "any article that mentions award winning article", "awarded articles", "what article cites an award winning article"]}, "article that won an award and that won an award": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award)) (string won_award)))", "paraphrases": ["article that was awarded"]}, "venue that is venue of multivariate data analysis": {"denotation": "(list (name en.venue.computational_linguistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["articles on multivariate data analysis", "what venue is multivariate data analysis in", "in what publication was multivariate data analysis published"]}, "article that won an award and that cites multivariate data analysis": {"denotation": "(list (name en.article.17) (name en.article.2) (name en.article.21) (name en.article.3) (name en.article.36))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award)) (string cites) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["award winning article that cites multivariate data analysis", "which article that cites multivariate data analysis won an award"]}, "article that has the most number of author": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string max) (string author)))", "paraphrases": ["what article has the most authors", "what article has more authors than any other", "what article has the fewest authors", "articles written by the most writers", "article with the largest amount of authors"]}, "article that multivariate data analysis cites": {"denotation": "(list (name en.article.13) (name en.article.14) (name en.article.28) (name en.article.3) (name en.article.37) (name en.article.4) (name en.article.46) (name en.article.49) (name en.article.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["what articles are published in multivariate data analysis", "article cited bymultivariate data analysis"]}, "article whose venue is annals of statistics and that won an award": {"denotation": "(list (name en.article.1) (name en.article.11) (name en.article.13) (name en.article.15) (name en.article.16) (name en.article.18) (name en.article.20) (name en.article.21) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.27) (name en.article.28) (name en.article.30) (name en.article.33) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.39) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.5) (name en.article.50) (name en.article.55) (name en.article.59) (name en.article.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string won_award)))", "paraphrases": ["what article won an award and whose venue is annals and statistics", "award winning article whose venue is annals of statistics", "award winning article published by annals of statistics", "article whose venue is annals of statistics and that won an award", "what award winning article was in annals of statistics"]}, "number of person": {"denotation": "(list (number 2 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type))))", "paraphrases": ["how many people", "what is the persons number"]}, "person that is author of article that cites multivariate data analysis": {"denotation": "(list (name en.person.efron) (name en.person.lakoff))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "paraphrases": ["writers who cited multivariate data analysis", "which authors cite multivariate data analysis in their articles", "person that is author of article that cites multivariate data analysis", "who is the author of an article citing multivariate data analysis", "author of the article that cites multivariate data analysis", "what author wrote an article that cities multivariate data analysis"]}, "article whose venue is venue that is venue of multivariate data analysis": {"denotation": "(list (name en.article.10) (name en.article.12) (name en.article.14) (name en.article.17) (name en.article.19) (name en.article.2) (name en.article.22) (name en.article.26) (name en.article.29) (name en.article.3) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.38) (name en.article.4) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.49) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) en.article.multivariate_data_analysis)))", "paraphrases": ["what article has the same venue as multivariate data analysis", "articles published in the same venue as multivariate data analysis", "article whose venue is venue that is venue of multivariate data analysis", "what article is about multivariate data analysis", "articles that do not appear in the same publications as multivariate data analysis", "article publication of multivariate data analysis"]}, "article whose publication date is at most 2004 or 2010": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "paraphrases": ["what article was published in 2010 or earlier", "articles published before 2010", "articles published before 2004 or before 2010", "articles published between 2004 and 2010", "what articles are written between 2004 and 2010"]}, "article that has more than two author": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string >) (number 2)))", "paraphrases": ["articles with more than two authors", "name an article produced by more than two authors", "article by more than two author", "what article has over two authors", "article written by more than two authors", "articles with three or more authors", "article by three or more authors", "name an article with more than two authors"]}, "venue that is not venue of multivariate data analysis": {"denotation": "(list (name en.venue.annals_of_statistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string !=) en.article.multivariate_data_analysis))", "paraphrases": ["journal that did not publish multivariate data analysis", "find a venue that does not have multivariate data analysis", "venues other than the multivariate data analysis venue", "publications that do not publish multivariate data analysis", "what is a venue that is not multivariate data analysis related"]}, "article that cites two article": {"denotation": "(list (name en.article.10) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.48) (name en.article.49))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["this article cites 2 other articles", "which articles cite two articles", "articles citing two articles", "what article cites two other articles", "what article has two citations"]}, "article that won an award and whose author is efron": {"denotation": "(list (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.14) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.20) (name en.article.21) (name en.article.23) (name en.article.25) (name en.article.26) (name en.article.28) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.45) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award)) (string author) (string =) en.person.efron))", "paraphrases": ["awardwinning article by efron", "what article written by efron won an award", "article written by efron that won an award", "articles written by efron that have won an award", "what award winning article was written by efron"]}, "article whose publication date is 2004 and that won an award": {"denotation": "(list (name en.article.41) (name en.article.46))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string won_award)))", "paraphrases": ["what article has a publication date of 2003 and won an award", "articles published in 2004 that won awards", "award winning articles published in 2004"]}, "article whose publication date is at most 2004": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.14) (name en.article.15) (name en.article.18) (name en.article.2) (name en.article.24) (name en.article.26) (name en.article.29) (name en.article.33) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.46) (name en.article.48) (name en.article.5) (name en.article.50) (name en.article.6) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2004 -1 -1))))", "paraphrases": ["articles published in 2004 or before", "articles published in or before 2004", "what article was published on or before 2004", "article whose publication date is at most 2004", "articles that were written before 2004"]}, "article whose author is efron and that multivariate data analysis cites": {"denotation": "(list (name en.article.14) (name en.article.28) (name en.article.37) (name en.article.4) (name en.article.49))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["name an article about multivariate data analysis by the author efron", "what efron article cites multivariate data analysis", "an article by efron that cites multivariate data analysis", "articles by efron cited in multivariate data analysis", "article written by efron which multivariate data analysis cites", "article by efron citing multivariate data analysis", "articles written by efron and cited by multivariate data analysis", "articles written by efron cited by multivariate data analysis", "what efron article was cited by multivariate data analysis"]}, "article that cites at least two article": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["which articles cite at least two articles", "article that refernces a single article", "article that cites two or more articles", "article that cite at least two articles", "what article cites at least two other articles"]}, "article whose venue is annals of statistics and whose author is efron": {"denotation": "(list (name en.article.11) (name en.article.16) (name en.article.18) (name en.article.20) (name en.article.21) (name en.article.23) (name en.article.25) (name en.article.28) (name en.article.30) (name en.article.33) (name en.article.36) (name en.article.37) (name en.article.39) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.5) (name en.article.50) (name en.article.55) (name en.article.59) (name en.article.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string author) (string =) en.person.efron))", "paraphrases": ["article on annals of statistics by efron", "what article did efron write whose venue is annals of statistics", "which article is authored by efron and has the annals of statistics as its venue"]}, "article that multivariate data analysis cites and whose venue is annals of statistics": {"denotation": "(list (name en.article.13) (name en.article.28) (name en.article.37) (name en.article.46))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string venue) (string =) en.venue.annals_of_statistics))", "paraphrases": ["articles in annals of statistics cited in multivariate data analysis", "what annals of statistics article was cited by multivariate data analysis", "articles cited by multivariate data analysis and published in annals of statistics", "article cited bymultivariate data analysis whose venue is annals of statistics", "what is an article in annals of statistics about multivariate data analysis", "article that cites multivariate data analysis in the annals of statistics", "name an article about multivariate data analysis in the annals of statistics"]}, "article whose venue is annals of statistics and whose venue is annals of statistics": {"denotation": "(list (name en.article.1) (name en.article.11) (name en.article.13) (name en.article.15) (name en.article.16) (name en.article.18) (name en.article.20) (name en.article.21) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.27) (name en.article.28) (name en.article.30) (name en.article.33) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.39) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.5) (name en.article.50) (name en.article.55) (name en.article.59) (name en.article.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string venue) (string =) en.venue.annals_of_statistics))", "paraphrases": ["articles found in annals of statistics", "what article has annals of statistics as a venue", "what article is about annals of statistics", "article published in annals of statistics"]}, "article that has at least two venue": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string >=) (number 2)))", "paraphrases": ["name an article found in two or more venues", "find me an article with two or more venues", "name an article found in at least two publications", "article with minimum two venue", "there are at least two venues in the article", "article with two or more publishers", "what article has two venues minimum", "what article has no less than two venues", "articles published in two or more venues"]}, "person that is author of article that won an award": {"denotation": "(list (name en.person.efron) (name en.person.lakoff))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award))))", "paraphrases": ["what person wrote articles than won an award", "who is the author of the article who won an award", "find the author of an award winning article", "authors of awardwinning articles"]}, "article whose author is person that is author of multivariate data analysis": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string =) en.article.multivariate_data_analysis)))", "paraphrases": ["what articles are written by authors of multivariate data analysis", "articles written by the author of multivariate data analysis", "article by the same author of multivariate data analysis", "articles written by the writer of multivariate data analysis"]}, "article that article whose venue is annals of statistics cites": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.13) (name en.article.14) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics)))", "paraphrases": ["what article cites an annals of statistics article", "name an article from the annals of statistics", "article whose venue is annals of statistics", "articles cited by articles in annals of statistics", "article citing article published in annals of statistics", "articles cited by articles published in annals of statistics", "what article is cited by an article in annals of statistics", "what articles are published in annals of statistics", "articles cited in annals of statistics"]}, "venue of multivariate data analysis": {"denotation": "(list (name en.venue.computational_linguistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string venue)))", "paraphrases": ["multivariate data analysis venue", "publications of multivariate data analysis", "where can you see multivariate data analysis", "what venue consists of multivariate data analysis", "what journal is multivariate data analysis published in"]}, "article whose author is efron and that cites multivariate data analysis": {"denotation": "(list (name en.article.17) (name en.article.21) (name en.article.36))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string cites) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["find an efron article that cites multivariate data analysis", "efron articles citing multivariate data analysis", "what article written by efron cites multivariate data analysis", "article written by efron that cites multivariate data analysis"]}, "venue that is venue of the least number of article": {"denotation": "(list (name en.venue.annals_of_statistics) (name en.venue.computational_linguistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["publication with the fewest articles", "journal that publishes the fewest number of articles", "venues publishing the fewest articles", "what venue has the fewest articles"]}, "article whose author is author of multivariate data analysis": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string author))))", "paraphrases": ["article with author of multivariate data analysis", "an article whose also authored multivariate data analysis", "article whose author is author of multivariate data analysis", "articles written by the multivariate data analysis writer"]}, "article that has less than two author": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string <) (number 2)))", "paraphrases": ["articles with fewer than two authors", "what articles have under two authors", "article by only one author", "article written by one author", "name an article with fewer than two authors", "articles written by fewer than two people", "what article has less than two authors", "articles authored by one", "what is an article written by only one author", "which article  is written by less than two authors"]}, "venue that is venue of article whose author is efron": {"denotation": "(list (name en.venue.annals_of_statistics) (name en.venue.computational_linguistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) en.person.efron)))", "paraphrases": ["what articles were written by efron", "venue of the efron article", "publications with articles authored by efron", "publications where articles by efron can be found", "venues that have efrons article", "venue that is venue of article whose author is efron"]}, "article whose publication date is publication date of multivariate data analysis": {"denotation": "(list (name en.article.10) (name en.article.40) (name en.article.42) (name en.article.44) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string publication_date))))", "paraphrases": ["articles published on the same day as multivariate data analysis", "which article has a publication date the same as multivariate data analysis", "what article was published on the same date as multivariate data analysis", "articles published on the same date as multivariate data analysis", "article published on date of multivariate data analysis"]}, "person that is not author of multivariate data analysis": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string !=) en.article.multivariate_data_analysis))", "paraphrases": ["what person is not the author of multivariate data analysis", "who is someone that has not authored an article about multivariate data analysis", "person who is not author of multivariate data analysis", "person who has not published article in multivariate data analysis", "writers who didnt write multivariate data analysis", "which author did not write  multivariate data analysis", "people who did not author multivariate data analysis", "who has not written a multivariate data analysis", "name someone who is not the author of an article about multivariate data analysis"]}, "article that cites article whose publication date is 2004": {"denotation": "(list (name en.article.19) (name en.article.2) (name en.article.22) (name en.article.27) (name en.article.29) (name en.article.37) (name en.article.51) (name en.article.7) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "paraphrases": ["what article cites another article with a publication date of 2004", "article that cite articles published in 2004", "articles that cite articles published in 2004", "articles citing articles published in 2004", "find an article making a citation of a 2004 published article"]}, "article whose publication date is at least publication date of multivariate data analysis": {"denotation": "(list (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.16) (name en.article.17) (name en.article.19) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.25) (name en.article.27) (name en.article.28) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.49) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string publication_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.article.multivariate_data_analysis (string publication_date)))))", "paraphrases": ["article that has the same publication date as the multivariate data analysis article", "articles published contemporaneous to or after the multivariate data analysis", "articles published on or after the publication date of multivariate data analysis", "what article was published on or after multivariate data analysis was", "what article has a publication date the same as the date of multivariate data analysis"]}, "article whose venue is annals of statistics and that cites multivariate data analysis": {"denotation": "(list (name en.article.21) (name en.article.36))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string cites) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["articles published in the annals of statistics citing multivariate data analysis", "what annals of statistics article cited multivariate data analysis", "article that cited multivariate data analysis in annals of statistics", "what article cites multivariate data analysis and is also its venue"]}, "article that cites multivariate data analysis and that won an award": {"denotation": "(list (name en.article.17) (name en.article.2) (name en.article.21) (name en.article.3) (name en.article.36))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string won_award)))", "paraphrases": ["article that won an award and cites multivariate data analysis", "article that mentions award winning multivariate data analysis article"]}, "article that won an award and that multivariate data analysis cites": {"denotation": "(list (name en.article.13) (name en.article.14) (name en.article.28) (name en.article.3) (name en.article.37) (name en.article.4) (name en.article.46) (name en.article.49) (name en.article.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string won_award)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "paraphrases": ["awardwinning articles cited in articles using multivariate data analysis", "award winning article cited by multivariate data analysis", "what article cited by multivariate data analysis won an award", "articles that won awards cited by multivariate data analysis", "award winning articles cited by multivariate data analysis", "what award winning article is cited by multivariate data analysis"]}, "person that is author of the least number of article": {"denotation": "(list (name en.person.efron) (name en.person.lakoff))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["what author wrote the least number of articles", "authors of multiple articles", "author with the least number of articles", "who has written the fewest articles", "who has authored the least articles"]}, "2004 or 2010": {"denotation": "(list (date 2004 -1 -1) (date 2010 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2004 -1 -1) (date 2010 -1 -1)))", "paraphrases": ["article with publication date as 2004 or 2010"]}, "venue that is venue of article whose publication date is 2004": {"denotation": "(list (name en.venue.annals_of_statistics))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.venue) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string venue)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "paraphrases": ["what is the venue of the article published in 2004", "publications that include articles published in 2004", "venues that published in 2004", "what article has a publication date of 2004", "what venue has articles published in 2004"]}, "person that is author of less than two article": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.person) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string author)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type))))", "paraphrases": ["who has authored fewer than two articiles", "writer of fewer than two articles", "writers of fewer than two articles", "author of only one article", "author of lees than two articles", "which author wrote under two articles", "who is the author of less than two articles", "name a person who has authored fewer than two articles"]}, "article whose publication date is not 2004": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string publication_date) (string !=) (date 2004 -1 -1)))", "paraphrases": ["articles published except in 2004", "what article wasnt published in 2004", "articles that were not published in 2004", "articles not published in 2004", "what article does not have a publication date of 2004"]}, "article that cites article that cites multivariate data analysis": {"denotation": "(list (name en.article.12) (name en.article.13) (name en.article.19) (name en.article.23) (name en.article.3) (name en.article.30) (name en.article.33) (name en.article.34) (name en.article.37) (name en.article.42) (name en.article.45) (name en.article.48) (name en.article.5) (name en.article.55) (name en.article.58) (name en.article.59) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "paraphrases": ["article citing an article citing multivariate data analysis", "what article cites articles about multivariate data analysis", "author of article citing multivariate data analysis", "articles that cite multivariate data analysis"]}, "article whose author is efron or lakoff": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.person.efron en.person.lakoff)))", "paraphrases": ["what are some articles written by efron or lakoff", "article whose author is efron or lakoff", "articles written by efron or lakoff", "find an article by efron or lakoff"]}, "article that has two author": {"denotation": "(list (name en.article.1) (name en.article.10) (name en.article.11) (name en.article.12) (name en.article.13) (name en.article.14) (name en.article.15) (name en.article.16) (name en.article.17) (name en.article.18) (name en.article.19) (name en.article.2) (name en.article.20) (name en.article.21) (name en.article.22) (name en.article.23) (name en.article.24) (name en.article.25) (name en.article.26) (name en.article.27) (name en.article.28) (name en.article.29) (name en.article.3) (name en.article.30) (name en.article.31) (name en.article.32) (name en.article.33) (name en.article.34) (name en.article.35) (name en.article.36) (name en.article.37) (name en.article.38) (name en.article.39) (name en.article.4) (name en.article.40) (name en.article.41) (name en.article.42) (name en.article.43) (name en.article.44) (name en.article.45) (name en.article.46) (name en.article.47) (name en.article.48) (name en.article.49) (name en.article.5) (name en.article.50) (name en.article.51) (name en.article.52) (name en.article.53) (name en.article.54) (name en.article.55) (name en.article.56) (name en.article.57) (name en.article.58) (name en.article.59) (name en.article.6) (name en.article.7) (name en.article.8) (name en.article.9) (name en.article.multivariate_data_analysis))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.article) (string !type)) (string author) (string =) (number 2)))", "paraphrases": ["what article has two authors", "articles with two authors", "find an article with two authors", "article with two authors"]}}