{"1500 dollars or 2000 dollars": {"denotation": "(list (number 1500 en.dollar) (number 2000 en.dollar))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 1500 en.dollar) (number 2000 en.dollar)))", "paraphrases": ["rent between 1500 and 2000 dollars", "seeking apartments between 1500 and 2000", "find housing units with rental charges between 1500 and 2000 dollars"]}, "housing unit that allows dogs and whose housing type is apartment": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.20) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.35) (name en.housing_unit.4) (name en.housing_unit.57))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_dogs)) (string housing_type) (string =) en.housing.apartment))", "paraphrases": ["dogfriendly apartments", "housing unit which is an apartment that is dogs friendly", "dogfriendly apartment", "housing apartments that allow dogs"]}, "housing unit whose housing type is apartment and whose neighborhood is midtown west": {"denotation": "(list (name en.housing_unit.27) (name en.housing_unit.35) (name en.housing_unit.39))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["apartment in midtown west", "apartments in the midtown west neighborhood", "list all apartments in midtown west"]}, "housing unit that has a private room and whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_room)) (string posting_date) (string =) (date 2015 1 2)))", "paraphrases": ["housing with private room that was posted on january 2", "housing units that have a private room that was posted on january 2", "housing with a private room that posted on january 2", "what housing unit  posted on jan 2 has a private room"]}, "total size of housing unit": {"denotation": "(list (number 34298 en.square_feet))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size))))", "paraphrases": ["what is the size of the apartment", "what is the total area of a housing unit", "how big is the housing unit", "what is that housing unit size", "how large is the housing unit"]}, "housing unit whose monthly rent is 1500 dollars and whose housing type is apartment": {"denotation": "(list (name en.housing_unit.20) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.35) (name en.housing_unit.4) (name en.housing_unit.42) (name en.housing_unit.57))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string housing_type) (string =) en.housing.apartment))", "paraphrases": ["apartments renting for 1500 a month", "which housing unit does not belong to the apartment type with a monthly rent of 1500 dollars", "apartment for rent at 1500", "apartments for 1500"]}, "housing type that is housing type of less than two housing unit": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["find all detached housing units", "what kind of housing type is the only of its kind", "housing with fewer than two units", "housing type with less than 2 units"]}, "housing unit that allows cats and whose neighborhood is midtown west": {"denotation": "(list (name en.housing_unit.27) (name en.housing_unit.3) (name en.housing_unit.37) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.50) (name en.housing_unit.58) (name en.housing_unit.8) (name en.housing_unit.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_cats)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["what midtown west housing allows cats", "housing unit that allows cats with midtown west as neighborhood", "catfriendly apartments in midtown west"]}, "housing unit that has a private bath and that allows dogs": {"denotation": "(list (name en.housing_unit.17) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.34) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.54) (name en.housing_unit.6) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_bath)) (string allows_dogs)))", "paraphrases": ["which housing unit permits dogs and has a private bath", "dogfriendly apartment with a private bathroom", "looking for a unit with a private bathroom and dog friendly"]}, "housing unit that has a private room and whose size is 800 square feet": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.29) (name en.housing_unit.34) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_room)) (string size) (string =) (number 800 en.square_feet)))", "paraphrases": ["housing that is 800 square feet with a private room", "find 800 square feet sized housing units with a private room", "800 square food housing units that have private baths", "800 foot apartment with a private room", "which housing unit with an area of 800 square feet has a private room"]}, "housing unit whose neighborhood is midtown west and that has a private bath": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.27) (name en.housing_unit.39) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.50) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string has_private_bath)))", "paraphrases": ["private bath in midtown west", "what midtown west housing unit has a private bath", "apartment with a master bathroom in midtown west neighbourhood", "housing units with a  orivate bath in the midtown west area"]}, "housing unit that allows dogs and that has a private room": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.17) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.31) (name en.housing_unit.34) (name en.housing_unit.4) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.54) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_dogs)) (string has_private_room)))", "paraphrases": ["which housing units permits dogs and offers a private room", "find housing units with a private room and is dog friendly", "show me places with private rooms where dogs are welcome"]}, "housing unit that allows cats and whose monthly rent is 1500 dollars": {"denotation": "(list (name en.housing_unit.13) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.33) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.58) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_cats)) (string rent) (string =) (number 1500 en.dollar)))", "paraphrases": ["which housing unit with a rent of 1500 dollars per month permits cats in it", "find cat friendly housing units that charge 1500 dollars as rent", "housing that is 1500month and cats are allowed", "what housing is cat friendly and costs 1500 dollars"]}, "housing unit that has at most two housing type": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string <=) (number 2)))", "paraphrases": ["housing units that have the most housing types", "find housing units that satisfies two housing types", "building with two or less kinds of unis", "housing that are either apartments or houses for rent", "which housing unit has a maximum of two housing types"]}, "housing unit that allows dogs and that allows dogs": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.17) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.38) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.52) (name en.housing_unit.54) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.6) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_dogs)) (string allows_dogs)))", "paraphrases": ["find housing units that are pet friendly", "show me housing where dogs are allowed", "which is the housing unit that permits dogs inside it", "dogfriendly housing", "apartments that are dog friendly"]}, "average monthly rent of housing unit": {"denotation": "(list (number 2174.563 en.dollar))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent))))", "paraphrases": ["what is the average monthly rent", "what is the average price of apartments", "what is the average monthly rent of the housing units", "what is the average rent per month of a housing unit", "what is the average monthly rent of housing units"]}, "neighborhood that is neighborhood of at most two housing unit": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["which neighborhood has two housing units maximum", "a neighborhood with at most twohouse units", "what neighborhood has two or less housing units", "neighborhood with at most two housing"]}, "housing unit whose housing type is apartment or condo": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.33) (name en.housing_unit.35) (name en.housing_unit.37) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.42) (name en.housing_unit.47) (name en.housing_unit.49) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.54) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.housing.apartment en.housing.condo)))", "paraphrases": ["apartment or condo", "aparartment or condo units", "looking for housing that is either an apartment or condo", "show me apartments and condos", "find housing units of the type apartment or condo"]}, "housing unit that has a private bath and that allows cats": {"denotation": "(list (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_bath)) (string allows_cats)))", "paraphrases": ["which housing unit permits cats inside it and has the facility of a private bath", "catfriendly housing with a private bath", "catfriendly apartments with a private bathroom", "show me housing which have a private bathroom and allow cats"]}, "housing type that is housing type of housing unit that has a private room": {"denotation": "(list (name en.housing.apartment) (name en.housing.condo) (name en.housing.flat) (name en.housing.house))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_room))))", "paraphrases": ["what kinds of housing include a private room", "apartments with a private room", "what is the housing type of the housing unit with a private room", "what is the type of housing that has a private room"]}, "housing unit whose monthly rent is 1500 dollars and that allows dogs": {"denotation": "(list (name en.housing_unit.17) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.33) (name en.housing_unit.35) (name en.housing_unit.4) (name en.housing_unit.54) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.6) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string allows_dogs)))", "paraphrases": ["housing unit that costs 1500 dollars rent and allows dogs", "find pet friendly housing units that charge 1500 dollars as rent", "housing with 1500 rent and allows dogs"]}, "neighborhood that is neighborhood of housing unit whose monthly rent is 1500 dollars": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar))))", "paraphrases": ["which neighborhoods have housing with monthly rent of 1500 dollars", "what is the neighborhood  of the housing unit with the monthly rent 1500 dollars", "housing with rent at 1500", "neighborhoods with housing that is 1500month", "neighborhood of housing unit whose monthly rent is 1500 dollars"]}, "housing unit whose housing type is apartment and that allows dogs": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.20) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.35) (name en.housing_unit.4) (name en.housing_unit.57))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string allows_dogs)))", "paraphrases": ["apartments that allow dogs"]}, "housing unit that allows cats and whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_cats)) (string posting_date) (string =) (date 2015 1 2)))", "paraphrases": ["which housing posted jan 2nd permits cats", "housing that allows cats posted on january 2", "what housing unit posted on jan 2 allows cats"]}, "123 sesame street or 900 mission ave": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave))", "paraphrases": ["unit on 123 sesame street or 900 mission avenue", "compare 123 sesame street and 900 mission avenue"]}, "housing unit whose size is size of 123 sesame street": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.26) (name en.housing_unit.29) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.36) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.52) (name en.housing_unit.55) (name en.housing_unit.58) (name en.housing_unit.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string size))))", "paraphrases": ["which housing unit resembles 123 sesame street in size", "apartments similar in size to 123 sesame street", "find housing units in the same size of 123 sesame street", "housing unit sizes on 123 sesame street"]}, "housing unit whose housing type is apartment and whose housing type is apartment": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.20) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.35) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.42) (name en.housing_unit.51) (name en.housing_unit.57))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string housing_type) (string =) en.housing.apartment))", "paraphrases": ["find housing that is an apartment", "which housing unit has houses of apartment kind", "housing unit that is an aprtment", "looking for apartments"]}, "neighborhood that is neighborhood of at least two housing unit": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["neighborhood that has at least 2 apartments", "which neighborhoods have more than two places available", "neighborhood that has at least two listings", "which area has a minimum of two housing units", "name neighborhoods with two or more housing units"]}, "neighborhood that is neighborhood of housing unit that allows dogs": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_dogs))))", "paraphrases": ["which housing units in the neighbourhood permits dogs inside it", "neighborhoods with dogfriendly apartments", "which neighborhoods have housing where dogs are allowed", "what neighborhood housing units allows dogs", "which neighborhoods have dogfriendly housing"]}, "housing type of 123 sesame street": {"denotation": "(list (name en.housing.condo))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string housing_type)))", "paraphrases": ["what is the 123 sesame street housing type", "what kind of housing is 123 sesame street", "housing type on 123 sesame street"]}, "housing unit whose posting date is smaller than posting date of 123 sesame street": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.18) (name en.housing_unit.2) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.28) (name en.housing_unit.30) (name en.housing_unit.35) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.51) (name en.housing_unit.56) (name en.housing_unit.59) (name en.housing_unit.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "paraphrases": ["apartments posted before 123 sesame street was posted", "housing posted before 123 sesame street", "which housing unit is posted before  the posting date of 123 sesame street", "housing unit with posting date less than that of 123 sesame street", "find housing units posted after 123 sesame street"]}, "number of neighborhood": {"denotation": "(list (number 3 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type))))", "paraphrases": ["how  many neighbourhoods are there", "how many neighborhoods", "how many neighborhoods are in the city"]}, "housing unit whose neighborhood is midtown west and whose size is 800 square feet": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.39) (name en.housing_unit.46) (name en.housing_unit.50) (name en.housing_unit.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string size) (string =) (number 800 en.square_feet)))", "paraphrases": ["800 square foot apartments in midtown west", "housing in midtown west with 800 square feet", "find 800 square feet housing units in the neighborhoods of midtown west"]}, "800 square feet or 1000 square feet": {"denotation": "(list (number 1000 en.square_feet) (number 800 en.square_feet))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 800 en.square_feet) (number 1000 en.square_feet)))", "paraphrases": ["list all housing that have the size of 800 or 1000 square feet", "either 800 or 1000 square feet", "housing units of either 800 square feet or 1000 square feet"]}, "housing unit that has a private room and that has a private bath": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.17) (name en.housing_unit.2) (name en.housing_unit.22) (name en.housing_unit.34) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.54))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_room)) (string has_private_bath)))", "paraphrases": ["locate housing units with private roombath", "apartment with a master bedroom and private bath", "housing unit with a private room and bath", "housing with a private room and bath", "find housing with a private room and bath"]}, "housing unit that allows dogs and that allows cats": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.33) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.54) (name en.housing_unit.58) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_dogs)) (string allows_cats)))", "paraphrases": ["which housing unit allows dogs and cats", "find housing that allows dogs and cats", "housing unit that allows dogs and cats"]}, "housing unit whose posting date is smaller than jan 2 or feb 3": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2015 1 2) (date 2015 2 3)))))", "paraphrases": ["housing posted before january 2 or february 3", "housing with posting dates before january 2nd and february 3rd", "find housing unit with posting date between january 2nd or february 3rd", "which housing unit is posted before jan 2"]}, "housing unit that has a private room and whose housing type is apartment": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.20) (name en.housing_unit.24) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.57))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_room)) (string housing_type) (string =) en.housing.apartment))", "paraphrases": ["which housing unit belongs to the apartment kind with the facility of a private troom", "find apartments with a private room"]}, "housing unit whose size is 800 square feet and whose size is 800 square feet": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.26) (name en.housing_unit.29) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.36) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.52) (name en.housing_unit.55) (name en.housing_unit.58) (name en.housing_unit.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string size) (string =) (number 800 en.square_feet)))", "paraphrases": ["find 800 square feet housing units", "which housing unit has an area of 800 square feet"]}, "housing unit that has a private room and whose neighborhood is midtown west": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.3) (name en.housing_unit.31) (name en.housing_unit.37) (name en.housing_unit.39) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.56) (name en.housing_unit.58) (name en.housing_unit.7) (name en.housing_unit.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_room)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["which housing unit in the midtown west area has a private room", "private housing in midtown west", "apartments in midtown west with a private room", "need a unit with a private room in the midtown west area", "housing in midtown west with a private room"]}, "housing unit whose monthly rent is smaller than 1500 dollars or 2000 dollars": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.19) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.44) (name en.housing_unit.48) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 1500 en.dollar) (number 2000 en.dollar)))))", "paraphrases": ["housing with rent less than 1500 or less than 2000", "apartments with rent between 1500 and 2000", "housing with monthly rent less than 1500 dollars", "find housing units with rental charges lesser than 2000 dollars", "rent less than 15002000 dollars"]}, "housing unit whose monthly rent is at least 1500 dollars or 2000 dollars": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 1500 en.dollar) (number 2000 en.dollar)))))", "paraphrases": ["housing that is at least 1500month or at least 2000month", "which housing unit is available for a rent of 1500 2000 dollars", "find housing units with rental charges between 1500 to 2000 dollars"]}, "housing unit that has the least number of housing type": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string min) (string housing_type)))", "paraphrases": ["housing units with a small amount of housing", "which housing unit has the least variety of houses", "building with the least number of housing types", "find housing units with unique housing types", "seeking houses in quiet neighborhoods"]}, "housing unit whose monthly rent is 1500 dollars and whose neighborhood is midtown west": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.27) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.35) (name en.housing_unit.50) (name en.housing_unit.58) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["midtown west unit with 1500 rent monthly", "apartments in midtown west with rent at 1500", "find housing units with 1500 dollars as rent and is near midtown west", "housing unit in midtown west that has monthly rent of 1500", "housing in midtown west with 1500month rent"]}, "housing unit whose monthly rent is at most monthly rent of 123 sesame street": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.17) (name en.housing_unit.19) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string rent)))))", "paraphrases": ["housing that is the same rent as or cheaper than 123 sesame street", "find housing units with less than or equal to the rent of 123 sesame street", "housing unit that costs as much rent as the homes in 123 sesame street", "housing that does not have a higher rent then 123 sesame street"]}, "housing unit whose size is 800 square feet and that allows dogs": {"denotation": "(list (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.26) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.52) (name en.housing_unit.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string allows_dogs)))", "paraphrases": ["where are 800 square fee housing units that allow dogs", "dogfriendly 800 square foot apartment", "which housing unit with an area of 800 square permits dogs", "dogfriendly housing that is 800 square feet", "pet friendly 800 square feet housing unit"]}, "housing unit that allows cats and that allows dogs": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.33) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.54) (name en.housing_unit.58) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_cats)) (string allows_dogs)))", "paraphrases": ["looking for a pet friendly unit", "which housing units permit dogs and cats", "dog and cat friendly housing", "find pet friendly housing units"]}, "jan 2 or feb 3": {"denotation": "(list (date 2015 1 2) (date 2015 2 3))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2015 1 2) (date 2015 2 3)))", "paraphrases": ["january 2 to february 3"]}, "housing unit whose posting date is jan 2 and that is size of 123 sesame street": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string size)) (string =) en.housing_unit.123_sesame_street))", "paraphrases": ["housing typical of 123 sesame street housing posted on january 2", "what housing unit posted on jan 2 is the same size as 123 sesame street", "housing like 123 sesame street that was posted on january 2", "housing unit posted on january 2 and that is the same size as 123 sesame st", "housing units who have a posting date of january 2nd and on 123 sesame street"]}, "housing unit whose monthly rent is larger than 1500 dollars": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.16) (name en.housing_unit.18) (name en.housing_unit.2) (name en.housing_unit.21) (name en.housing_unit.25) (name en.housing_unit.3) (name en.housing_unit.34) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.56) (name en.housing_unit.59) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 1500 en.dollar))))", "paraphrases": ["housing costing more than 1500 dollars per month", "which housing unit has a monthly rent of more than 1000 dollars", "housing that is more than 1500month", "any units costing more than 1500 a month", "apartments with rent above 1500"]}, "housing unit that has the largest posting date": {"denotation": "(list (name en.housing_unit.22) (name en.housing_unit.42) (name en.housing_unit.47) (name en.housing_unit.53) (name en.housing_unit.55) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date))))", "paraphrases": ["housing posted the most recently", "housing unit with the largest posting date", "housing with with largest posting date", "what housing has the latest posting date", "most recently posted housing"]}, "housing unit whose posting date is at least jan 2 or feb 3": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2015 1 2) (date 2015 2 3)))))", "paraphrases": ["housing that was posted after january 2 or after february 3", "housing that was posted on january 2 or february 3", "housing that was posted on february 3", "which housing posted no earlier than jan 2nd or feb 3rd"]}, "housing unit whose monthly rent is at least 1500 dollars": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 1500 en.dollar))))", "paraphrases": ["housing that is at least 1500month", "apartments that rent for at least 1500", "which housing unit has a  minimum  rent of 1500 dollars per month", "housing that rents for at least 1500 per month"]}, "housing unit whose housing type is apartment and that allows cats": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.23) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.4) (name en.housing_unit.42))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string allows_cats)))", "paraphrases": ["find apartments that are pet friendly", "apartment that allows cats"]}, "housing unit whose housing type is apartment": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.20) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.35) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.42) (name en.housing_unit.51) (name en.housing_unit.57))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment))", "paraphrases": ["list all housing units that are apartments", "housing units that are apartments"]}, "housing unit that allows dogs and whose neighborhood is midtown west": {"denotation": "(list (name en.housing_unit.27) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.35) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.58) (name en.housing_unit.8) (name en.housing_unit.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_dogs)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["which housing unit in midtown west permits dogs", "what housing units in the midtown east area also allow dogs"]}, "housing unit that allows cats and whose housing type is apartment": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.23) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.4) (name en.housing_unit.42))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_cats)) (string housing_type) (string =) en.housing.apartment))", "paraphrases": ["which apartment kind of housing units permits cats in it", "apartments that are catfriendly", "apartments that permit cats", "housing apartments that allows cats"]}, "housing unit that has less than two housing type": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string <) (number 2)))", "paraphrases": ["apartments with less than 2 units", "housing unit with 2 types of housing", "housing units with one housing type", "unit with one housing type", "which housing offers less than two kinds of units"]}, "housing unit whose housing type is not apartment": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string !=) en.housing.apartment))", "paraphrases": ["which housing unit does not have apartment type of house", "find housing units that is not an apartment", "show me housing units that arent apartments", "housing that is not an apartment", "looking for housing that isnt an apartment"]}, "housing unit whose posting date is larger than jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2015 1 2))))", "paraphrases": ["which housing posted after jan 2nd", "housing units posted after january 2"]}, "housing unit that allows cats and that has a private room": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.13) (name en.housing_unit.3) (name en.housing_unit.37) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.54) (name en.housing_unit.58) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_cats)) (string has_private_room)))", "paraphrases": ["catfriendly housing with a private room", "what housing unit contains a private room and allows cats", "show me places with a private room where cats are welcome", "which housing unit permits cats inside it and has a private room", "catfriendly apartments with a private room"]}, "housing unit whose size is 800 square feet and whose housing type is apartment": {"denotation": "(list (name en.housing_unit.20) (name en.housing_unit.26) (name en.housing_unit.39) (name en.housing_unit.4))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string housing_type) (string =) en.housing.apartment))", "paraphrases": ["which housing unit has apartment kind of house with an area of 800 square feet", "find 800 square feet housing units of the type apartment"]}, "monthly rent of 123 sesame street": {"denotation": "(list (number 1500 en.dollar))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string rent)))", "paraphrases": ["how much is 123 sesame street per month", "what is the monthly rent at 123 sesame street", "what is the rent of 123 sesame street", "what is the rent of 123 sesame street per month", "how much a month is the rent at 123 sesame street"]}, "housing unit whose posting date is jan 2 and that is monthly rent of 123 sesame street": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string rent)) (string =) en.housing_unit.123_sesame_street))", "paraphrases": ["what housing that was posted on january 2 has the same rent as 123 sesame street", "what housing unit posted on jan 2 has the same rent as 123 sesame street", "housing unit posted january 2 and the same rent as 123 sesame street", "housing unit posted january 2 with the same rent as 123 sesame street", "find a housing unit posted on january 2 with the same rent price as 123 sesame st"]}, "housing unit whose posting date is jan 2 and whose monthly rent is 1500 dollars": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string rent) (string =) (number 1500 en.dollar)))", "paraphrases": ["what housing unit posted on jan 2 has a monthly rent of 1500 dollars", "housing posted on january 2 that rents out for 1500 dollar per month", "housing with 1500 dollar rent that was posted on january 2", "which housing posted jan 2nd rents for 1500"]}, "housing unit that has the least number of neighborhood": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string min) (string neighborhood)))", "paraphrases": ["which area has the least number of housing units", "apartment in a quiet neighborhood", "housing listed in the fewest neighborhoods", "find housing units with the least number of neighborhoods"]}, "housing unit whose neighborhood is midtown west and whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string posting_date) (string =) (date 2015 1 2)))", "paraphrases": ["a housing unit in midtown west that was posted on january 2", "what housing unit in midtown west was posted on jan 2", "housing in midtown west neighborhood posted on january 2", "which housing unit is in midtown west and was posted on january 2"]}, "housing type that is housing type of 123 sesame street": {"denotation": "(list (name en.housing.condo))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) en.housing_unit.123_sesame_street))", "paraphrases": ["what is the kind of housing available in 123 sesamre street", "what type of housing is 123 sesame street", "what kind of housing is 123 sesame street", "what is the housing type at 123 sesame street"]}, "neighborhood that is neighborhood of housing unit whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "paraphrases": ["what neighborhood is the housing unit in that was posted on january 2", "housing neighborhood that was posted on january 2", "what neighborhood was the housing unit posted on jan 2", "housing posted in a neighborhood on january 2"]}, "housing unit whose monthly rent is monthly rent of 123 sesame street": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.17) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string rent))))", "paraphrases": ["which housing unit has the monthly rent of 123 sesame street", "housing with the same rent as 123 sesame street", "housing that costs the same as 123 sesame street", "unit with same rent as 123 sesame street", "housing unit with the same monthly rent as 123 sesame street"]}, "housing unit whose posting date is jan 2 and that is housing type of 123 sesame street": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) en.housing_unit.123_sesame_street))", "paraphrases": ["what housing unit posted on jan 2 is the same kind as 123 sesame street", "which housing unit was posted january 2 that is the same housing type as 123 sesame st", "housing kind of 123 sesame street that was posted on january 2", "a housing unit on 123 sesame street that posted on january 2", "housing that is the same type as 123 sesame street that was posted on january 2"]}, "housing unit that allows cats": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.13) (name en.housing_unit.19) (name en.housing_unit.23) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.3) (name en.housing_unit.33) (name en.housing_unit.37) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.58) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_cats)))", "paraphrases": ["which housing unit permits cats in it", "catfriendly housing", "cats permitted in unit"]}, "housing unit whose posting date is jan 2 and that allows dogs": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string allows_dogs)))", "paraphrases": ["housing allowing dogs that was posted on january 2", "housing that allows dogs that posted on january 2", "what housing unit allowing dogs was posted on jan 2", "housing that allows dogs and was posted on january 2"]}, "housing unit whose size is larger than size of 123 sesame street": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.17) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.37) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.44) (name en.housing_unit.47) (name en.housing_unit.51) (name en.housing_unit.53) (name en.housing_unit.56) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string size)))))", "paraphrases": ["housing units outsizing 123 sesame street", "find housing larger than 123 sesame street", "housing with more square footage than 123 sesame street", "housing that is bigger than 123 sesame street", "housing units bigger than homes on 123 sesame street"]}, "size of 123 sesame street": {"denotation": "(list (number 800 en.square_feet))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string size)))", "paraphrases": ["how large is 123 sesame street", "what is the square footage of 123 sesame street", "how big is 123 sesame street", "how large is the unit at 123 sesame street", "what is the area of 123 sesame street"]}, "housing unit that has two neighborhood": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (number 2)))", "paraphrases": ["find a housing unit that is in two neighborhoods", "housing units with 2 neighborhoods", "what housing unit is in two neighborhoods", "housing units near two neighborhoods"]}, "housing unit that has more than two housing type": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string >) (number 2)))", "paraphrases": ["housing of more than two types", "a housing unit that includes more than two housing types", "what housing unit has two or more housing types"]}, "housing unit whose size is 800 square feet and whose neighborhood is midtown west": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.39) (name en.housing_unit.46) (name en.housing_unit.50) (name en.housing_unit.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["find 800 square feet sized housing in the neighborhoods of midtown west", "which midtown west housing have 800 square feet", "800 square feet in midtown west", "800 square foot apartment in midtown west"]}, "housing unit whose housing type is housing type that is housing type of 123 sesame street": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.2) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.33) (name en.housing_unit.37) (name en.housing_unit.47) (name en.housing_unit.49) (name en.housing_unit.52) (name en.housing_unit.54) (name en.housing_unit.56) (name en.housing_unit.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) en.housing_unit.123_sesame_street)))", "paraphrases": ["find housing similar to the house located at 123 sesame street", "show me the same kind of housing as 123 sesame street"]}, "posting date of 123 sesame street": {"denotation": "(list (date 2004 -1 -1))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string posting_date)))", "paraphrases": ["when was 123 sesame street posted", "what day did 123 sesame street become available", "what is the date of 123 sesame street posting", "what is the date on which 123 sesame street was posted", "what is the date of the 123 sesame street posting"]}, "housing unit whose posting date is smaller than jan 2": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2015 1 2))))", "paraphrases": ["housing unit with a post date earlier than january 2", "housing posted before january 2", "which housing unit was posted before jan 2", "units posted before january 2nd"]}, "housing unit that allows dogs and whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_dogs)) (string posting_date) (string =) (date 2015 1 2)))", "paraphrases": ["which housing posted jan 2nd permits dogs", "what housing unit posted on jan 2 allows dogs", "housing posted on january 2nd that allows dogs", "housing that allows dogs and was posted on january 2"]}, "housing unit whose posting date is not jan 2": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string !=) (date 2015 1 2)))", "paraphrases": ["apartments posted after january 2", "find housings unit posted on other dates except for january 2nd", "which housing posted on a date other than january 2nd", "housing not posted on january 2", "which housing unit was not posted on jan 2"]}, "neighborhood that is neighborhood of housing unit whose size is 800 square feet": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet))))", "paraphrases": ["show only neighborhood units of 800 square feet", "what neighborhood is the 800 square foot apartment in", "what neighborhoods have units with 800 square feet", "neighborhoods that have 800 square foot housing", "which nearby area has a housing unit of 800 square feet by area"]}, "neighborhood that is neighborhood of housing unit that has a private room": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_room))))", "paraphrases": ["what neighborhood has housing with a private room", "which housing unit in this area has a private room", "neighborhood where i can find housing with a private room", "neighborhoods with housing units with private rooms", "what is the neighborhood of the  housing unit with a private room"]}, "housing unit whose posting date is jan 2 and whose housing type is apartment": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string housing_type) (string =) en.housing.apartment))", "paraphrases": ["find apartments posted on january 2", "an apartment that was posted on january 2", "apartment that was posted on january 2", "apartment housing that was posted on january 2"]}, "neighborhood that is neighborhood of the most number of housing unit": {"denotation": "(list (name en.neighborhood.chelsea))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["where are the most number of housing units found", "neighborhood with the most available housing", "which is the neighborhood shared by most nuumber of housing units", "neighborhood with the most housing units", "what neighborhood has the most apartment complexes"]}, "housing unit that has more than two neighborhood": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string >) (number 2)))", "paraphrases": ["housing that has more than two neighborhood", "housing in more than two neighborhoods", "housing units that have more than two neighborhoods", "what housing unit is in over two neighborhoods"]}, "housing type that is housing type of 123 sesame street or 900 mission ave": {"denotation": "(list (name en.housing.condo) (name en.housing.flat))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave)))", "paraphrases": ["which housing unit resembles 123 sesame street or 900 mission ave", "housing types like 123 sesame street or 900 mission avenue", "housing unit that is the same as the ones on 123 sesame street or 900 mission ave", "what kind of housing is 900 mission ave and 123 sesame street", "what kind of housing is 123 sesame street or 900 mission ave"]}, "housing unit whose posting date is jan 2 and that allows cats": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string allows_cats)))", "paraphrases": ["find a housing unit posted on january 2 and that allows cats", "housing allowing cats that was posted on january 2", "what housing unit allowing cats was posted on jan 2", "housing that allows cats that posted on january 2"]}, "housing unit that allows cats and that allows cats": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.13) (name en.housing_unit.19) (name en.housing_unit.23) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.3) (name en.housing_unit.33) (name en.housing_unit.37) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.58) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_cats)) (string allows_cats)))", "paraphrases": ["which housing unit permits cats inside it", "housing unit that allows cats", "pet friendly housing unit"]}, "housing type that is housing type of housing unit whose housing type is apartment": {"denotation": "(list (name en.housing.apartment))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment)))", "paraphrases": ["which housing unit has an apartment kind of house", "find housing units of the type apartment", "looking for apartments"]}, "neighborhood that is neighborhood of housing unit whose housing type is apartment": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment)))", "paraphrases": ["what is the neighborhood area of that apartment", "neighborhood with apartments", "neighborhoods with apartments", "what neighborhoods have apartments", "what is the neighborhood of housing unit of the apartments"]}, "housing unit that has at least two neighborhood": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string >=) (number 2)))", "paraphrases": ["what housing unit has two or more neighborhoods", "housing that has at least two neighborhood", "housing near at least two neighborhoods"]}, "housing unit whose monthly rent is 1500 dollars and that has a private room": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.17) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.29) (name en.housing_unit.31) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.54) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string has_private_room)))", "paraphrases": ["find me a housing unti that chagres 1500 for rent and has a priiiiiiat bathroom", "private room for 1500 a month", "apartment with a private room that rents for 1500 a month", "which 1500monthly rentals come with private room", "housing that is 1500month and includes a private room"]}, "housing unit whose size is at least 800 square feet": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 800 en.square_feet))))", "paraphrases": ["apartments 800 square feet and above", "which housing units are at least 800 square feet in size", "housing unit bigger than 800 square feet", "housing unit that is 800 square feet or larger in size", "housing that is 800 square feet or bigger"]}, "housing unit whose size is at least 800 square feet or 1000 square feet": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 800 en.square_feet) (number 1000 en.square_feet)))))", "paraphrases": ["housing that is at least 800 square feet or at least 1000 square feet", "list all housing us that are at least 800 or 1000 square feet", "apartments between 800 and 1000 square feet", "what housing units are at least 800 or 1000 square feet", "housing that is beetween 800 and 1000 square feet"]}, "housing unit whose housing type is housing unit whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "paraphrases": ["what housing unit is the same type as the unit posted on jan 2", "what type of housing unit posted jan 2nd", "a housing unit that was posted on january 2"]}, "housing unit that allows cats and whose size is 800 square feet": {"denotation": "(list (name en.housing_unit.13) (name en.housing_unit.19) (name en.housing_unit.33) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_cats)) (string size) (string =) (number 800 en.square_feet)))", "paraphrases": ["find 800 square feet housing units that are cat friendly", "show me housing with 800 square feet of space where cats are acceptable", "which housing unit with an area of 800 square feet permits  cats and dogs inside it"]}, "housing type that is housing type of housing unit that allows dogs": {"denotation": "(list (name en.housing.apartment) (name en.housing.condo) (name en.housing.flat) (name en.housing.house))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_dogs))))", "paraphrases": ["what kinds of housing allow dogs", "what is the housing type of the housing unit that allows dogs", "which housing type allows pets", "housing that allows dogs"]}, "neighborhood that is neighborhood of 123 sesame street": {"denotation": "(list (name en.neighborhood.midtown_west))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) en.housing_unit.123_sesame_street))", "paraphrases": ["the neighborhood of apartment 123 sesame street", "in which area is 123 sesame street", "what neighborhood is 123 sesame street in", "which neighborhood is 123 sesame street in", "find housing units around 123 sesame street"]}, "housing unit whose monthly rent is 1500 dollars and whose monthly rent is 1500 dollars": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.17) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string rent) (string =) (number 1500 en.dollar)))", "paraphrases": ["which housing has a monthly rent of 1500 dollars", "find housing units with rent as 1500 dollars", "housing unit whose monthly rent is 1500 dollars"]}, "housing unit whose neighborhood is midtown west or chelsea": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.19) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.27) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.33) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.39) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.neighborhood.midtown_west en.neighborhood.chelsea)))", "paraphrases": ["show me housing in midtown west or chelsea", "apartments in the midtown west or chelsea neighborhoods", "find housing units in the neighborhoods of midtown west or chelsea", "which housing unit is in the area of midtown west or chelsea"]}, "housing unit whose neighborhood is midtown west": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.27) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.35) (name en.housing_unit.37) (name en.housing_unit.39) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.50) (name en.housing_unit.56) (name en.housing_unit.58) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["housing unit near midtown west", "find all units available midtown east", "what housing units are in midtown west"]}, "neighborhood that is neighborhood of 123 sesame street or 900 mission ave": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave)))", "paraphrases": ["neighborhoods in 123 sesame street or 900 mission ave", "what are the neighborhoods of 123 sesame street and 900 mission avenue", "neighborhood of 123 sesame street or 900 mission ave", "what are the neighborhoods of 123 sesame street or 900 mission ave", "housing in the neighborhood of 123 sesame street or 900 mission ave"]}, "housing unit whose monthly rent is at most 1500 dollars": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.17) (name en.housing_unit.19) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 1500 en.dollar))))", "paraphrases": ["what housing unit is priced at 1500 dollars", "show me housing available for 1500 dollars a month or less", "housing that is 1500month or less", "apartments for rent below 1500", "which housing unit has a rent of 1500 dollars per month"]}, "neighborhood of 123 sesame street": {"denotation": "(list (name en.neighborhood.midtown_west))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string neighborhood)))", "paraphrases": ["what is the neighborhood of 123 sesame street", "area around 123sesame street", "what neighborhood is 123 sesame street in", "what kind of housing is in 123 sesame street", "housing near 123 sesame street"]}, "housing unit that allows dogs and whose size is 800 square feet": {"denotation": "(list (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.26) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.52) (name en.housing_unit.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_dogs)) (string size) (string =) (number 800 en.square_feet)))", "paraphrases": ["800 square foot dogfriendly apartment", "dogfriendly hosing that is 800 square feet", "what 800 square housing allows dogs", "800 square feet housing unit which allows dogs", "800 square feet housing that allows dogs"]}, "neighborhood that is neighborhood of the least number of housing unit": {"denotation": "(list (name en.neighborhood.midtown_west))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["neighborhoods with the least housing units", "find the neighborhood that has the least number of housing units", "looking for a quiet neighborhood", "what neighborhood has the least amount of housing", "neighborhood with the fewest amount of housing units"]}, "housing unit that has the smallest posting date": {"denotation": "(list (name en.housing_unit.30) (name en.housing_unit.35) (name en.housing_unit.39) (name en.housing_unit.48) (name en.housing_unit.56))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date))))", "paraphrases": ["what housing has been posted lately", "housing unit with the smallest posting date", "which housing unit is posted lately", "earliest posted housing", "find housing unit with the latest posting date"]}, "housing type that is housing type of housing unit whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "paraphrases": ["find all housing units posted on january 2", "what kind of housing was posted on jan 2", "housing type posted january 2", "what housing is the same type as the housing posted on january 2", "housing posted on january 2", "what kind of housing is the housing unit posted on jan 2", "housing with posting date of january 2", "what kind of housing was posted on january 2"]}, "housing unit that has the most number of neighborhood": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string max) (string neighborhood)))", "paraphrases": ["apartments with the most neighborhoods around it", "housing found in the most neighborhoods", "which area has the most number of housing units", "find housing units with the most number of neighborhoods", "units with the most neighborhoods"]}, "housing unit whose size is larger than 800 square feet or 1000 square feet": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.17) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.37) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.44) (name en.housing_unit.47) (name en.housing_unit.51) (name en.housing_unit.53) (name en.housing_unit.56) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 800 en.square_feet) (number 1000 en.square_feet)))))", "paraphrases": ["which housing unit is bigger  in area by 800 square feet or 1000 square feet", "housing at least 800 to 1000 square feet", "units larger than 800 square feet", "housing that is over 800 square feet or over 1000 square feet"]}, "neighborhood that is neighborhood of 123 sesame street and that is neighborhood of 123 sesame street": {"denotation": "(list (name en.neighborhood.midtown_west))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) en.housing_unit.123_sesame_street) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) en.housing_unit.123_sesame_street))", "paraphrases": ["neighborhood of 123 sesame street", "what is the neighborhood of 123 sesame street called as"]}, "housing unit that has a private room and that allows cats": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.13) (name en.housing_unit.3) (name en.housing_unit.37) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.54) (name en.housing_unit.58) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_room)) (string allows_cats)))", "paraphrases": ["apartments with a private bathroom that allow cats", "housing that allows cats and includes a private room", "housing unit with a private room and allows cats", "find cat friendly housing units with a private room", "which housing unit permits cats and has a private room"]}, "housing unit that has a private bath and whose neighborhood is midtown west": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.27) (name en.housing_unit.39) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.50) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_bath)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["which housing unit around midtown west has a private bath", "apartments with a private bathroom in midtown west", "find housing units with private bath located in the neighborhoods of midtown west", "which housing in midtown west has a private bath"]}, "housing unit whose size is smaller than 800 square feet": {"denotation": "(list (name en.housing_unit.16) (name en.housing_unit.22) (name en.housing_unit.32) (name en.housing_unit.35) (name en.housing_unit.38) (name en.housing_unit.43) (name en.housing_unit.54) (name en.housing_unit.57) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 800 en.square_feet))))", "paraphrases": ["housing under 800 square feet", "list all housing that is smaller than 800 square feet", "housing unit smaller than 800 square feet", "find housing units with size lesser than 800 square feet", "housing that is less than 800 square feet"]}, "housing unit whose neighborhood is midtown west and whose monthly rent is 1500 dollars": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.27) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.35) (name en.housing_unit.50) (name en.housing_unit.58) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string rent) (string =) (number 1500 en.dollar)))", "paraphrases": ["apartments in midtown west with a rent of 1500 a month", "housing in midtown west that costs 1500month", "which housing unit in midtown area has a monthly rent of 1500 dollars", "show me housing in midtown west where rent is 1500 dollars a month", "find housing units in the neighborhoods of midtown west with 1500 dollars as monthly rent"]}, "housing unit that allows dogs": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.17) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.38) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.52) (name en.housing_unit.54) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.6) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_dogs)))", "paraphrases": ["apartments that allow dogs", "housing that accepts dogs", "what housing units allows dogs", "what housing units allow dogs"]}, "housing unit that has a private bath and that has a private bath": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.2) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.34) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_bath)) (string has_private_bath)))", "paraphrases": ["housing unit with a private bath", "apartments that have a private bath", "find housing with a private bath", "which housing unit offers a private bath"]}, "housing unit whose posting date is housing unit whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "paraphrases": ["what housing unit was posted on jan 2", "all housing units posted on january 2"]}, "housing unit whose size is not 800 square feet": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.35) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.47) (name en.housing_unit.51) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string !=) (number 800 en.square_feet)))", "paraphrases": ["housing that is not 800 square feet", "housing unit that is not 800 square feet", "which housing unit has less than 800 square feet", "housing size other than 800 square feet", "housing that is more than 800 square feet"]}, "housing unit whose monthly rent is 1500 dollars": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.17) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)))", "paraphrases": ["find housing units with rent as 1500 dollars per month", "apartment for rent at 1500", "which housing unit has 1500 dollars as monthly rent", "housing available for 1500month"]}, "housing unit whose monthly rent is 1500 dollars and whose size is 800 square feet": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.20) (name en.housing_unit.26) (name en.housing_unit.29) (name en.housing_unit.33) (name en.housing_unit.36) (name en.housing_unit.4) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.55) (name en.housing_unit.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string size) (string =) (number 800 en.square_feet)))", "paraphrases": ["which 1500monthly rentals are 800 square feet", "800 square foot unit with rent of 1500 monthly", "housing that is 1500month and 800 square feet", "800 square foot apartment for 1500 rent"]}, "housing unit whose neighborhood is not midtown west": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.36) (name en.housing_unit.38) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.45) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.57) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string !=) en.neighborhood.midtown_west))", "paraphrases": ["housing that isnt in midtown west", "find housing units far from midtown west", "what are the  units that  do  not belong to the area around midtown west", "housing not in midtown west", "exclude apartments from midtown west"]}, "housing unit whose posting date is at most jan 2": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2015 1 2))))", "paraphrases": ["apartments posted on january 2", "housing posted on or before january 2", "which housing unit is posted on or before jan 2", "find housing units posted before january 2nd", "housing unit with a posting date at the latest january 2"]}, "housing unit whose housing type is apartment and that has a private bath": {"denotation": "(list (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.42))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string has_private_bath)))", "paraphrases": ["apartments with a private bath", "housing apartments with a private bath", "find apartments with a private bath", "apartment with a private bathroom", "apartments with private baths"]}, "midtown west or chelsea": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.neighborhood.midtown_west en.neighborhood.chelsea))", "paraphrases": ["neighborhoods medtown west or chelsea", "looking for housing in midtown west or chelsea area"]}, "housing unit whose neighborhood is neighborhood that is neighborhood of 123 sesame street": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.27) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.35) (name en.housing_unit.37) (name en.housing_unit.39) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.50) (name en.housing_unit.56) (name en.housing_unit.58) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) en.housing_unit.123_sesame_street)))", "paraphrases": ["housing in the same neighborhood at 123 sesame street", "housing unit in the neighborhood of 123 sesame street", "which housing unit is in the area of 123 sesame street"]}, "housing unit whose housing type is apartment and that has a private room": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.20) (name en.housing_unit.24) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.57))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string has_private_room)))", "paraphrases": ["show me apartments with a private room", "find housing units with a private room and is of the housing type apartment", "apartment with a private room", "housing unit which is an apartment housing type with a private room", "apartments with a private room"]}, "housing unit whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)))", "paraphrases": ["which housing unit posted jan 2nd"]}, "housing unit whose posting date is jan 2 and whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string posting_date) (string =) (date 2015 1 2)))", "paraphrases": ["which housing unit has a jan 2nd posting", "what housing unit was posted on jan 2"]}, "housing unit whose posting date is jan 2 and that is posting date of 123 sesame street": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string posting_date)) (string =) en.housing_unit.123_sesame_street))", "paraphrases": ["what housing unit posted was posted on jan 2", "housing that was posted on january 2 of 123 sesame street kind", "which housing posted jan 2nd at 123 sesame street"]}, "number of housing type": {"denotation": "(list (number 4 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type))))", "paraphrases": ["what is the housing type number", "what is the phone number of this apartment complex", "how many different housing types are there", "count of different units"]}, "housing type that is housing type of at least two housing unit": {"denotation": "(list (name en.housing.apartment) (name en.housing.condo) (name en.housing.flat) (name en.housing.house))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string >=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["show me housing that is the same type as at least two others", "apartments with at least 2 units", "name housing types that has more than one housing unit of that type", "what is the housing type of the two housing units", "looking for a 2 family house"]}, "housing type that is housing type of housing unit whose neighborhood is midtown west": {"denotation": "(list (name en.housing.apartment) (name en.housing.condo) (name en.housing.flat) (name en.housing.house))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west)))", "paraphrases": ["apartment similar to the apartment in midtown west", "what kind of housing is in midtown west", "what are housing types found in the neighborhoods of midtown west", "housing types in the midtown west", "what kinds of housing is there in midtown west"]}, "housing unit whose size is 800 square feet and whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string posting_date) (string =) (date 2015 1 2)))", "paraphrases": ["what 800 square foot housing posted jan 2nd", "housing of 800 square feet posted on january 2", "housing 800 sf in size posted on january 2"]}, "housing unit that has two housing type": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) (number 2)))", "paraphrases": ["which housing has two types", "what housing unit has two housing types", "a twohousing unit"]}, "housing type that is housing type of housing unit whose monthly rent is 1500 dollars": {"denotation": "(list (name en.housing.apartment) (name en.housing.condo) (name en.housing.flat) (name en.housing.house))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar))))", "paraphrases": ["units with 1500 dollar rent", "what kind of housing is available for 1500month", "seeking housing with rent at 1500", "which kind of housing is available for a rent of 1500 dollars per month", "what is the housing type that charges 1500 dollars as monthly rent"]}, "housing unit whose posting date is at least posting date of 123 sesame street": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.19) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.47) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "paraphrases": ["what housing has the same posting date as those in 123 sesame street", "housing posted the same day or after 123 sesame street", "housing that posted on the same day at 123 sesame street", "find housing units that are posted on the date same as 123 sesame street or later"]}, "housing unit whose size is at least size of 123 sesame street": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string size)))))", "paraphrases": ["what housing units that are at least the size of 123 sesame street", "what housing units are the same size as those in 123 sesame street", "apartment that is the same size are 123 sesame street", "housing that is the same size or bigger than 123 sesame street", "housing units that are at least the same square footage as the housing unit on 123 sesame street"]}, "neighborhood that is not neighborhood of 123 sesame street": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string !=) en.housing_unit.123_sesame_street))", "paraphrases": ["exclude apartments that are in the same neighborhood as 123 sesame street", "neighborhoods that do not contain 123 sesame street", "neighborhoods not near 123 sesame street", "list available neighborhoods besides 123 sesame street"]}, "housing unit whose posting date is at most posting date of 123 sesame street": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.123_sesame_street) (name en.housing_unit.18) (name en.housing_unit.2) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.30) (name en.housing_unit.35) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.51) (name en.housing_unit.56) (name en.housing_unit.59) (name en.housing_unit.6))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "paraphrases": ["show me housing which posted on or before the day 123 sesame street did", "find housing units posted before or on the same date as 123 sesame street", "housing posted before or on the same day as 123 sesame street"]}, "housing unit that has a private bath and whose housing type is apartment": {"denotation": "(list (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.42))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_bath)) (string housing_type) (string =) en.housing.apartment))", "paraphrases": ["apartment with private bath", "apartment type housing unit that has private bath", "housing apartment with a private bath"]}, "housing unit whose housing type is apartment and whose size is 800 square feet": {"denotation": "(list (name en.housing_unit.20) (name en.housing_unit.26) (name en.housing_unit.39) (name en.housing_unit.4))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string size) (string =) (number 800 en.square_feet)))", "paraphrases": ["which housing unit has apartment kind of houses with an area of 800 square feet", "find an apartment that is 800 square feet", "800 square feet apartment type housing unit", "apartments at 800 square feet"]}, "housing type that is housing type of 123 sesame street and that is housing type of 123 sesame street": {"denotation": "(list (name en.housing.condo))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) en.housing_unit.123_sesame_street) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) en.housing_unit.123_sesame_street))", "paraphrases": ["what is the housing type of 123 sesame street", "show me housing that is the same type as 123 sesame street", "want a housing type like 123 sesame street"]}, "housing unit whose posting date is posting date of 123 sesame street": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.26) (name en.housing_unit.27))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string posting_date))))", "paraphrases": ["which housing unit is posted on the posting date of 123 sesame street", "housing posted the same day as 123 sesame street", "which housing posted on the same date as 123 sesame street", "find housing units with the same posting date as 123 sesame street"]}, "housing unit that has a private bath and that has a private room": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.17) (name en.housing_unit.2) (name en.housing_unit.22) (name en.housing_unit.34) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.54))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_bath)) (string has_private_room)))", "paraphrases": ["which housing unit offers a private room and a private bath", "housing unit with a private bath and room", "housing unit with private bath as well as private room", "find housing that has a private room and bath", "housing with a master bedroom and private bath"]}, "housing unit whose size is at most 800 square feet or 1000 square feet": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.29) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.52) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 800 en.square_feet) (number 1000 en.square_feet)))))", "paraphrases": ["apartment between 800 and 1000 square feet", "housing that is 800 square feet or less or 1000 square feet or less", "housing unit at most 800 or 1000 square feet", "find housing units less than 1000  square feet", "housing that ranges between 800 and 1000 square feet"]}, "apartment or condo": {"denotation": "(list (name en.housing.apartment) (name en.housing.condo))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat en.housing.apartment en.housing.condo))", "paraphrases": ["condomonium or flat", "condominium or apartment housing", "seeking apartment or condo"]}, "housing type that is housing type of at most two housing unit": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string <=) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["what kind of housing is at two or less housing units", "which housing consists of two units maximum", "housing with no more than two housing units"]}, "housing unit whose neighborhood is midtown west and whose housing type is apartment": {"denotation": "(list (name en.housing_unit.27) (name en.housing_unit.35) (name en.housing_unit.39))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string housing_type) (string =) en.housing.apartment))", "paraphrases": ["housing apartments in a midtown west neighborhood", "find apartments in the neighborhoods of midtown west", "apartments in midtown west"]}, "housing unit that has a private room and whose monthly rent is 1500 dollars": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.17) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.29) (name en.housing_unit.31) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.54) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.7))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_room)) (string rent) (string =) (number 1500 en.dollar)))", "paraphrases": ["find housing units with a private room and has 1500 dollars as monthly rent", "which housing unit with a rent of 1500 dollars per month has a private room", "apartment with a private room for rent at 1500", "housing that is 1500month with a private room", "which housing with a private room rents for 1500 dollar monthly"]}, "housing unit whose posting date is jan 2 and that has a private bath": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string has_private_bath)))", "paraphrases": ["a unit with a private bath that posted on january 2", "housing with private bath that was posted on january 2", "what housing unit with a private bath was posted on jan 2"]}, "housing unit whose size is 800 square feet and that has a private bath": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.2) (name en.housing_unit.21) (name en.housing_unit.34) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.55) (name en.housing_unit.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string has_private_bath)))", "paraphrases": ["housing units that are 800 square feet and have private baths", "800 square feet housing unit with a private bath", "which housing unit has a private bath and an area of 800 square feet", "housing that is 800 square feet with a private bath", "800 square foot apartment with private bathroom"]}, "housing unit whose posting date is jan 2 and whose neighborhood is midtown west": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["housing in midtown west that posted on january 2", "housing in midtown west that was posted on january 2", "housing units with a posting date of january 2nd that are located in midtown west", "what housing unit posted on jan 2 is in midtown west", "housing unit in west midtown posted on january 2"]}, "housing unit that has a private bath and whose size is 800 square feet": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.2) (name en.housing_unit.21) (name en.housing_unit.34) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.55) (name en.housing_unit.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_bath)) (string size) (string =) (number 800 en.square_feet)))", "paraphrases": ["housing that is 800 square feet and includes a private bah", "800 square foot apartment with a private bath", "find all 800 square foot units with private baths", "private bath with 800 square feet"]}, "housing type that is not housing type of 123 sesame street": {"denotation": "(list (name en.housing.apartment) (name en.housing.flat) (name en.housing.house))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string !=) en.housing_unit.123_sesame_street))", "paraphrases": ["name housing types other than 123 sesame street type", "find housing types other than 123 sesame street", "housing that is not the same kind as 123 sesame street", "exclude housing similar to 123 sesame street", "list all housing types that are not the same as those in 123 sesame street"]}, "number of housing unit": {"denotation": "(list (number 60 count))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call .size (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["what is the housing unit number", "what is the house number of the apartment", "how many housing units are there", "show total number of all units"]}, "housing unit that allows cats and that has a private bath": {"denotation": "(list (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_cats)) (string has_private_bath)))", "paraphrases": ["housing unit that allows cats and has a private bath", "which housing unit permits cats and had a private bath in it", "find cat friendly housing units with a private bath", "apartment with a private bath that also accepts cats", "housing that allows cats and includes a private bath"]}, "neighborhood that is neighborhood of housing unit whose neighborhood is midtown west": {"denotation": "(list (name en.neighborhood.midtown_west))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west)))", "paraphrases": ["where is midtown west", "what housing unit is found in the midtown east neighborhood", "what are the housing units in the area around midtown west", "what is the other areas around midtown west that has housing units"]}, "housing type that is housing type of housing unit that allows cats": {"denotation": "(list (name en.housing.apartment) (name en.housing.condo) (name en.housing.flat) (name en.housing.house))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_cats))))", "paraphrases": ["what is the housing type that allows cats", "what kinds of housing allow cats", "which kind of housing permits cats inside it"]}, "housing unit whose neighborhood is midtown west and that has a private room": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.3) (name en.housing_unit.31) (name en.housing_unit.37) (name en.housing_unit.39) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.56) (name en.housing_unit.58) (name en.housing_unit.7) (name en.housing_unit.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string has_private_room)))", "paraphrases": ["apartments with a private room in midtown west", "find housing units with private room near midtown west", "private room in midtown west", "housing unit with a private room in midtown west"]}, "housing unit that has the most number of housing type": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string max) (string housing_type)))", "paraphrases": ["what is the most numerous housing type", "which housing has the most amount of housing types", "apartment complexes with the most units", "which housing unit has  the variety of houses", "building with the most kinds of units"]}, "housing unit whose size is at most 800 square feet": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.26) (name en.housing_unit.29) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.52) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 800 en.square_feet))))", "paraphrases": ["800 square foot apartments", "find a housing that is no more than 800 square feet", "housing unit at most 800 square feet", "housing that is 800 square feet or less", "find housing units with maximum size 800 square feet"]}, "housing unit whose monthly rent is larger than 1500 dollars or 2000 dollars": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.16) (name en.housing_unit.18) (name en.housing_unit.2) (name en.housing_unit.21) (name en.housing_unit.25) (name en.housing_unit.3) (name en.housing_unit.34) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.56) (name en.housing_unit.59) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 1500 en.dollar) (number 2000 en.dollar)))))", "paraphrases": ["which housing unit has a rent of 1500 dollars or 2000 dollars per month", "apartments with rent between 1500 to 2000 dollars", "housing that is more than 1500month or more than 2000month"]}, "housing unit whose size is smaller than size of 123 sesame street": {"denotation": "(list (name en.housing_unit.16) (name en.housing_unit.22) (name en.housing_unit.32) (name en.housing_unit.35) (name en.housing_unit.38) (name en.housing_unit.43) (name en.housing_unit.54) (name en.housing_unit.57) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string size)))))", "paraphrases": ["housing that is smaller than 123 sesame street", "find housing units with size lesser than that of 123 sesame street", "unit smaller than 123 sesame street", "apartments that are smaller than 123 sesame street", "housing units that are smaller than 123 sesame street"]}, "housing unit whose size is larger than 800 square feet": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.17) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.37) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.44) (name en.housing_unit.47) (name en.housing_unit.51) (name en.housing_unit.53) (name en.housing_unit.56) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 800 en.square_feet))))", "paraphrases": ["find housing units with size greater than 800 square feet", "housing that is bigger than 800 square feet", "unit larger than 800 square feet", "which housing have more than 800 square feet of space", "apartments bigger than 800 square feet"]}, "housing type that is housing type of housing unit whose size is 800 square feet": {"denotation": "(list (name en.housing.apartment) (name en.housing.condo) (name en.housing.flat) (name en.housing.house))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet))))", "paraphrases": ["unit of 800 square feet", "housing units that are 800 square feet", "what kind of housing is 800 square feet"]}, "housing unit whose neighborhood is midtown west and that allows dogs": {"denotation": "(list (name en.housing_unit.27) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.35) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.58) (name en.housing_unit.8) (name en.housing_unit.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string allows_dogs)))", "paraphrases": ["show me housing in midtown west where dogs are welcome", "housing units in midtown west that allow dogs", "housing unit in midtown west and allows dogs"]}, "housing unit whose neighborhood is midtown west and whose neighborhood is midtown west": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.27) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.35) (name en.housing_unit.37) (name en.housing_unit.39) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.50) (name en.housing_unit.56) (name en.housing_unit.58) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string neighborhood) (string =) en.neighborhood.midtown_west))", "paraphrases": ["find housing units in the neighborhoods of midtown west", "housing units in the midtown west area", "apartment in the midtown west neighborhood", "which housing unit is available in the area around mid town west"]}, "housing unit whose monthly rent is 1500 dollars and that has a private bath": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.17) (name en.housing_unit.22) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.4) (name en.housing_unit.42) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.6) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string has_private_bath)))", "paraphrases": ["housing with 1500 dollars rent that has a private bath", "apartment with a private bathroom for rent at 1500", "housing units with a private bath and a 1500 dollar monthly rent", "which housing unit has 1500 dollars as monthly rent and also has the facility of a private bath"]}, "housing unit that has a private bath and whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_bath)) (string posting_date) (string =) (date 2015 1 2)))", "paraphrases": ["a housing unit with a private bath that posted on january 2", "housing with private bath posted on january 2", "what housing using posted on jan 2 has a private bath"]}, "housing unit that has a private bath and whose monthly rent is 1500 dollars": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.17) (name en.housing_unit.22) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.4) (name en.housing_unit.42) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.6) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_bath)) (string rent) (string =) (number 1500 en.dollar)))", "paraphrases": ["housing unit with a private bath and 1500 dollar rent", "apartment with a private bath for rent at 1500", "show me housing whose rent is 1500 dollars and which provides a private bathroom", "housing unit with a private bath and cost 1500 dollars rent"]}, "neighborhood that is neighborhood of more than two housing unit": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["neighborhood with more than two housing units", "neighborhoods that have more than two units", "housing in a neighborhood larger than two houses", "which area has more than two housing units", "neighborhoods with more than two apartment complexes"]}, "housing unit whose size is 800 square feet or 1000 square feet": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.26) (name en.housing_unit.29) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.36) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.52) (name en.housing_unit.55) (name en.housing_unit.58) (name en.housing_unit.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 800 en.square_feet) (number 1000 en.square_feet))))", "paraphrases": ["find housing between 800 and 1000 square feet", "housing unit with size of either 800 or 1000 square feet", "housing unit that is 800 or 1000 square feet", "which housing unit has  an area of 800 or 1000 square feet"]}, "housing type that is housing type of housing unit that has a private bath": {"denotation": "(list (name en.housing.apartment) (name en.housing.condo) (name en.housing.flat) (name en.housing.house))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_bath))))", "paraphrases": ["which types of housing have a private bathroom", "what kinds of housing has a private bath", "specify the housing type of the housing unit that has a private bath", "apartments with a private bathroom", "unit with private bath"]}, "housing unit that allows dogs and that has a private bath": {"denotation": "(list (name en.housing_unit.17) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.34) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.54) (name en.housing_unit.6) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_dogs)) (string has_private_bath)))", "paraphrases": ["apartments with a private bath that allow dogs", "which housing unit permits dogs and has the facility of a private bath", "housing unit that allows dogs and has a private bath", "which unit allows dogs and has a private bath"]}, "housing unit whose monthly rent is 1500 dollars and that allows cats": {"denotation": "(list (name en.housing_unit.13) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.33) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.58) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string allows_cats)))", "paraphrases": ["catfriendly apartments with rent at 1500", "housing units that allow cats and charge 1500 rent monthly", "housing that allows cats and is 1500 a month", "cats permitted 1500 rent monthly", "housing unit that costs 1500 dollars rent and allows cats"]}, "housing unit whose monthly rent is at most 1500 dollars or 2000 dollars": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.19) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.44) (name en.housing_unit.48) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 1500 en.dollar) (number 2000 en.dollar)))))", "paraphrases": ["find housing units with 1500 dollars to 2000 as rent", "what housing is priced at 1500 or 2000 dollars", "which housing unit is available for a rent of 1500 pr 2000 dollars per month", "housing that is 1500month or less or 2000month or less"]}, "housing unit that has the smallest size": {"denotation": "(list (name en.housing_unit.57))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size))))", "paraphrases": ["smallest apartments", "smallest housing units", "smallest available unit", "which housing unit has the smallest size", "what is the smallest housing"]}, "housing unit whose posting date is jan 2 and whose size is 800 square feet": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string size) (string =) (number 800 en.square_feet)))", "paraphrases": ["housing units that are posted on january end and have a total size of 800 square feet", "find an 800 sq ft housing unit posted on january 2", "housing 800 sq in size posted on january 2"]}, "housing type that is housing type of two housing unit": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["housing that includes two units", "what housing is a two unit type", "what kind of housing are the two housing units", "housing of two types"]}, "housing unit whose size is smaller than 800 square feet or 1000 square feet": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.29) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.52) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 800 en.square_feet) (number 1000 en.square_feet)))))", "paraphrases": ["which housing unit is smaller than 800 square feet or 1000 square feet by area", "find housing units with size between 800 and 1000 square feet", "housing that is smaller than 800 square feet or smaller than 1000 square feet", "apartment that is below 1000 or 800 square feet", "housing unit smaller than 800 or 1000 square feet"]}, "housing unit whose size is 800 square feet and that allows cats": {"denotation": "(list (name en.housing_unit.13) (name en.housing_unit.19) (name en.housing_unit.33) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string allows_cats)))", "paraphrases": ["what kind of housing offers 800 square feet and allows cats", "800 square foot apartment that allows cats", "which housing unit with an area of 800 square feet permits cats in it", "find 800 square feet housing units that allow cats"]}, "housing unit whose monthly rent is 1500 dollars or 2000 dollars": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.17) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.42) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (number 1500 en.dollar) (number 2000 en.dollar))))", "paraphrases": ["housing unit that costs 1500 or 200 dollars in rent", "apartment with rent between 1500 and 2000", "find housing with rental charges between 1500 and 2000 dollars", "unit with rent between 15002000 dollars", "housing that is 1500month or 2000month"]}, "housing unit that has a private room": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.17) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.31) (name en.housing_unit.34) (name en.housing_unit.37) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.54) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.7) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_room)))", "paraphrases": ["housing unit with a private room", "what housing has a private room", "housing units with private room"]}, "housing unit whose size is 800 square feet and that has a private room": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.29) (name en.housing_unit.34) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string has_private_room)))", "paraphrases": ["800 square foot housing unit with a private room", "800 square foot apartment with a private room", "housing with a private room that is 800 square feet total", "which housing unit with an area of 800 square feet has the facility of a private room", "find housing units with a private room and is of size 800 square feet"]}, "housing unit that has a private room and that allows dogs": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.17) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.31) (name en.housing_unit.34) (name en.housing_unit.4) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.54) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_room)) (string allows_dogs)))", "paraphrases": ["housing unit that both have a private room and allow dogs", "which housing provides a private room where dogs are allowed", "which housing unit permits dogs and has the facility of a private room"]}, "average size of housing unit": {"denotation": "(list (number 1008.765 en.square_feet))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string avg) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size))))", "paraphrases": ["unit of average size", "what is the average find 800 square feet housing units that allow cats", "what is the average size of an apartment", "what is the average area  of a housing unit", "what is the average size of housing"]}, "housing unit whose housing type is apartment and whose monthly rent is 1500 dollars": {"denotation": "(list (name en.housing_unit.20) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.35) (name en.housing_unit.4) (name en.housing_unit.42) (name en.housing_unit.57))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string rent) (string =) (number 1500 en.dollar)))", "paraphrases": ["apartments are 1500", "housing apartments that costs 1500 dollars", "housing unit which is an apartment with a monthly rent of 1500 dollars", "what apartment costs 1500 dollars"]}, "housing unit whose housing type is housing type of 123 sesame street": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.2) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.33) (name en.housing_unit.37) (name en.housing_unit.47) (name en.housing_unit.49) (name en.housing_unit.52) (name en.housing_unit.54) (name en.housing_unit.56) (name en.housing_unit.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string housing_type))))", "paraphrases": ["find housing units in the same housing type of 123 sesame street", "housing unit with same housing type as that of 123 sesame street", "which housing unit resembles that of 123 sesame street"]}, "housing unit whose size is 800 square feet": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.26) (name en.housing_unit.29) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.36) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.52) (name en.housing_unit.55) (name en.housing_unit.58) (name en.housing_unit.59))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)))", "paraphrases": ["unit is 800 square feet", "show me housing with 800 square feet of space", "find 800 square feet sized housing units"]}, "housing type that is housing type of the least number of housing unit": {"denotation": "(list (name en.housing.apartment))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["what kind of housing has the least number of units", "rarest housing type", "what housing units have a small amount of housing units", "apartments with the least amount of units", "what are the rare housing types"]}, "housing unit whose posting date is jan 2 and that is neighborhood of 123 sesame street": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) en.housing_unit.123_sesame_street))", "paraphrases": ["what housing unit is in the same neighborhood as 123 sesame st and was posted on jan 2", "housing in 123 sesame street neighborhood that was posted on january 2", "what housing unit in the same neighborhood as 123 sesame street was posted on jan 2", "housing posted on january 2 around 123 sesame street"]}, "housing unit whose neighborhood is housing unit whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "paraphrases": ["what neighborhood is the housing unit in that was posted january 2", "a housing unit posted on january 2 in any neighborhood", "housing unit posted on january 2", "what housing unit is in the same neighborhood as the unit posted on jan 2"]}, "housing unit whose posting date is jan 2 and that has a private room": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string has_private_room)))", "paraphrases": ["what housing with a private room posted jan 2nd", "housing posted january 2nd that includes a private room", "find a housing unit posted on january 2 and that has a private room", "what housing unit with a private room was posted on jan 2"]}, "housing unit that has the largest size": {"denotation": "(list (name en.housing_unit.51))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size))))", "paraphrases": ["show me the housing with the most space available", "what is the biggest housing unit", "find the largest housing unit", "where are the biggest apartments", "which housing unit is bigger by area"]}, "neighborhood that is neighborhood of housing unit that allows cats": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_cats))))", "paraphrases": ["neighborhoods with catfriendly housing", "neighborhoods of housing units that allows cats", "which housing unit in the area permits cats", "what is the neighborhood of the apartment that is pet friendly", "find housing that allows cats"]}, "housing unit that has a private bath": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.2) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.25) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.34) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_bath)))", "paraphrases": ["housing units that have a private bath", "housing units with a private bath", "what housing unit contains a private bath", "apartment with a master bathroom"]}, "total monthly rent of housing unit": {"denotation": "(list (number 69586 en.dollar))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.aggregate (string sum) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent))))", "paraphrases": ["what is units monthly rental", "what is the monthly rent of this apartment", "what is the total monthly rent"]}, "housing unit that has less than two neighborhood": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string <) (number 2)))", "paraphrases": ["find housing units with just one neighborhood", "which area has less than two housing units", "quiet apartments", "housing found in less than two neighborhoods", "housing units with less than two nieghborhoods"]}, "housing unit that has the smallest monthly rent": {"denotation": "(list (name en.housing_unit.11))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string min) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent))))", "paraphrases": ["find the housing unit with the least monthly rent", "what housing has the cheapest rent", "cheapest places to rent", "cheapest housing", "which housing unit is available for the least rent"]}, "neighborhood that is neighborhood of less than two housing unit": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string <) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["a neighborhood with fewer than twohouse units", "what neighborhood has less than two housing units", "neighborhood with less than two housing", "which neighborhood has under two housing units"]}, "housing unit that allows dogs and whose monthly rent is 1500 dollars": {"denotation": "(list (name en.housing_unit.17) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.33) (name en.housing_unit.35) (name en.housing_unit.4) (name en.housing_unit.54) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.6) (name en.housing_unit.8))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string allows_dogs)) (string rent) (string =) (number 1500 en.dollar)))", "paraphrases": ["pet friendly housing with 1500 dollars as rent", "which 1500monthly rentals are dogfriendly", "what housing unit has a price of 1500 dollars and allows dogs"]}, "housing unit whose monthly rent is at least monthly rent of 123 sesame street": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string rent)))))", "paraphrases": ["which housing unit has the rent of 123 sesame street", "housing unit as costly as the rent of the homes in 123 sesame street", "housing that is at least as expensive as 123 sesame street", "apartments with the same rent as 123 sesame street", "what is the monthly rent for 123 sesame street"]}, "housing unit whose neighborhood is neighborhood of 123 sesame street": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.123_sesame_street) (name en.housing_unit.15) (name en.housing_unit.27) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.35) (name en.housing_unit.37) (name en.housing_unit.39) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.50) (name en.housing_unit.56) (name en.housing_unit.58) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string neighborhood))))", "paraphrases": ["housing in the neighborhood of 123 sesame street", "apartments in the same neighborhood at 123 sesame street", "find housing units around the neighborhoods of 123 sesame street"]}, "housing unit whose housing type is apartment and whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string posting_date) (string =) (date 2015 1 2)))", "paraphrases": ["apartments that were posted on january 2"]}, "housing unit whose monthly rent is not 1500 dollars": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.21) (name en.housing_unit.23) (name en.housing_unit.25) (name en.housing_unit.3) (name en.housing_unit.34) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.56) (name en.housing_unit.59) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string !=) (number 1500 en.dollar)))", "paraphrases": ["which housing unit is available for a price of less than 1500 dollars", "housing unit whose monthly rent is not 1500 dollars", "find housing units with monthly not equal to 1500 dollars", "housing that is not 1500month", "apartments with a rent below 1500 a month"]}, "housing unit that has the largest monthly rent": {"denotation": "(list (name en.housing_unit.10))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.superlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent))))", "paraphrases": ["most expensive places to rent", "which housing unit has the highest rent per month", "find the housing unit with the most monthly rent", "which housing unit with the highest rent", "most expensive housing"]}, "neighborhood that is neighborhood of housing unit that has a private bath": {"denotation": "(list (name en.neighborhood.chelsea) (name en.neighborhood.midtown_west) (name en.neighborhood.tribeca))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_bath))))", "paraphrases": ["neighborhoods with housing that have a private bathroom", "neighborhoods with housing that has a private bath", "which housing unit in this neighbourhood has the facility of a private bath", "which neighborhoods have housing with a private bath", "name the neighborhood of the housing unit with private bath"]}, "neighborhood that is neighborhood of two housing unit": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.neighborhood) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string neighborhood)) (string =) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["what neighborhood contains two housing units", "a neighborhood with twohouse units", "neighborhood that has two housing", "what neighborhood has two housing units"]}, "housing unit whose monthly rent is 1500 dollars and whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string posting_date) (string =) (date 2015 1 2)))", "paraphrases": ["housing units with monthly rents of 1500 dollars that posted on january 2", "housing with monthly rent of 1500 dollars that was posted on january 2", "what housing unit posted on jan 2s rent is 1500 dollars"]}, "housing unit whose neighborhood is midtown west and that allows cats": {"denotation": "(list (name en.housing_unit.27) (name en.housing_unit.3) (name en.housing_unit.37) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.46) (name en.housing_unit.50) (name en.housing_unit.58) (name en.housing_unit.8) (name en.housing_unit.9))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string allows_cats)))", "paraphrases": ["cats allowed in midtown west", "cat friendly apartments in midtown west", "housing units that allow cats in midtown west", "pet friendly housing near midtown west"]}, "housing unit that has at most two neighborhood": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string neighborhood) (string <=) (number 2)))", "paraphrases": ["housing unit within at most 2 neighborhoods", "housing found in two or less neighborhoods", "housing with 2 surrounding neighborhoods"]}, "housing unit whose size is housing unit whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "paraphrases": ["what size is the housing unit posted on january 2", "housing that was posted on january 2", "what housing unit is the same size as the unit posted on jan 2"]}, "housing unit that has at least two housing type": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string housing_type) (string >=) (number 2)))", "paraphrases": ["what housing unit has 2 or more types", "posting with at least two types of housing", "which housing unit has two types minimum", "what kind of housing has two housing types", "housing that has at least two types"]}, "housing unit whose monthly rent is smaller than monthly rent of 123 sesame street": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.15) (name en.housing_unit.19) (name en.housing_unit.23))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string rent)))))", "paraphrases": ["which housing unit has a lesser monthly rent than 123 sesame street", "housing unit with a cheaper rent than 123 sesame street", "apartments with a cheaper rent than 123 sesame street", "find housing units with rental charges lesser than that of 123 sesame street", "housing that is cheaper than 123 sesame street"]}, "housing unit that has a private room and that has a private room": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.17) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.22) (name en.housing_unit.24) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.31) (name en.housing_unit.34) (name en.housing_unit.37) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.54) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.7) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string has_private_room)) (string has_private_room)))", "paraphrases": ["units that have a private room", "apartment with a private room", "which housing unit has a private room", "find housing units with a private room"]}, "housing unit whose monthly rent is smaller than 1500 dollars": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.15) (name en.housing_unit.19) (name en.housing_unit.23))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent)) (string <) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (number 1500 en.dollar))))", "paraphrases": ["find housing for less than 1500 dollars", "apartments with rent below 1500", "housing that is cheaper than 1500month", "which housing unit has a monthly rent of less than 1500 dollars", "housing unit that is cheaper than 1500 dollars"]}, "housing unit whose size is at most size of 123 sesame street": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.26) (name en.housing_unit.29) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.52) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string size)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string size)))))", "paraphrases": ["which housing is no larger than 123 sesame street", "find housing units that are same as or lesser than the size of 123 sesame street", "housing that is the same size or smaller than 123 sesame street", "housing the same size as 123 sesame street", "which housing unit resembles the size of 123 sesame street"]}, "housing type that is housing type of the most number of housing unit": {"denotation": "(list (name en.housing.flat))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countSuperlative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (string max) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["what is the most common housing type", "what is the mostused housing type", "apartment complexes with the most units available", "which housing unit has the most kind of houses", "housing types of the most units"]}, "housing unit whose posting date is jan 2 or feb 3": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2015 1 2) (date 2015 2 3))))", "paraphrases": ["housing posted on january 2 or february 3", "what housing is posted either jan 2nd or feb 3rd", "what housing unit was posted on jan 2 or feb 3", "a housing unit posted on january 2 or february 3", "housing that was posted on january 2"]}, "housing unit whose posting date is larger than jan 2 or feb 3": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2015 1 2) (date 2015 2 3)))))", "paraphrases": ["housing that posted after january 2 or february 3", "housing that was posted after january 2 or february 3", "housing unit posted after january 2 or february 3"]}, "housing unit whose size is 800 square feet and whose monthly rent is 1500 dollars": {"denotation": "(list (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.20) (name en.housing_unit.26) (name en.housing_unit.29) (name en.housing_unit.33) (name en.housing_unit.36) (name en.housing_unit.4) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.55) (name en.housing_unit.58))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string rent) (string =) (number 1500 en.dollar)))", "paraphrases": ["find 800 square feet housing units with 1500 dollars as rent", "what housing costs 1500 dollars and is 800 square feet", "housing that is 800 square feet and 1500month", "which housing unit with an area of 800 square feet is available fora rent of 1500 dollars per month", "800 square foot apartment with rent at 1500 a month"]}, "housing unit whose posting date is larger than posting date of 123 sesame street": {"denotation": "(list (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.19) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.47) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "paraphrases": ["which housing unit was posted after the posting date of 123 sesame street", "find housing units posted before 123 sesame street", "apartment posted at a later date than 123 sesame street", "housing posted after 123 sesame street", "housing unit with a posting date bigger than the date of 123 sesame street"]}, "housing type that is housing type of more than two housing unit": {"denotation": "(list (name en.housing.apartment) (name en.housing.condo) (name en.housing.flat) (name en.housing.house))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.countComparative (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.reverse (string housing_type)) (string >) (number 2) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type))))", "paraphrases": ["housing types of more than two units", "housing type of more than two available housings", "show housing types for three or more units", "which housing unit has more than two kinds of houses", "housing that is either an apartment or townhouse"]}, "housing unit whose posting date is at most jan 2 or feb 3": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.11) (name en.housing_unit.12) (name en.housing_unit.123_sesame_street) (name en.housing_unit.13) (name en.housing_unit.14) (name en.housing_unit.15) (name en.housing_unit.16) (name en.housing_unit.17) (name en.housing_unit.18) (name en.housing_unit.19) (name en.housing_unit.2) (name en.housing_unit.20) (name en.housing_unit.21) (name en.housing_unit.22) (name en.housing_unit.23) (name en.housing_unit.24) (name en.housing_unit.25) (name en.housing_unit.26) (name en.housing_unit.27) (name en.housing_unit.28) (name en.housing_unit.29) (name en.housing_unit.3) (name en.housing_unit.30) (name en.housing_unit.31) (name en.housing_unit.32) (name en.housing_unit.33) (name en.housing_unit.34) (name en.housing_unit.35) (name en.housing_unit.36) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.4) (name en.housing_unit.40) (name en.housing_unit.41) (name en.housing_unit.42) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.5) (name en.housing_unit.50) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.54) (name en.housing_unit.55) (name en.housing_unit.56) (name en.housing_unit.57) (name en.housing_unit.58) (name en.housing_unit.59) (name en.housing_unit.6) (name en.housing_unit.7) (name en.housing_unit.8) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string <=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.concat (date 2015 1 2) (date 2015 2 3)))))", "paraphrases": ["housing unit posted at the latest january 2 or february 3", "housing posted on or before january 2 or on or before february 3", "find housing units with posting date between january 2nd and february 3rd"]}, "housing unit whose posting date is at least jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string posting_date)) (string >=) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (date 2015 1 2))))", "paraphrases": ["what housing was posted no earlier than jan 2", "housing that was posted january 2 or later", "housing that was posted on january 2"]}, "housing unit whose monthly rent is housing unit whose posting date is jan 2": {"denotation": "(list)", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string rent) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "paraphrases": ["what is the monthly rent of housing units posted on january 2nd", "housing unit for rent posted on january 2", "what housing unit has the same rent as the unit posted on jan 2", "housing with any monthly rent posted on january 2"]}, "housing unit whose monthly rent is larger than monthly rent of 123 sesame street": {"denotation": "(list (name en.housing_unit.10) (name en.housing_unit.12) (name en.housing_unit.16) (name en.housing_unit.18) (name en.housing_unit.2) (name en.housing_unit.21) (name en.housing_unit.25) (name en.housing_unit.3) (name en.housing_unit.34) (name en.housing_unit.37) (name en.housing_unit.38) (name en.housing_unit.39) (name en.housing_unit.41) (name en.housing_unit.43) (name en.housing_unit.44) (name en.housing_unit.45) (name en.housing_unit.46) (name en.housing_unit.47) (name en.housing_unit.48) (name en.housing_unit.49) (name en.housing_unit.51) (name en.housing_unit.52) (name en.housing_unit.53) (name en.housing_unit.56) (name en.housing_unit.59) (name en.housing_unit.9) (name en.housing_unit.900_mission_ave))", "formula": "(call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.housing_unit) (string !type)) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericProperty (string rent)) (string >) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.ensureNumericEntity (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.housing_unit.123_sesame_street (string rent)))))", "paraphrases": ["find housing units with rental charges greater than 123 sesame street", "units with larger rent than 123 sesame street", "which housing unit is more expensive than 123 sesame street", "housing that is more expensive than 123 sesame street", "apartments with rent that is more expensive than 123 sesame street"]}}